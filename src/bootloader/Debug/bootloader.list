
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000239c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080024a8  080024a8  000124a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800259c  0800259c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800259c  0800259c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800259c  0800259c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800259c  0800259c  0001259c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025a0  080025a0  000125a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080025a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000010  080025b4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080025b4  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007088  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ca1  00000000  00000000  000270c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f0  00000000  00000000  00028d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006d8  00000000  00000000  00029558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000136b0  00000000  00000000  00029c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000821d  00000000  00000000  0003d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00066ecd  00000000  00000000  000454fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac3ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d2c  00000000  00000000  000ac448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002490 	.word	0x08002490

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002490 	.word	0x08002490

0800014c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <MX_CRC_Init+0x20>)
 8000152:	4a07      	ldr	r2, [pc, #28]	; (8000170 <MX_CRC_Init+0x24>)
 8000154:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000156:	4805      	ldr	r0, [pc, #20]	; (800016c <MX_CRC_Init+0x20>)
 8000158:	f000 ff13 	bl	8000f82 <HAL_CRC_Init>
 800015c:	4603      	mov	r3, r0
 800015e:	2b00      	cmp	r3, #0
 8000160:	d001      	beq.n	8000166 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000162:	f000 fa34 	bl	80005ce <Error_Handler>
  }

}
 8000166:	bf00      	nop
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	20000034 	.word	0x20000034
 8000170:	40023000 	.word	0x40023000

08000174 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4a09      	ldr	r2, [pc, #36]	; (80001a8 <HAL_CRC_MspInit+0x34>)
 8000182:	4293      	cmp	r3, r2
 8000184:	d10b      	bne.n	800019e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000186:	4b09      	ldr	r3, [pc, #36]	; (80001ac <HAL_CRC_MspInit+0x38>)
 8000188:	695b      	ldr	r3, [r3, #20]
 800018a:	4a08      	ldr	r2, [pc, #32]	; (80001ac <HAL_CRC_MspInit+0x38>)
 800018c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000190:	6153      	str	r3, [r2, #20]
 8000192:	4b06      	ldr	r3, [pc, #24]	; (80001ac <HAL_CRC_MspInit+0x38>)
 8000194:	695b      	ldr	r3, [r3, #20]
 8000196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800019a:	60fb      	str	r3, [r7, #12]
 800019c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	40023000 	.word	0x40023000
 80001ac:	40021000 	.word	0x40021000

080001b0 <flash_erase>:
 * @brief   This function erases the memory.
 * @param   address: First address to be erased (the last is the end of the flash).
 * @return  status: Report about the success of the erasing.
 */
flash_status flash_erase(uint32_t address)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b088      	sub	sp, #32
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
  HAL_FLASH_Unlock();
 80001b8:	f000 ff70 	bl	800109c <HAL_FLASH_Unlock>

  flash_status status = FLASH_ERROR;
 80001bc:	23ff      	movs	r3, #255	; 0xff
 80001be:	77fb      	strb	r3, [r7, #31]
  FLASH_EraseInitTypeDef erase_init;
  uint32_t error = 0u;
 80001c0:	2300      	movs	r3, #0
 80001c2:	60bb      	str	r3, [r7, #8]

  erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80001c4:	2300      	movs	r3, #0
 80001c6:	60fb      	str	r3, [r7, #12]
  erase_init.PageAddress = address;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	617b      	str	r3, [r7, #20]
  erase_init.Banks = FLASH_BANK_1;
 80001cc:	2301      	movs	r3, #1
 80001ce:	613b      	str	r3, [r7, #16]
  /* Calculate the number of pages from "address" and the end of flash. */
  erase_init.NbPages = (FLASH_BANK1_END - address) / FLASH_PAGE_SIZE;
 80001d0:	687a      	ldr	r2, [r7, #4]
 80001d2:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <flash_erase+0x54>)
 80001d4:	1a9b      	subs	r3, r3, r2
 80001d6:	0a9b      	lsrs	r3, r3, #10
 80001d8:	61bb      	str	r3, [r7, #24]
  /* Do the actual erasing. */
  if (HAL_OK == HAL_FLASHEx_Erase(&erase_init, &error))
 80001da:	f107 0208 	add.w	r2, r7, #8
 80001de:	f107 030c 	add.w	r3, r7, #12
 80001e2:	4611      	mov	r1, r2
 80001e4:	4618      	mov	r0, r3
 80001e6:	f001 f841 	bl	800126c <HAL_FLASHEx_Erase>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d101      	bne.n	80001f4 <flash_erase+0x44>
  {
    status = FLASH_OK;
 80001f0:	2300      	movs	r3, #0
 80001f2:	77fb      	strb	r3, [r7, #31]
  }

  HAL_FLASH_Lock();
 80001f4:	f000 ff78 	bl	80010e8 <HAL_FLASH_Lock>

  return status;
 80001f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	3720      	adds	r7, #32
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	0801ffff 	.word	0x0801ffff

08000208 <flash_write>:
 * @param   *data:   Array of the data that we want to write.
 * @param   *length: Size of the array.
 * @return  status: Report about the success of the writing.
 */
flash_status flash_write(uint32_t address, uint32_t *data, uint32_t length)
{
 8000208:	b590      	push	{r4, r7, lr}
 800020a:	b087      	sub	sp, #28
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	607a      	str	r2, [r7, #4]
  flash_status status = FLASH_OK;
 8000214:	2300      	movs	r3, #0
 8000216:	75fb      	strb	r3, [r7, #23]

  HAL_FLASH_Unlock();
 8000218:	f000 ff40 	bl	800109c <HAL_FLASH_Unlock>

  /* Loop through the array. */
  for (uint32_t i = 0u; (i < length) && (FLASH_OK == status); i++)
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
 8000220:	e02f      	b.n	8000282 <flash_write+0x7a>
  {
    /* If we reached the end of the memory, then report an error and don't do anything else.*/
    if (FLASH_APP_END_ADDRESS <= address)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	4a1e      	ldr	r2, [pc, #120]	; (80002a0 <flash_write+0x98>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d904      	bls.n	8000234 <flash_write+0x2c>
    {
      status |= FLASH_ERROR_SIZE;
 800022a:	7dfb      	ldrb	r3, [r7, #23]
 800022c:	f043 0301 	orr.w	r3, r3, #1
 8000230:	75fb      	strb	r3, [r7, #23]
 8000232:	e023      	b.n	800027c <flash_write+0x74>
    }
    else
    {
      /* The actual flashing. If there is an error, then report it. */
      if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data[i]))
 8000234:	693b      	ldr	r3, [r7, #16]
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	68ba      	ldr	r2, [r7, #8]
 800023a:	4413      	add	r3, r2
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f04f 0400 	mov.w	r4, #0
 8000242:	461a      	mov	r2, r3
 8000244:	4623      	mov	r3, r4
 8000246:	68f9      	ldr	r1, [r7, #12]
 8000248:	2002      	movs	r0, #2
 800024a:	f000 feb7 	bl	8000fbc <HAL_FLASH_Program>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d003      	beq.n	800025c <flash_write+0x54>
      {
        status |= FLASH_ERROR_WRITE;
 8000254:	7dfb      	ldrb	r3, [r7, #23]
 8000256:	f043 0302 	orr.w	r3, r3, #2
 800025a:	75fb      	strb	r3, [r7, #23]
      }
      /* Read back the content of the memory. If it is wrong, then report an error. */
      if (((data[i])) != (*(volatile uint32_t*)address))
 800025c:	693b      	ldr	r3, [r7, #16]
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	68ba      	ldr	r2, [r7, #8]
 8000262:	4413      	add	r3, r2
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	429a      	cmp	r2, r3
 800026c:	d003      	beq.n	8000276 <flash_write+0x6e>
      {
        status |= FLASH_ERROR_READBACK;
 800026e:	7dfb      	ldrb	r3, [r7, #23]
 8000270:	f043 0304 	orr.w	r3, r3, #4
 8000274:	75fb      	strb	r3, [r7, #23]
      }

      /* Shift the address by a word. */
      address += 4u;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	3304      	adds	r3, #4
 800027a:	60fb      	str	r3, [r7, #12]
  for (uint32_t i = 0u; (i < length) && (FLASH_OK == status); i++)
 800027c:	693b      	ldr	r3, [r7, #16]
 800027e:	3301      	adds	r3, #1
 8000280:	613b      	str	r3, [r7, #16]
 8000282:	693a      	ldr	r2, [r7, #16]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	429a      	cmp	r2, r3
 8000288:	d202      	bcs.n	8000290 <flash_write+0x88>
 800028a:	7dfb      	ldrb	r3, [r7, #23]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d0c8      	beq.n	8000222 <flash_write+0x1a>
    }
  }

  HAL_FLASH_Lock();
 8000290:	f000 ff2a 	bl	80010e8 <HAL_FLASH_Lock>

  return status;
 8000294:	7dfb      	ldrb	r3, [r7, #23]
}
 8000296:	4618      	mov	r0, r3
 8000298:	371c      	adds	r7, #28
 800029a:	46bd      	mov	sp, r7
 800029c:	bd90      	pop	{r4, r7, pc}
 800029e:	bf00      	nop
 80002a0:	0801ffee 	.word	0x0801ffee

080002a4 <flash_jump_to_app>:
 * @brief   Actually jumps to the user application.
 * @param   void
 * @return  void
 */
void flash_jump_to_app(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
  /* Function pointer to the address of the user application. */
  fnc_ptr jump_to_app;
  jump_to_app = (fnc_ptr)(*(volatile uint32_t*) (FLASH_APP_START_ADDRESS+4u));
 80002aa:	4b08      	ldr	r3, [pc, #32]	; (80002cc <flash_jump_to_app+0x28>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	607b      	str	r3, [r7, #4]
  HAL_DeInit();
 80002b0:	f000 fd1a 	bl	8000ce8 <HAL_DeInit>
  /* Change the main stack pointer. */
  __set_MSP(*(volatile uint32_t*)FLASH_APP_START_ADDRESS);
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <flash_jump_to_app+0x2c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	f383 8808 	msr	MSP, r3
  jump_to_app();
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4798      	blx	r3
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	08004004 	.word	0x08004004
 80002d0:	08004000 	.word	0x08004000

080002d4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b088      	sub	sp, #32
 80002d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002da:	f107 0310 	add.w	r3, r7, #16
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e8:	4b2f      	ldr	r3, [pc, #188]	; (80003a8 <MX_GPIO_Init+0xd4>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a2e      	ldr	r2, [pc, #184]	; (80003a8 <MX_GPIO_Init+0xd4>)
 80002ee:	f043 0310 	orr.w	r3, r3, #16
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b2c      	ldr	r3, [pc, #176]	; (80003a8 <MX_GPIO_Init+0xd4>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0310 	and.w	r3, r3, #16
 80002fc:	60fb      	str	r3, [r7, #12]
 80002fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000300:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <MX_GPIO_Init+0xd4>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a28      	ldr	r2, [pc, #160]	; (80003a8 <MX_GPIO_Init+0xd4>)
 8000306:	f043 0320 	orr.w	r3, r3, #32
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <MX_GPIO_Init+0xd4>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0320 	and.w	r3, r3, #32
 8000314:	60bb      	str	r3, [r7, #8]
 8000316:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000318:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <MX_GPIO_Init+0xd4>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a22      	ldr	r2, [pc, #136]	; (80003a8 <MX_GPIO_Init+0xd4>)
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <MX_GPIO_Init+0xd4>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0304 	and.w	r3, r3, #4
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MX_GPIO_Init+0xd4>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <MX_GPIO_Init+0xd4>)
 8000336:	f043 0308 	orr.w	r3, r3, #8
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_GPIO_Init+0xd4>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0308 	and.w	r3, r3, #8
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034e:	4817      	ldr	r0, [pc, #92]	; (80003ac <MX_GPIO_Init+0xd8>)
 8000350:	f001 f98e 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035a:	2301      	movs	r3, #1
 800035c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035e:	2300      	movs	r3, #0
 8000360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000362:	2302      	movs	r3, #2
 8000364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	4619      	mov	r1, r3
 800036c:	480f      	ldr	r0, [pc, #60]	; (80003ac <MX_GPIO_Init+0xd8>)
 800036e:	f001 f825 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA8 PA11 PA12 PA13 
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000372:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 8000376:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000378:	2303      	movs	r3, #3
 800037a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	4619      	mov	r1, r3
 8000382:	480b      	ldr	r0, [pc, #44]	; (80003b0 <MX_GPIO_Init+0xdc>)
 8000384:	f001 f81a 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800038c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800038e:	2303      	movs	r3, #3
 8000390:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	4619      	mov	r1, r3
 8000398:	4806      	ldr	r0, [pc, #24]	; (80003b4 <MX_GPIO_Init+0xe0>)
 800039a:	f001 f80f 	bl	80013bc <HAL_GPIO_Init>

}
 800039e:	bf00      	nop
 80003a0:	3720      	adds	r7, #32
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40021000 	.word	0x40021000
 80003ac:	40011000 	.word	0x40011000
 80003b0:	40010800 	.word	0x40010800
 80003b4:	40010c00 	.word	0x40010c00

080003b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003be:	f000 fc7d 	bl	8000cbc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003c2:	f000 f8bf 	bl	8000544 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003c6:	f7ff ff85 	bl	80002d4 <MX_GPIO_Init>
	MX_CRC_Init();
 80003ca:	f7ff febf 	bl	800014c <MX_CRC_Init>
	MX_USART1_UART_Init();
 80003ce:	f000 f995 	bl	80006fc <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	start_time = HAL_GetTick();
 80003d2:	f000 fce9 	bl	8000da8 <HAL_GetTick>
 80003d6:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart1, (uint8_t*) "\n\rStarting bootloader...\n\r", 26,
 80003d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003dc:	221a      	movs	r2, #26
 80003de:	4951      	ldr	r1, [pc, #324]	; (8000524 <main+0x16c>)
 80003e0:	4851      	ldr	r0, [pc, #324]	; (8000528 <main+0x170>)
 80003e2:	f001 fdc6 	bl	8001f72 <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		i = HAL_GetTick();
 80003e6:	f000 fcdf 	bl	8000da8 <HAL_GetTick>
 80003ea:	6138      	str	r0, [r7, #16]
		if ((i / 1000) & 1) {
 80003ec:	693b      	ldr	r3, [r7, #16]
 80003ee:	4a4f      	ldr	r2, [pc, #316]	; (800052c <main+0x174>)
 80003f0:	fba2 2303 	umull	r2, r3, r2, r3
 80003f4:	099b      	lsrs	r3, r3, #6
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d006      	beq.n	800040c <main+0x54>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000404:	484a      	ldr	r0, [pc, #296]	; (8000530 <main+0x178>)
 8000406:	f001 f933 	bl	8001670 <HAL_GPIO_WritePin>
 800040a:	e005      	b.n	8000418 <main+0x60>
		} else {
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800040c:	2201      	movs	r2, #1
 800040e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000412:	4847      	ldr	r0, [pc, #284]	; (8000530 <main+0x178>)
 8000414:	f001 f92c 	bl	8001670 <HAL_GPIO_WritePin>
		}

		if (i > start_time + 10000) {
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800041e:	3310      	adds	r3, #16
 8000420:	693a      	ldr	r2, [r7, #16]
 8000422:	429a      	cmp	r2, r3
 8000424:	d90b      	bls.n	800043e <main+0x86>
			HAL_UART_Transmit(&huart1,
 8000426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042a:	2226      	movs	r2, #38	; 0x26
 800042c:	4941      	ldr	r1, [pc, #260]	; (8000534 <main+0x17c>)
 800042e:	483e      	ldr	r0, [pc, #248]	; (8000528 <main+0x170>)
 8000430:	f001 fd9f 	bl	8001f72 <HAL_UART_Transmit>
					(uint8_t*) "\n\rTimeout! Jumping to application...\n\r", 38,
					1000);
			start_time = HAL_GetTick();
 8000434:	f000 fcb8 	bl	8000da8 <HAL_GetTick>
 8000438:	6178      	str	r0, [r7, #20]
			flash_jump_to_app();
 800043a:	f7ff ff33 	bl	80002a4 <flash_jump_to_app>
		}

		HAL_UART_Receive(&huart1, buffer, 10, 100);
 800043e:	1d39      	adds	r1, r7, #4
 8000440:	2364      	movs	r3, #100	; 0x64
 8000442:	220a      	movs	r2, #10
 8000444:	4838      	ldr	r0, [pc, #224]	; (8000528 <main+0x170>)
 8000446:	f001 fe2d 	bl	80020a4 <HAL_UART_Receive>

		switch (buffer[0]) {
 800044a:	793b      	ldrb	r3, [r7, #4]
 800044c:	3b46      	subs	r3, #70	; 0x46
 800044e:	2b24      	cmp	r3, #36	; 0x24
 8000450:	d8c9      	bhi.n	80003e6 <main+0x2e>
 8000452:	a201      	add	r2, pc, #4	; (adr r2, 8000458 <main+0xa0>)
 8000454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000458:	080004ed 	.word	0x080004ed
 800045c:	080003e7 	.word	0x080003e7
 8000460:	080003e7 	.word	0x080003e7
 8000464:	080003e7 	.word	0x080003e7
 8000468:	0800050f 	.word	0x0800050f
 800046c:	080003e7 	.word	0x080003e7
 8000470:	080003e7 	.word	0x080003e7
 8000474:	080003e7 	.word	0x080003e7
 8000478:	080003e7 	.word	0x080003e7
 800047c:	080003e7 	.word	0x080003e7
 8000480:	080003e7 	.word	0x080003e7
 8000484:	080003e7 	.word	0x080003e7
 8000488:	080003e7 	.word	0x080003e7
 800048c:	080003e7 	.word	0x080003e7
 8000490:	080003e7 	.word	0x080003e7
 8000494:	080003e7 	.word	0x080003e7
 8000498:	080003e7 	.word	0x080003e7
 800049c:	080003e7 	.word	0x080003e7
 80004a0:	080003e7 	.word	0x080003e7
 80004a4:	080003e7 	.word	0x080003e7
 80004a8:	080003e7 	.word	0x080003e7
 80004ac:	080003e7 	.word	0x080003e7
 80004b0:	080003e7 	.word	0x080003e7
 80004b4:	080003e7 	.word	0x080003e7
 80004b8:	080003e7 	.word	0x080003e7
 80004bc:	080003e7 	.word	0x080003e7
 80004c0:	080003e7 	.word	0x080003e7
 80004c4:	080003e7 	.word	0x080003e7
 80004c8:	080003e7 	.word	0x080003e7
 80004cc:	080003e7 	.word	0x080003e7
 80004d0:	080003e7 	.word	0x080003e7
 80004d4:	080003e7 	.word	0x080003e7
 80004d8:	080004ed 	.word	0x080004ed
 80004dc:	080003e7 	.word	0x080003e7
 80004e0:	080003e7 	.word	0x080003e7
 80004e4:	080003e7 	.word	0x080003e7
 80004e8:	0800050f 	.word	0x0800050f
		case 'f':
		case 'F':
			HAL_UART_Transmit(&huart1, (uint8_t*) "\n\rWaiting firmware...\n\r",
 80004ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f0:	2217      	movs	r2, #23
 80004f2:	4911      	ldr	r1, [pc, #68]	; (8000538 <main+0x180>)
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <main+0x170>)
 80004f6:	f001 fd3c 	bl	8001f72 <HAL_UART_Transmit>
					23, 1000);
			xmodem_receive();
 80004fa:	f000 f975 	bl	80007e8 <xmodem_receive>
			HAL_UART_Transmit(&huart1, (uint8_t*) "\n\rTimeout!\n\r", 12, 1000);
 80004fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000502:	220c      	movs	r2, #12
 8000504:	490d      	ldr	r1, [pc, #52]	; (800053c <main+0x184>)
 8000506:	4808      	ldr	r0, [pc, #32]	; (8000528 <main+0x170>)
 8000508:	f001 fd33 	bl	8001f72 <HAL_UART_Transmit>
			break;
 800050c:	e009      	b.n	8000522 <main+0x16a>

		case 'j':
		case 'J':
			HAL_UART_Transmit(&huart1,
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	221d      	movs	r2, #29
 8000514:	490a      	ldr	r1, [pc, #40]	; (8000540 <main+0x188>)
 8000516:	4804      	ldr	r0, [pc, #16]	; (8000528 <main+0x170>)
 8000518:	f001 fd2b 	bl	8001f72 <HAL_UART_Transmit>
					(uint8_t*) "\n\rJumping to application...\n\r", 29, 1000);
			flash_jump_to_app();
 800051c:	f7ff fec2 	bl	80002a4 <flash_jump_to_app>
			break;
 8000520:	bf00      	nop
		i = HAL_GetTick();
 8000522:	e760      	b.n	80003e6 <main+0x2e>
 8000524:	080024a8 	.word	0x080024a8
 8000528:	2000003c 	.word	0x2000003c
 800052c:	10624dd3 	.word	0x10624dd3
 8000530:	40011000 	.word	0x40011000
 8000534:	080024c4 	.word	0x080024c4
 8000538:	080024ec 	.word	0x080024ec
 800053c:	08002504 	.word	0x08002504
 8000540:	08002514 	.word	0x08002514

08000544 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b090      	sub	sp, #64	; 0x40
 8000548:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800054a:	f107 0318 	add.w	r3, r7, #24
 800054e:	2228      	movs	r2, #40	; 0x28
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f001 ff94 	bl	8002480 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000566:	2301      	movs	r3, #1
 8000568:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000582:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000588:	f107 0318 	add.w	r3, r7, #24
 800058c:	4618      	mov	r0, r3
 800058e:	f001 f887 	bl	80016a0 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x58>
		Error_Handler();
 8000598:	f000 f819 	bl	80005ce <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ac:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2102      	movs	r1, #2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 faf2 	bl	8001ba0 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x82>
		Error_Handler();
 80005c2:	f000 f804 	bl	80005ce <Error_Handler>
	}
}
 80005c6:	bf00      	nop
 80005c8:	3740      	adds	r7, #64	; 0x40
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
	...

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <HAL_MspInit+0x5c>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a14      	ldr	r2, [pc, #80]	; (8000638 <HAL_MspInit+0x5c>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_MspInit+0x5c>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <HAL_MspInit+0x5c>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <HAL_MspInit+0x5c>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_MspInit+0x5c>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <HAL_MspInit+0x60>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <HAL_MspInit+0x60>)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	40021000 	.word	0x40021000
 800063c:	40010000 	.word	0x40010000

08000640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <HardFault_Handler+0x4>

08000652 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <MemManage_Handler+0x4>

08000658 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <BusFault_Handler+0x4>

0800065e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <UsageFault_Handler+0x4>

08000664 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800068c:	f000 fb7a 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}

08000694 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x5c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x5c>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <SystemInit+0x5c>)
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	4911      	ldr	r1, [pc, #68]	; (80006f0 <SystemInit+0x5c>)
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <SystemInit+0x60>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <SystemInit+0x5c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <SystemInit+0x5c>)
 80006b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <SystemInit+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <SystemInit+0x5c>)
 80006c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <SystemInit+0x5c>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <SystemInit+0x5c>)
 80006d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <SystemInit+0x5c>)
 80006da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006de:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <SystemInit+0x64>)
 80006e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006e6:	609a      	str	r2, [r3, #8]
#endif 
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000
 80006f4:	f8ff0000 	.word	0xf8ff0000
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_USART1_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000734:	f001 fbd0 	bl	8001ed8 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f7ff ff46 	bl	80005ce <Error_Handler>
  }

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000003c 	.word	0x2000003c
 800074c:	40013800 	.word	0x40013800

08000750 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <HAL_UART_MspInit+0x8c>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d131      	bne.n	80007d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <HAL_UART_MspInit+0x90>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a1a      	ldr	r2, [pc, #104]	; (80007e0 <HAL_UART_MspInit+0x90>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <HAL_UART_MspInit+0x90>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <HAL_UART_MspInit+0x90>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <HAL_UART_MspInit+0x90>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_UART_MspInit+0x90>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	4619      	mov	r1, r3
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <HAL_UART_MspInit+0x94>)
 80007b6:	f000 fe01 	bl	80013bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	4619      	mov	r1, r3
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <HAL_UART_MspInit+0x94>)
 80007d0:	f000 fdf4 	bl	80013bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007d4:	bf00      	nop
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40013800 	.word	0x40013800
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40010800 	.word	0x40010800

080007e8 <xmodem_receive>:
 * @brief   This function is the base of the Xmodem protocol.
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  void
 */
void xmodem_receive(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
	volatile xmodem_status status = X_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	717b      	strb	r3, [r7, #5]
	uint8_t error_number = 0u;
 80007f2:	2300      	movs	r3, #0
 80007f4:	713b      	strb	r3, [r7, #4]
	uint8_t data;

	x_first_packet_received = false;
 80007f6:	4b63      	ldr	r3, [pc, #396]	; (8000984 <xmodem_receive+0x19c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
	xmodem_packet_number = 1u;
 80007fc:	4b62      	ldr	r3, [pc, #392]	; (8000988 <xmodem_receive+0x1a0>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
	xmodem_actual_flash_address = FLASH_APP_START_ADDRESS;
 8000802:	4b62      	ldr	r3, [pc, #392]	; (800098c <xmodem_receive+0x1a4>)
 8000804:	4a62      	ldr	r2, [pc, #392]	; (8000990 <xmodem_receive+0x1a8>)
 8000806:	601a      	str	r2, [r3, #0]

	/* Loop until there isn't any error (or until we jump to the user application). */
	while (X_OK == status) {
 8000808:	e0b2      	b.n	8000970 <xmodem_receive+0x188>
		uint8_t header = 0x00u;
 800080a:	2300      	movs	r3, #0
 800080c:	70bb      	strb	r3, [r7, #2]

		/* Get the header from UART. */
		HAL_StatusTypeDef comm_status = HAL_UART_Receive(&huart1, &header, 1u,
 800080e:	1cb9      	adds	r1, r7, #2
 8000810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000814:	2201      	movs	r2, #1
 8000816:	485f      	ldr	r0, [pc, #380]	; (8000994 <xmodem_receive+0x1ac>)
 8000818:	f001 fc44 	bl	80020a4 <HAL_UART_Receive>
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
		UART_TIMEOUT);

		/* Spam the host (until we receive something) with ACSII "C", to notify it, we want to use CRC-16. */
		if ((HAL_OK != comm_status) && (false == x_first_packet_received)) {
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d00d      	beq.n	8000842 <xmodem_receive+0x5a>
 8000826:	4b57      	ldr	r3, [pc, #348]	; (8000984 <xmodem_receive+0x19c>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d109      	bne.n	8000842 <xmodem_receive+0x5a>
			data = X_C;
 800082e:	2343      	movs	r3, #67	; 0x43
 8000830:	70fb      	strb	r3, [r7, #3]
			HAL_UART_Transmit(&huart1, &data, 1u, UART_TIMEOUT);
 8000832:	1cf9      	adds	r1, r7, #3
 8000834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000838:	2201      	movs	r2, #1
 800083a:	4856      	ldr	r0, [pc, #344]	; (8000994 <xmodem_receive+0x1ac>)
 800083c:	f001 fb99 	bl	8001f72 <HAL_UART_Transmit>
 8000840:	e00d      	b.n	800085e <xmodem_receive+0x76>
		}
		/* Uart timeout or any other errors. */
		else if ((HAL_OK != comm_status) && (true == x_first_packet_received)) {
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00a      	beq.n	800085e <xmodem_receive+0x76>
 8000848:	4b4e      	ldr	r3, [pc, #312]	; (8000984 <xmodem_receive+0x19c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d106      	bne.n	800085e <xmodem_receive+0x76>
			status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2103      	movs	r1, #3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f9cf 	bl	8000bf8 <xmodem_error_handler>
 800085a:	4603      	mov	r3, r0
 800085c:	717b      	strb	r3, [r7, #5]
		} else {
			/* Do nothing. */
		}

		/* The header can be: SOH, STX, EOT and CAN. */
		xmodem_status packet_status = X_ERROR;
 800085e:	23ff      	movs	r3, #255	; 0xff
 8000860:	71bb      	strb	r3, [r7, #6]
		switch (header) {
 8000862:	78bb      	ldrb	r3, [r7, #2]
 8000864:	3b01      	subs	r3, #1
 8000866:	2b17      	cmp	r3, #23
 8000868:	d877      	bhi.n	800095a <xmodem_receive+0x172>
 800086a:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <xmodem_receive+0x88>)
 800086c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000870:	080008d1 	.word	0x080008d1
 8000874:	080008d1 	.word	0x080008d1
 8000878:	0800095b 	.word	0x0800095b
 800087c:	08000921 	.word	0x08000921
 8000880:	0800095b 	.word	0x0800095b
 8000884:	0800095b 	.word	0x0800095b
 8000888:	0800095b 	.word	0x0800095b
 800088c:	0800095b 	.word	0x0800095b
 8000890:	0800095b 	.word	0x0800095b
 8000894:	0800095b 	.word	0x0800095b
 8000898:	0800095b 	.word	0x0800095b
 800089c:	0800095b 	.word	0x0800095b
 80008a0:	0800095b 	.word	0x0800095b
 80008a4:	0800095b 	.word	0x0800095b
 80008a8:	0800095b 	.word	0x0800095b
 80008ac:	0800095b 	.word	0x0800095b
 80008b0:	0800095b 	.word	0x0800095b
 80008b4:	0800095b 	.word	0x0800095b
 80008b8:	0800095b 	.word	0x0800095b
 80008bc:	0800095b 	.word	0x0800095b
 80008c0:	0800095b 	.word	0x0800095b
 80008c4:	0800095b 	.word	0x0800095b
 80008c8:	0800095b 	.word	0x0800095b
 80008cc:	08000955 	.word	0x08000955
		/* 128 or 1024 bytes of data. */
		case X_SOH:
		case X_STX:
			/* If the handling was successful, then send an ACK. */
			packet_status = xmodem_handle_packet(header);
 80008d0:	78bb      	ldrb	r3, [r7, #2]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f89e 	bl	8000a14 <xmodem_handle_packet>
 80008d8:	4603      	mov	r3, r0
 80008da:	71bb      	strb	r3, [r7, #6]
			if (X_OK == packet_status) {
 80008dc:	79bb      	ldrb	r3, [r7, #6]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d109      	bne.n	80008f6 <xmodem_receive+0x10e>
				data = X_ACK;
 80008e2:	2306      	movs	r3, #6
 80008e4:	70fb      	strb	r3, [r7, #3]
				HAL_UART_Transmit(&huart1, &data, 1u, UART_TIMEOUT);
 80008e6:	1cf9      	adds	r1, r7, #3
 80008e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ec:	2201      	movs	r2, #1
 80008ee:	4829      	ldr	r0, [pc, #164]	; (8000994 <xmodem_receive+0x1ac>)
 80008f0:	f001 fb3f 	bl	8001f72 <HAL_UART_Transmit>
			}
			/* Error while processing the packet, either send a NAK or do graceful abort. */
			else {
				status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
			}
			break;
 80008f4:	e03c      	b.n	8000970 <xmodem_receive+0x188>
			else if (X_ERROR_FLASH == packet_status) {
 80008f6:	79bb      	ldrb	r3, [r7, #6]
 80008f8:	2b08      	cmp	r3, #8
 80008fa:	d109      	bne.n	8000910 <xmodem_receive+0x128>
				error_number = X_MAX_ERRORS;
 80008fc:	2303      	movs	r3, #3
 80008fe:	713b      	strb	r3, [r7, #4]
				status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2103      	movs	r1, #3
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f977 	bl	8000bf8 <xmodem_error_handler>
 800090a:	4603      	mov	r3, r0
 800090c:	717b      	strb	r3, [r7, #5]
			break;
 800090e:	e02f      	b.n	8000970 <xmodem_receive+0x188>
				status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2103      	movs	r1, #3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f96f 	bl	8000bf8 <xmodem_error_handler>
 800091a:	4603      	mov	r3, r0
 800091c:	717b      	strb	r3, [r7, #5]
			break;
 800091e:	e027      	b.n	8000970 <xmodem_receive+0x188>
			/* End of Transmission. */
		case X_EOT:
			/* ACK, feedback to user (as a text), then jump to user application. */
			data = X_ACK;
 8000920:	2306      	movs	r3, #6
 8000922:	70fb      	strb	r3, [r7, #3]
			HAL_UART_Transmit(&huart1, &data, 1u, UART_TIMEOUT);
 8000924:	1cf9      	adds	r1, r7, #3
 8000926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092a:	2201      	movs	r2, #1
 800092c:	4819      	ldr	r0, [pc, #100]	; (8000994 <xmodem_receive+0x1ac>)
 800092e:	f001 fb20 	bl	8001f72 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*) "\n\rFirmware updated!\n\r",
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	2215      	movs	r2, #21
 8000938:	4917      	ldr	r1, [pc, #92]	; (8000998 <xmodem_receive+0x1b0>)
 800093a:	4816      	ldr	r0, [pc, #88]	; (8000994 <xmodem_receive+0x1ac>)
 800093c:	f001 fb19 	bl	8001f72 <HAL_UART_Transmit>
					21u,
					UART_TIMEOUT);
			HAL_UART_Transmit(&huart1,
 8000940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000944:	2220      	movs	r2, #32
 8000946:	4915      	ldr	r1, [pc, #84]	; (800099c <xmodem_receive+0x1b4>)
 8000948:	4812      	ldr	r0, [pc, #72]	; (8000994 <xmodem_receive+0x1ac>)
 800094a:	f001 fb12 	bl	8001f72 <HAL_UART_Transmit>
					(uint8_t*) "Jumping to user application...\n\r", 32u,
					UART_TIMEOUT);
			flash_jump_to_app();
 800094e:	f7ff fca9 	bl	80002a4 <flash_jump_to_app>
			break;
 8000952:	e00d      	b.n	8000970 <xmodem_receive+0x188>
			/* Abort from host. */
		case X_CAN:
			status = X_ERROR;
 8000954:	23ff      	movs	r3, #255	; 0xff
 8000956:	717b      	strb	r3, [r7, #5]
			break;
 8000958:	e00a      	b.n	8000970 <xmodem_receive+0x188>
		default:
			/* Wrong header. */
			if (HAL_OK == comm_status) {
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d106      	bne.n	800096e <xmodem_receive+0x186>
				status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2103      	movs	r1, #3
 8000964:	4618      	mov	r0, r3
 8000966:	f000 f947 	bl	8000bf8 <xmodem_error_handler>
 800096a:	4603      	mov	r3, r0
 800096c:	717b      	strb	r3, [r7, #5]
			}
			break;
 800096e:	bf00      	nop
	while (X_OK == status) {
 8000970:	797b      	ldrb	r3, [r7, #5]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	f43f af48 	beq.w	800080a <xmodem_receive+0x22>
		}
	}
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000030 	.word	0x20000030
 8000988:	20000004 	.word	0x20000004
 800098c:	2000002c 	.word	0x2000002c
 8000990:	08004000 	.word	0x08004000
 8000994:	2000003c 	.word	0x2000003c
 8000998:	08002534 	.word	0x08002534
 800099c:	0800254c 	.word	0x0800254c

080009a0 <xmodem_calc_crc>:
 * @brief   Calculates the CRC-16 for the input package.
 * @param   *data:  Array of the data which we want to calculate.
 * @param   length: Size of the data, either 128 or 1024 bytes.
 * @return  status: The calculated CRC.
 */
static uint16_t xmodem_calc_crc(uint8_t *data, uint16_t length) {
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0u;
 80009ac:	2300      	movs	r3, #0
 80009ae:	81fb      	strh	r3, [r7, #14]
	while (length) {
 80009b0:	e026      	b.n	8000a00 <xmodem_calc_crc+0x60>
		length--;
 80009b2:	887b      	ldrh	r3, [r7, #2]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	807b      	strh	r3, [r7, #2]
		crc = crc ^ ((uint16_t) *data++ << 8u);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	021b      	lsls	r3, r3, #8
 80009c2:	b21a      	sxth	r2, r3
 80009c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009c8:	4053      	eors	r3, r2
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	81fb      	strh	r3, [r7, #14]
		for (uint8_t i = 0u; i < 8u; i++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	737b      	strb	r3, [r7, #13]
 80009d2:	e012      	b.n	80009fa <xmodem_calc_crc+0x5a>
			if (crc & 0x8000u) {
 80009d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	da08      	bge.n	80009ee <xmodem_calc_crc+0x4e>
				crc = (crc << 1u) ^ 0x1021u;
 80009dc:	89fb      	ldrh	r3, [r7, #14]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80009e6:	f083 0301 	eor.w	r3, r3, #1
 80009ea:	81fb      	strh	r3, [r7, #14]
 80009ec:	e002      	b.n	80009f4 <xmodem_calc_crc+0x54>
			} else {
				crc = crc << 1u;
 80009ee:	89fb      	ldrh	r3, [r7, #14]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	81fb      	strh	r3, [r7, #14]
		for (uint8_t i = 0u; i < 8u; i++) {
 80009f4:	7b7b      	ldrb	r3, [r7, #13]
 80009f6:	3301      	adds	r3, #1
 80009f8:	737b      	strb	r3, [r7, #13]
 80009fa:	7b7b      	ldrb	r3, [r7, #13]
 80009fc:	2b07      	cmp	r3, #7
 80009fe:	d9e9      	bls.n	80009d4 <xmodem_calc_crc+0x34>
	while (length) {
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d1d5      	bne.n	80009b2 <xmodem_calc_crc+0x12>
			}
		}
	}
	return crc;
 8000a06:	89fb      	ldrh	r3, [r7, #14]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
	...

08000a14 <xmodem_handle_packet>:
/**
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	701a      	strb	r2, [r3, #0]
	xmodem_status status = X_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
	uint16_t size = 0u;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
	uint8_t received_packet_number[X_PACKET_NUMBER_SIZE];
	uint8_t received_packet_data[X_PACKET_1024_SIZE];
	uint8_t received_packet_crc[X_PACKET_CRC_SIZE];

	/* Get the size of the data. */
	if (X_SOH == header) {
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d103      	bne.n	8000a3e <xmodem_handle_packet+0x2a>
		size = X_PACKET_128_SIZE;
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
 8000a3c:	e00b      	b.n	8000a56 <xmodem_handle_packet+0x42>
	} else if (X_STX == header) {
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d104      	bne.n	8000a50 <xmodem_handle_packet+0x3c>
		size = X_PACKET_1024_SIZE;
 8000a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a4a:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
 8000a4e:	e002      	b.n	8000a56 <xmodem_handle_packet+0x42>
	} else {
		/* Wrong header type. This shoudn't be possible... */
		status |= X_ERROR;
 8000a50:	23ff      	movs	r3, #255	; 0xff
 8000a52:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
	}

	HAL_StatusTypeDef comm_status = HAL_OK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
	/* Get the packet number, data and CRC from UART. */
	comm_status |= HAL_UART_Receive(&huart1, received_packet_number,
 8000a5c:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 8000a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a64:	2202      	movs	r2, #2
 8000a66:	485f      	ldr	r0, [pc, #380]	; (8000be4 <xmodem_handle_packet+0x1d0>)
 8000a68:	f001 fb1c 	bl	80020a4 <HAL_UART_Receive>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000a74:	4313      	orrs	r3, r2
 8000a76:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
	X_PACKET_NUMBER_SIZE, UART_TIMEOUT);
	comm_status |= HAL_UART_Receive(&huart1, received_packet_data, size,
 8000a7a:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8000a7e:	f107 010c 	add.w	r1, r7, #12
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	4857      	ldr	r0, [pc, #348]	; (8000be4 <xmodem_handle_packet+0x1d0>)
 8000a88:	f001 fb0c 	bl	80020a4 <HAL_UART_Receive>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	461a      	mov	r2, r3
 8000a90:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000a94:	4313      	orrs	r3, r2
 8000a96:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
	UART_TIMEOUT);
	comm_status |= HAL_UART_Receive(&huart1, received_packet_crc,
 8000a9a:	f107 0108 	add.w	r1, r7, #8
 8000a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	484f      	ldr	r0, [pc, #316]	; (8000be4 <xmodem_handle_packet+0x1d0>)
 8000aa6:	f001 fafd 	bl	80020a4 <HAL_UART_Receive>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
	X_PACKET_CRC_SIZE, UART_TIMEOUT);
	/* Merge the two bytes of CRC. */
	uint16_t crc_received =
			((uint16_t) received_packet_crc[X_PACKET_CRC_HIGH_INDEX] << 8u)
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	021b      	lsls	r3, r3, #8
					| ((uint16_t) received_packet_crc[X_PACKET_CRC_LOW_INDEX]);
 8000ac0:	b21a      	sxth	r2, r3
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	785b      	ldrb	r3, [r3, #1]
 8000ac8:	b21b      	sxth	r3, r3
 8000aca:	4313      	orrs	r3, r2
 8000acc:	b21b      	sxth	r3, r3
	uint16_t crc_received =
 8000ace:	f8a7 3410 	strh.w	r3, [r7, #1040]	; 0x410
	/* We calculate it too. */
	uint16_t crc_calculated = xmodem_calc_crc(&received_packet_data[0u], size);
 8000ad2:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff5f 	bl	80009a0 <xmodem_calc_crc>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e

	/* Communication error. */
	if (HAL_OK != comm_status) {
 8000ae8:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d005      	beq.n	8000afc <xmodem_handle_packet+0xe8>
		status |= X_ERROR_UART;
 8000af0:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
	}

	/* If it is the first packet, then erase the memory. */
	if ((X_OK == status) && (false == x_first_packet_received)) {
 8000afc:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d113      	bne.n	8000b2c <xmodem_handle_packet+0x118>
 8000b04:	4b38      	ldr	r3, [pc, #224]	; (8000be8 <xmodem_handle_packet+0x1d4>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d10f      	bne.n	8000b2c <xmodem_handle_packet+0x118>
		if (FLASH_OK == flash_erase(FLASH_APP_START_ADDRESS)) {
 8000b0c:	4837      	ldr	r0, [pc, #220]	; (8000bec <xmodem_handle_packet+0x1d8>)
 8000b0e:	f7ff fb4f 	bl	80001b0 <flash_erase>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d103      	bne.n	8000b20 <xmodem_handle_packet+0x10c>
			x_first_packet_received = true;
 8000b18:	4b33      	ldr	r3, [pc, #204]	; (8000be8 <xmodem_handle_packet+0x1d4>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	e005      	b.n	8000b2c <xmodem_handle_packet+0x118>
		} else {
			status |= X_ERROR_FLASH;
 8000b20:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000b24:	f043 0308 	orr.w	r3, r3, #8
 8000b28:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
		}
	}

	/* Error handling and flashing. */
	if (X_OK == status) {
 8000b2c:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d125      	bne.n	8000b80 <xmodem_handle_packet+0x16c>
		if (xmodem_packet_number != received_packet_number[0u]) {
 8000b34:	f897 240c 	ldrb.w	r2, [r7, #1036]	; 0x40c
 8000b38:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <xmodem_handle_packet+0x1dc>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d005      	beq.n	8000b4c <xmodem_handle_packet+0x138>
			/* Packet number counter mismatch. */
			status |= X_ERROR_NUMBER;
 8000b40:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
		}
		if (255u
				!= (received_packet_number[X_PACKET_NUMBER_INDEX]
 8000b4c:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
 8000b50:	461a      	mov	r2, r3
						+ received_packet_number[X_PACKET_NUMBER_COMPLEMENT_INDEX])) {
 8000b52:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 8000b56:	4413      	add	r3, r2
		if (255u
 8000b58:	2bff      	cmp	r3, #255	; 0xff
 8000b5a:	d005      	beq.n	8000b68 <xmodem_handle_packet+0x154>
			/* The sum of the packet number and packet number complement aren't 255. */
			/* The sum always has to be 255. */
			status |= X_ERROR_NUMBER;
 8000b5c:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
		}
		if (crc_calculated != crc_received) {
 8000b68:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8000b6c:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	; 0x410
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d005      	beq.n	8000b80 <xmodem_handle_packet+0x16c>
			/* The calculated and received CRC are different. */
			status |= X_ERROR_CRC;
 8000b74:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
		}
	}

	/* Do the actual flashing (if there weren't any errors). */
	if ((X_OK == status)
 8000b80:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d114      	bne.n	8000bb2 <xmodem_handle_packet+0x19e>
			&& (FLASH_OK
					!= flash_write(xmodem_actual_flash_address,
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <xmodem_handle_packet+0x1e0>)
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	; 0x414
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f7ff fb34 	bl	8000208 <flash_write>
 8000ba0:	4603      	mov	r3, r0
			&& (FLASH_OK
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d005      	beq.n	8000bb2 <xmodem_handle_packet+0x19e>
							(uint32_t*) &received_packet_data[0u],
							(uint32_t) size / 4u))) {
		/* Flashing error. */
		status |= X_ERROR_FLASH;
 8000ba6:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
	}

	/* Raise the packet number and the address counters (if there weren't any errors). */
	if (X_OK == status) {
 8000bb2:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d10c      	bne.n	8000bd4 <xmodem_handle_packet+0x1c0>
		xmodem_packet_number++;
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <xmodem_handle_packet+0x1dc>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <xmodem_handle_packet+0x1dc>)
 8000bc4:	701a      	strb	r2, [r3, #0]
		xmodem_actual_flash_address += size;
 8000bc6:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <xmodem_handle_packet+0x1e0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <xmodem_handle_packet+0x1e0>)
 8000bd2:	6013      	str	r3, [r2, #0]
	}

	return status;
 8000bd4:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000003c 	.word	0x2000003c
 8000be8:	20000030 	.word	0x20000030
 8000bec:	08004000 	.word	0x08004000
 8000bf0:	20000004 	.word	0x20000004
 8000bf4:	2000002c 	.word	0x2000002c

08000bf8 <xmodem_error_handler>:
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number,
		uint8_t max_error_number) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
	xmodem_status status = X_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]
	uint8_t data;
	/* Raise the error counter. */
	(*error_number)++;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	701a      	strb	r2, [r3, #0]
	/* If the counter reached the max value, then abort. */
	if ((*error_number) >= max_error_number) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	78fa      	ldrb	r2, [r7, #3]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d814      	bhi.n	8000c48 <xmodem_error_handler+0x50>
		/* Graceful abort. */
		data = X_CAN;
 8000c1e:	2318      	movs	r3, #24
 8000c20:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart1, &data, 1u, UART_TIMEOUT);
 8000c22:	f107 010e 	add.w	r1, r7, #14
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	480f      	ldr	r0, [pc, #60]	; (8000c6c <xmodem_error_handler+0x74>)
 8000c2e:	f001 f9a0 	bl	8001f72 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, &data, 1u, UART_TIMEOUT);
 8000c32:	f107 010e 	add.w	r1, r7, #14
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	480b      	ldr	r0, [pc, #44]	; (8000c6c <xmodem_error_handler+0x74>)
 8000c3e:	f001 f998 	bl	8001f72 <HAL_UART_Transmit>
		status = X_ERROR;
 8000c42:	23ff      	movs	r3, #255	; 0xff
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e00b      	b.n	8000c60 <xmodem_error_handler+0x68>
	}
	/* Otherwise send a NAK for a repeat. */
	else {
		data = X_NAK;
 8000c48:	2315      	movs	r3, #21
 8000c4a:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart1, &data, 1u, UART_TIMEOUT);
 8000c4c:	f107 010e 	add.w	r1, r7, #14
 8000c50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c54:	2201      	movs	r2, #1
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <xmodem_error_handler+0x74>)
 8000c58:	f001 f98b 	bl	8001f72 <HAL_UART_Transmit>
		status = X_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000003c 	.word	0x2000003c

08000c70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c70:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c72:	e003      	b.n	8000c7c <LoopCopyDataInit>

08000c74 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c76:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c78:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c7a:	3104      	adds	r1, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c7c:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c80:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c82:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c84:	d3f6      	bcc.n	8000c74 <CopyDataInit>
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c88:	e002      	b.n	8000c90 <LoopFillZerobss>

08000c8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c8c:	f842 3b04 	str.w	r3, [r2], #4

08000c90 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c92:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c94:	d3f9      	bcc.n	8000c8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c96:	f7ff fcfd 	bl	8000694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f001 fbcd 	bl	8002438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c9e:	f7ff fb8b 	bl	80003b8 <main>
  bx lr
 8000ca2:	4770      	bx	lr
  ldr r3, =_sidata
 8000ca4:	080025a4 	.word	0x080025a4
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000cac:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000cb0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000cb4:	200000a0 	.word	0x200000a0

08000cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC1_2_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_Init+0x28>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_Init+0x28>)
 8000cc6:	f043 0310 	orr.w	r3, r3, #16
 8000cca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f925 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f000 f826 	bl	8000d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fc80 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40022000 	.word	0x40022000

08000ce8 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_DeInit+0x2c>)
 8000cee:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf2:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <HAL_DeInit+0x2c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_DeInit+0x2c>)
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <HAL_DeInit+0x2c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000d08:	f000 f806 	bl	8000d18 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x54>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x58>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f911 	bl	8000f6a <HAL_SYSTICK_Config>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00e      	b.n	8000d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d80a      	bhi.n	8000d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f000 f8e7 	bl	8000f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <HAL_InitTick+0x5c>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e000      	b.n	8000d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	20000008 	.word	0x20000008

08000d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_IncTick+0x1c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_IncTick+0x20>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a03      	ldr	r2, [pc, #12]	; (8000da4 <HAL_IncTick+0x20>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	2000000c 	.word	0x2000000c
 8000da4:	2000007c 	.word	0x2000007c

08000da8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b02      	ldr	r3, [pc, #8]	; (8000db8 <HAL_GetTick+0x10>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	2000007c 	.word	0x2000007c

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	; (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee8:	d301      	bcc.n	8000eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00f      	b.n	8000f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <SysTick_Config+0x40>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f7ff ff90 	bl	8000e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <SysTick_Config+0x40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <SysTick_Config+0x40>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff49 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f44:	f7ff ff5e 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6978      	ldr	r0, [r7, #20]
 8000f50:	f7ff ff90 	bl	8000e74 <NVIC_EncodePriority>
 8000f54:	4602      	mov	r2, r0
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff5f 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ffb0 	bl	8000ed8 <SysTick_Config>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e00e      	b.n	8000fb2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	795b      	ldrb	r3, [r3, #5]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d105      	bne.n	8000faa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff f8e5 	bl	8000174 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000fd6:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <HAL_FLASH_Program+0xd8>)
 8000fd8:	7e1b      	ldrb	r3, [r3, #24]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d101      	bne.n	8000fe2 <HAL_FLASH_Program+0x26>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e054      	b.n	800108c <HAL_FLASH_Program+0xd0>
 8000fe2:	4b2c      	ldr	r3, [pc, #176]	; (8001094 <HAL_FLASH_Program+0xd8>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000fe8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fec:	f000 f8a8 	bl	8001140 <FLASH_WaitForLastOperation>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d144      	bne.n	8001084 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d102      	bne.n	8001006 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001000:	2301      	movs	r3, #1
 8001002:	757b      	strb	r3, [r7, #21]
 8001004:	e007      	b.n	8001016 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d102      	bne.n	8001012 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800100c:	2302      	movs	r3, #2
 800100e:	757b      	strb	r3, [r7, #21]
 8001010:	e001      	b.n	8001016 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001012:	2304      	movs	r3, #4
 8001014:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001016:	2300      	movs	r3, #0
 8001018:	75bb      	strb	r3, [r7, #22]
 800101a:	e02d      	b.n	8001078 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800101c:	7dbb      	ldrb	r3, [r7, #22]
 800101e:	005a      	lsls	r2, r3, #1
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	eb02 0c03 	add.w	ip, r2, r3
 8001026:	7dbb      	ldrb	r3, [r7, #22]
 8001028:	0119      	lsls	r1, r3, #4
 800102a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800102e:	f1c1 0620 	rsb	r6, r1, #32
 8001032:	f1a1 0020 	sub.w	r0, r1, #32
 8001036:	fa22 f401 	lsr.w	r4, r2, r1
 800103a:	fa03 f606 	lsl.w	r6, r3, r6
 800103e:	4334      	orrs	r4, r6
 8001040:	fa23 f000 	lsr.w	r0, r3, r0
 8001044:	4304      	orrs	r4, r0
 8001046:	fa23 f501 	lsr.w	r5, r3, r1
 800104a:	b2a3      	uxth	r3, r4
 800104c:	4619      	mov	r1, r3
 800104e:	4660      	mov	r0, ip
 8001050:	f000 f85a 	bl	8001108 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001054:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001058:	f000 f872 	bl	8001140 <FLASH_WaitForLastOperation>
 800105c:	4603      	mov	r3, r0
 800105e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001060:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <HAL_FLASH_Program+0xdc>)
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <HAL_FLASH_Program+0xdc>)
 8001066:	f023 0301 	bic.w	r3, r3, #1
 800106a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d107      	bne.n	8001082 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001072:	7dbb      	ldrb	r3, [r7, #22]
 8001074:	3301      	adds	r3, #1
 8001076:	75bb      	strb	r3, [r7, #22]
 8001078:	7dba      	ldrb	r2, [r7, #22]
 800107a:	7d7b      	ldrb	r3, [r7, #21]
 800107c:	429a      	cmp	r2, r3
 800107e:	d3cd      	bcc.n	800101c <HAL_FLASH_Program+0x60>
 8001080:	e000      	b.n	8001084 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001082:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_FLASH_Program+0xd8>)
 8001086:	2200      	movs	r2, #0
 8001088:	761a      	strb	r2, [r3, #24]

  return status;
 800108a:	7dfb      	ldrb	r3, [r7, #23]
}
 800108c:	4618      	mov	r0, r3
 800108e:	371c      	adds	r7, #28
 8001090:	46bd      	mov	sp, r7
 8001092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001094:	20000080 	.word	0x20000080
 8001098:	40022000 	.word	0x40022000

0800109c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <HAL_FLASH_Unlock+0x40>)
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00d      	beq.n	80010ce <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_FLASH_Unlock+0x40>)
 80010b4:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_FLASH_Unlock+0x44>)
 80010b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_FLASH_Unlock+0x40>)
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_FLASH_Unlock+0x48>)
 80010bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <HAL_FLASH_Unlock+0x40>)
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40022000 	.word	0x40022000
 80010e0:	45670123 	.word	0x45670123
 80010e4:	cdef89ab 	.word	0xcdef89ab

080010e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_FLASH_Lock+0x1c>)
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_FLASH_Lock+0x1c>)
 80010f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40022000 	.word	0x40022000

08001108 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <FLASH_Program_HalfWord+0x30>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <FLASH_Program_HalfWord+0x34>)
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	4a07      	ldr	r2, [pc, #28]	; (800113c <FLASH_Program_HalfWord+0x34>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	887a      	ldrh	r2, [r7, #2]
 800112a:	801a      	strh	r2, [r3, #0]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000080 	.word	0x20000080
 800113c:	40022000 	.word	0x40022000

08001140 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff fe2e 	bl	8000da8 <HAL_GetTick>
 800114c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800114e:	e010      	b.n	8001172 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001156:	d00c      	beq.n	8001172 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d007      	beq.n	800116e <FLASH_WaitForLastOperation+0x2e>
 800115e:	f7ff fe23 	bl	8000da8 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	429a      	cmp	r2, r3
 800116c:	d201      	bcs.n	8001172 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e025      	b.n	80011be <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <FLASH_WaitForLastOperation+0x88>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1e8      	bne.n	8001150 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <FLASH_WaitForLastOperation+0x88>)
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	f003 0320 	and.w	r3, r3, #32
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <FLASH_WaitForLastOperation+0x88>)
 800118c:	2220      	movs	r2, #32
 800118e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <FLASH_WaitForLastOperation+0x88>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10b      	bne.n	80011b4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <FLASH_WaitForLastOperation+0x88>)
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d105      	bne.n	80011b4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <FLASH_WaitForLastOperation+0x88>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80011b4:	f000 f80a 	bl	80011cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40022000 	.word	0x40022000

080011cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <FLASH_SetErrorCode+0x98>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d009      	beq.n	80011f6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <FLASH_SetErrorCode+0x9c>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <FLASH_SetErrorCode+0x9c>)
 80011ec:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <FLASH_SetErrorCode+0x98>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <FLASH_SetErrorCode+0x9c>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	4a17      	ldr	r2, [pc, #92]	; (8001268 <FLASH_SetErrorCode+0x9c>)
 800120c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <FLASH_SetErrorCode+0x98>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <FLASH_SetErrorCode+0x9c>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <FLASH_SetErrorCode+0x9c>)
 800122c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <FLASH_SetErrorCode+0x98>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <FLASH_SetErrorCode+0x98>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f240 1201 	movw	r2, #257	; 0x101
 8001240:	4293      	cmp	r3, r2
 8001242:	d106      	bne.n	8001252 <FLASH_SetErrorCode+0x86>
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <FLASH_SetErrorCode+0x98>)
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <FLASH_SetErrorCode+0x98>)
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	61d3      	str	r3, [r2, #28]
}  
 8001250:	e002      	b.n	8001258 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <FLASH_SetErrorCode+0x98>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	60d3      	str	r3, [r2, #12]
}  
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40022000 	.word	0x40022000
 8001268:	20000080 	.word	0x20000080

0800126c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800127e:	4b2f      	ldr	r3, [pc, #188]	; (800133c <HAL_FLASHEx_Erase+0xd0>)
 8001280:	7e1b      	ldrb	r3, [r3, #24]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d101      	bne.n	800128a <HAL_FLASHEx_Erase+0x1e>
 8001286:	2302      	movs	r3, #2
 8001288:	e053      	b.n	8001332 <HAL_FLASHEx_Erase+0xc6>
 800128a:	4b2c      	ldr	r3, [pc, #176]	; (800133c <HAL_FLASHEx_Erase+0xd0>)
 800128c:	2201      	movs	r2, #1
 800128e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d116      	bne.n	80012c6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001298:	f24c 3050 	movw	r0, #50000	; 0xc350
 800129c:	f7ff ff50 	bl	8001140 <FLASH_WaitForLastOperation>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d141      	bne.n	800132a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f000 f84c 	bl	8001344 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012b0:	f7ff ff46 	bl	8001140 <FLASH_WaitForLastOperation>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <HAL_FLASHEx_Erase+0xd4>)
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	4a20      	ldr	r2, [pc, #128]	; (8001340 <HAL_FLASHEx_Erase+0xd4>)
 80012be:	f023 0304 	bic.w	r3, r3, #4
 80012c2:	6113      	str	r3, [r2, #16]
 80012c4:	e031      	b.n	800132a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80012c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012ca:	f7ff ff39 	bl	8001140 <FLASH_WaitForLastOperation>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d12a      	bne.n	800132a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	f04f 32ff 	mov.w	r2, #4294967295
 80012da:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	e019      	b.n	8001318 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80012e4:	68b8      	ldr	r0, [r7, #8]
 80012e6:	f000 f849 	bl	800137c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012ee:	f7ff ff27 	bl	8001140 <FLASH_WaitForLastOperation>
 80012f2:	4603      	mov	r3, r0
 80012f4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_FLASHEx_Erase+0xd4>)
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	4a11      	ldr	r2, [pc, #68]	; (8001340 <HAL_FLASHEx_Erase+0xd4>)
 80012fc:	f023 0302 	bic.w	r3, r3, #2
 8001300:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	601a      	str	r2, [r3, #0]
            break;
 800130e:	e00c      	b.n	800132a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001316:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	029a      	lsls	r2, r3, #10
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001324:	68ba      	ldr	r2, [r7, #8]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3dc      	bcc.n	80012e4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <HAL_FLASHEx_Erase+0xd0>)
 800132c:	2200      	movs	r2, #0
 800132e:	761a      	strb	r2, [r3, #24]

  return status;
 8001330:	7bfb      	ldrb	r3, [r7, #15]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000080 	.word	0x20000080
 8001340:	40022000 	.word	0x40022000

08001344 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <FLASH_MassErase+0x30>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <FLASH_MassErase+0x34>)
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <FLASH_MassErase+0x34>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <FLASH_MassErase+0x34>)
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <FLASH_MassErase+0x34>)
 8001364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001368:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	20000080 	.word	0x20000080
 8001378:	40022000 	.word	0x40022000

0800137c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <FLASH_PageErase+0x38>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <FLASH_PageErase+0x3c>)
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <FLASH_PageErase+0x3c>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <FLASH_PageErase+0x3c>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <FLASH_PageErase+0x3c>)
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <FLASH_PageErase+0x3c>)
 80013a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000080 	.word	0x20000080
 80013b8:	40022000 	.word	0x40022000

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b480      	push	{r7}
 80013be:	b08b      	sub	sp, #44	; 0x2c
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ce:	e127      	b.n	8001620 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013d0:	2201      	movs	r2, #1
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f040 8116 	bne.w	800161a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b12      	cmp	r3, #18
 80013f4:	d034      	beq.n	8001460 <HAL_GPIO_Init+0xa4>
 80013f6:	2b12      	cmp	r3, #18
 80013f8:	d80d      	bhi.n	8001416 <HAL_GPIO_Init+0x5a>
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d02b      	beq.n	8001456 <HAL_GPIO_Init+0x9a>
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d804      	bhi.n	800140c <HAL_GPIO_Init+0x50>
 8001402:	2b00      	cmp	r3, #0
 8001404:	d031      	beq.n	800146a <HAL_GPIO_Init+0xae>
 8001406:	2b01      	cmp	r3, #1
 8001408:	d01c      	beq.n	8001444 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800140a:	e048      	b.n	800149e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800140c:	2b03      	cmp	r3, #3
 800140e:	d043      	beq.n	8001498 <HAL_GPIO_Init+0xdc>
 8001410:	2b11      	cmp	r3, #17
 8001412:	d01b      	beq.n	800144c <HAL_GPIO_Init+0x90>
          break;
 8001414:	e043      	b.n	800149e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001416:	4a89      	ldr	r2, [pc, #548]	; (800163c <HAL_GPIO_Init+0x280>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d026      	beq.n	800146a <HAL_GPIO_Init+0xae>
 800141c:	4a87      	ldr	r2, [pc, #540]	; (800163c <HAL_GPIO_Init+0x280>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d806      	bhi.n	8001430 <HAL_GPIO_Init+0x74>
 8001422:	4a87      	ldr	r2, [pc, #540]	; (8001640 <HAL_GPIO_Init+0x284>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d020      	beq.n	800146a <HAL_GPIO_Init+0xae>
 8001428:	4a86      	ldr	r2, [pc, #536]	; (8001644 <HAL_GPIO_Init+0x288>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d01d      	beq.n	800146a <HAL_GPIO_Init+0xae>
          break;
 800142e:	e036      	b.n	800149e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001430:	4a85      	ldr	r2, [pc, #532]	; (8001648 <HAL_GPIO_Init+0x28c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d019      	beq.n	800146a <HAL_GPIO_Init+0xae>
 8001436:	4a85      	ldr	r2, [pc, #532]	; (800164c <HAL_GPIO_Init+0x290>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d016      	beq.n	800146a <HAL_GPIO_Init+0xae>
 800143c:	4a84      	ldr	r2, [pc, #528]	; (8001650 <HAL_GPIO_Init+0x294>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0xae>
          break;
 8001442:	e02c      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e028      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	3304      	adds	r3, #4
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e023      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	3308      	adds	r3, #8
 800145c:	623b      	str	r3, [r7, #32]
          break;
 800145e:	e01e      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	330c      	adds	r3, #12
 8001466:	623b      	str	r3, [r7, #32]
          break;
 8001468:	e019      	b.n	800149e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001472:	2304      	movs	r3, #4
 8001474:	623b      	str	r3, [r7, #32]
          break;
 8001476:	e012      	b.n	800149e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d105      	bne.n	800148c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001480:	2308      	movs	r3, #8
 8001482:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	611a      	str	r2, [r3, #16]
          break;
 800148a:	e008      	b.n	800149e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800148c:	2308      	movs	r3, #8
 800148e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	615a      	str	r2, [r3, #20]
          break;
 8001496:	e002      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
          break;
 800149c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2bff      	cmp	r3, #255	; 0xff
 80014a2:	d801      	bhi.n	80014a8 <HAL_GPIO_Init+0xec>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	e001      	b.n	80014ac <HAL_GPIO_Init+0xf0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3304      	adds	r3, #4
 80014ac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2bff      	cmp	r3, #255	; 0xff
 80014b2:	d802      	bhi.n	80014ba <HAL_GPIO_Init+0xfe>
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	e002      	b.n	80014c0 <HAL_GPIO_Init+0x104>
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	3b08      	subs	r3, #8
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	210f      	movs	r1, #15
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	401a      	ands	r2, r3
 80014d2:	6a39      	ldr	r1, [r7, #32]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	431a      	orrs	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8096 	beq.w	800161a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014ee:	4b59      	ldr	r3, [pc, #356]	; (8001654 <HAL_GPIO_Init+0x298>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	4a58      	ldr	r2, [pc, #352]	; (8001654 <HAL_GPIO_Init+0x298>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6193      	str	r3, [r2, #24]
 80014fa:	4b56      	ldr	r3, [pc, #344]	; (8001654 <HAL_GPIO_Init+0x298>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001506:	4a54      	ldr	r2, [pc, #336]	; (8001658 <HAL_GPIO_Init+0x29c>)
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4013      	ands	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4b      	ldr	r2, [pc, #300]	; (800165c <HAL_GPIO_Init+0x2a0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d013      	beq.n	800155a <HAL_GPIO_Init+0x19e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4a      	ldr	r2, [pc, #296]	; (8001660 <HAL_GPIO_Init+0x2a4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00d      	beq.n	8001556 <HAL_GPIO_Init+0x19a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a49      	ldr	r2, [pc, #292]	; (8001664 <HAL_GPIO_Init+0x2a8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d007      	beq.n	8001552 <HAL_GPIO_Init+0x196>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a48      	ldr	r2, [pc, #288]	; (8001668 <HAL_GPIO_Init+0x2ac>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_GPIO_Init+0x192>
 800154a:	2303      	movs	r3, #3
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 800154e:	2304      	movs	r3, #4
 8001550:	e004      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 8001552:	2302      	movs	r3, #2
 8001554:	e002      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 800155a:	2300      	movs	r3, #0
 800155c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155e:	f002 0203 	and.w	r2, r2, #3
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	4093      	lsls	r3, r2
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800156c:	493a      	ldr	r1, [pc, #232]	; (8001658 <HAL_GPIO_Init+0x29c>)
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	3302      	adds	r3, #2
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d006      	beq.n	8001594 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001586:	4b39      	ldr	r3, [pc, #228]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4938      	ldr	r1, [pc, #224]	; (800166c <HAL_GPIO_Init+0x2b0>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
 8001592:	e006      	b.n	80015a2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001594:	4b35      	ldr	r3, [pc, #212]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	43db      	mvns	r3, r3
 800159c:	4933      	ldr	r1, [pc, #204]	; (800166c <HAL_GPIO_Init+0x2b0>)
 800159e:	4013      	ands	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015ae:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	492e      	ldr	r1, [pc, #184]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
 80015ba:	e006      	b.n	80015ca <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	4929      	ldr	r1, [pc, #164]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015d6:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	4924      	ldr	r1, [pc, #144]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
 80015e2:	e006      	b.n	80015f2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	491f      	ldr	r1, [pc, #124]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	491a      	ldr	r1, [pc, #104]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	60cb      	str	r3, [r1, #12]
 800160a:	e006      	b.n	800161a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_GPIO_Init+0x2b0>)
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	43db      	mvns	r3, r3
 8001614:	4915      	ldr	r1, [pc, #84]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001616:	4013      	ands	r3, r2
 8001618:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	3301      	adds	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	fa22 f303 	lsr.w	r3, r2, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	f47f aed0 	bne.w	80013d0 <HAL_GPIO_Init+0x14>
  }
}
 8001630:	bf00      	nop
 8001632:	372c      	adds	r7, #44	; 0x2c
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	10210000 	.word	0x10210000
 8001640:	10110000 	.word	0x10110000
 8001644:	10120000 	.word	0x10120000
 8001648:	10310000 	.word	0x10310000
 800164c:	10320000 	.word	0x10320000
 8001650:	10220000 	.word	0x10220000
 8001654:	40021000 	.word	0x40021000
 8001658:	40010000 	.word	0x40010000
 800165c:	40010800 	.word	0x40010800
 8001660:	40010c00 	.word	0x40010c00
 8001664:	40011000 	.word	0x40011000
 8001668:	40011400 	.word	0x40011400
 800166c:	40010400 	.word	0x40010400

08001670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800168c:	e003      	b.n	8001696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	041a      	lsls	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	611a      	str	r2, [r3, #16]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e26c      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8087 	beq.w	80017ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c0:	4b92      	ldr	r3, [pc, #584]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d00c      	beq.n	80016e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016cc:	4b8f      	ldr	r3, [pc, #572]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d112      	bne.n	80016fe <HAL_RCC_OscConfig+0x5e>
 80016d8:	4b8c      	ldr	r3, [pc, #560]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e4:	d10b      	bne.n	80016fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e6:	4b89      	ldr	r3, [pc, #548]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d06c      	beq.n	80017cc <HAL_RCC_OscConfig+0x12c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d168      	bne.n	80017cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e246      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x76>
 8001708:	4b80      	ldr	r3, [pc, #512]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a7f      	ldr	r2, [pc, #508]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800170e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e02e      	b.n	8001774 <HAL_RCC_OscConfig+0xd4>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x98>
 800171e:	4b7b      	ldr	r3, [pc, #492]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a7a      	ldr	r2, [pc, #488]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b78      	ldr	r3, [pc, #480]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a77      	ldr	r2, [pc, #476]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0xd4>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0xbc>
 8001742:	4b72      	ldr	r3, [pc, #456]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a71      	ldr	r2, [pc, #452]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b6f      	ldr	r3, [pc, #444]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a6e      	ldr	r2, [pc, #440]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xd4>
 800175c:	4b6b      	ldr	r3, [pc, #428]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a6a      	ldr	r2, [pc, #424]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b68      	ldr	r3, [pc, #416]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a67      	ldr	r2, [pc, #412]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fb14 	bl	8000da8 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fb10 	bl	8000da8 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e1fa      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b5d      	ldr	r3, [pc, #372]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xe4>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fb00 	bl	8000da8 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fafc 	bl	8000da8 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1e6      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x10c>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d063      	beq.n	80018a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017da:	4b4c      	ldr	r3, [pc, #304]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017e6:	4b49      	ldr	r3, [pc, #292]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d11c      	bne.n	800182c <HAL_RCC_OscConfig+0x18c>
 80017f2:	4b46      	ldr	r3, [pc, #280]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d116      	bne.n	800182c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	4b43      	ldr	r3, [pc, #268]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_RCC_OscConfig+0x176>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e1ba      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4939      	ldr	r1, [pc, #228]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	e03a      	b.n	80018a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001834:	4b36      	ldr	r3, [pc, #216]	; (8001910 <HAL_RCC_OscConfig+0x270>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fab5 	bl	8000da8 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff fab1 	bl	8000da8 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e19b      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4927      	ldr	r1, [pc, #156]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	e015      	b.n	80018a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001876:	4b26      	ldr	r3, [pc, #152]	; (8001910 <HAL_RCC_OscConfig+0x270>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fa94 	bl	8000da8 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001884:	f7ff fa90 	bl	8000da8 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e17a      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d03a      	beq.n	8001924 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d019      	beq.n	80018ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018bc:	f7ff fa74 	bl	8000da8 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c4:	f7ff fa70 	bl	8000da8 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e15a      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f000 fada 	bl	8001e9c <RCC_Delay>
 80018e8:	e01c      	b.n	8001924 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7ff fa5a 	bl	8000da8 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f6:	e00f      	b.n	8001918 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f8:	f7ff fa56 	bl	8000da8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d908      	bls.n	8001918 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e140      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000
 8001910:	42420000 	.word	0x42420000
 8001914:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001918:	4b9e      	ldr	r3, [pc, #632]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e9      	bne.n	80018f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80a6 	beq.w	8001a7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001936:	4b97      	ldr	r3, [pc, #604]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10d      	bne.n	800195e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b94      	ldr	r3, [pc, #592]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a93      	ldr	r2, [pc, #588]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	4b91      	ldr	r3, [pc, #580]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800195a:	2301      	movs	r3, #1
 800195c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195e:	4b8e      	ldr	r3, [pc, #568]	; (8001b98 <HAL_RCC_OscConfig+0x4f8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001966:	2b00      	cmp	r3, #0
 8001968:	d118      	bne.n	800199c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196a:	4b8b      	ldr	r3, [pc, #556]	; (8001b98 <HAL_RCC_OscConfig+0x4f8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a8a      	ldr	r2, [pc, #552]	; (8001b98 <HAL_RCC_OscConfig+0x4f8>)
 8001970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001976:	f7ff fa17 	bl	8000da8 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197e:	f7ff fa13 	bl	8000da8 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b64      	cmp	r3, #100	; 0x64
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e0fd      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001990:	4b81      	ldr	r3, [pc, #516]	; (8001b98 <HAL_RCC_OscConfig+0x4f8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d106      	bne.n	80019b2 <HAL_RCC_OscConfig+0x312>
 80019a4:	4b7b      	ldr	r3, [pc, #492]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4a7a      	ldr	r2, [pc, #488]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6213      	str	r3, [r2, #32]
 80019b0:	e02d      	b.n	8001a0e <HAL_RCC_OscConfig+0x36e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x334>
 80019ba:	4b76      	ldr	r3, [pc, #472]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	4a75      	ldr	r2, [pc, #468]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	6213      	str	r3, [r2, #32]
 80019c6:	4b73      	ldr	r3, [pc, #460]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4a72      	ldr	r2, [pc, #456]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	f023 0304 	bic.w	r3, r3, #4
 80019d0:	6213      	str	r3, [r2, #32]
 80019d2:	e01c      	b.n	8001a0e <HAL_RCC_OscConfig+0x36e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b05      	cmp	r3, #5
 80019da:	d10c      	bne.n	80019f6 <HAL_RCC_OscConfig+0x356>
 80019dc:	4b6d      	ldr	r3, [pc, #436]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a6c      	ldr	r2, [pc, #432]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4a69      	ldr	r2, [pc, #420]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6213      	str	r3, [r2, #32]
 80019f4:	e00b      	b.n	8001a0e <HAL_RCC_OscConfig+0x36e>
 80019f6:	4b67      	ldr	r3, [pc, #412]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a66      	ldr	r2, [pc, #408]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6213      	str	r3, [r2, #32]
 8001a02:	4b64      	ldr	r3, [pc, #400]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a63      	ldr	r2, [pc, #396]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d015      	beq.n	8001a42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a16:	f7ff f9c7 	bl	8000da8 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff f9c3 	bl	8000da8 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e0ab      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	4b57      	ldr	r3, [pc, #348]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ee      	beq.n	8001a1e <HAL_RCC_OscConfig+0x37e>
 8001a40:	e014      	b.n	8001a6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a42:	f7ff f9b1 	bl	8000da8 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7ff f9ad 	bl	8000da8 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e095      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a60:	4b4c      	ldr	r3, [pc, #304]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ee      	bne.n	8001a4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d105      	bne.n	8001a7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a72:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4a47      	ldr	r2, [pc, #284]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8081 	beq.w	8001b8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a88:	4b42      	ldr	r3, [pc, #264]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d061      	beq.n	8001b58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d146      	bne.n	8001b2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <HAL_RCC_OscConfig+0x4fc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff f981 	bl	8000da8 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff f97d 	bl	8000da8 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e067      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abc:	4b35      	ldr	r3, [pc, #212]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad0:	d108      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ad2:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	492d      	ldr	r1, [pc, #180]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a19      	ldr	r1, [r3, #32]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	430b      	orrs	r3, r1
 8001af6:	4927      	ldr	r1, [pc, #156]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <HAL_RCC_OscConfig+0x4fc>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff f951 	bl	8000da8 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7ff f94d 	bl	8000da8 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e037      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x46a>
 8001b28:	e02f      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_RCC_OscConfig+0x4fc>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff f93a 	bl	8000da8 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7ff f936 	bl	8000da8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e020      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x498>
 8001b56:	e018      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e013      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	42420060 	.word	0x42420060

08001ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0d0      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d910      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b67      	ldr	r3, [pc, #412]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 0207 	bic.w	r2, r3, #7
 8001bca:	4965      	ldr	r1, [pc, #404]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0b8      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d020      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bfc:	4b59      	ldr	r3, [pc, #356]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a58      	ldr	r2, [pc, #352]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c14:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a52      	ldr	r2, [pc, #328]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c20:	4b50      	ldr	r3, [pc, #320]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	494d      	ldr	r1, [pc, #308]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d040      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d115      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e07f      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e073      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e06b      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7e:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f023 0203 	bic.w	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4936      	ldr	r1, [pc, #216]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c90:	f7ff f88a 	bl	8000da8 <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c98:	f7ff f886 	bl	8000da8 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e053      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 020c 	and.w	r2, r3, #12
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1eb      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d210      	bcs.n	8001cf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 0207 	bic.w	r2, r3, #7
 8001cd6:	4922      	ldr	r1, [pc, #136]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e032      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4916      	ldr	r1, [pc, #88]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d009      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	490e      	ldr	r1, [pc, #56]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d2e:	f000 f821 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 8001d32:	4601      	mov	r1, r0
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d40:	5cd3      	ldrb	r3, [r2, r3]
 8001d42:	fa21 f303 	lsr.w	r3, r1, r3
 8001d46:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <HAL_RCC_ClockConfig+0x1cc>)
 8001d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_RCC_ClockConfig+0x1d0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe ffe8 	bl	8000d24 <HAL_InitTick>

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40022000 	.word	0x40022000
 8001d64:	40021000 	.word	0x40021000
 8001d68:	08002584 	.word	0x08002584
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	20000008 	.word	0x20000008

08001d74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d74:	b490      	push	{r4, r7}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d7c:	1d3c      	adds	r4, r7, #4
 8001d7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d84:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d9e:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d002      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x40>
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x46>
 8001db2:	e02d      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db4:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001db6:	623b      	str	r3, [r7, #32]
      break;
 8001db8:	e02d      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	0c9b      	lsrs	r3, r3, #18
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dcc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dd8:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	0c5b      	lsrs	r3, r3, #17
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001de6:	4413      	add	r3, r2
 8001de8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	4a0f      	ldr	r2, [pc, #60]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001df2:	fb02 f203 	mul.w	r2, r2, r3
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfe:	e004      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e04:	fb02 f303 	mul.w	r3, r2, r3
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	623b      	str	r3, [r7, #32]
      break;
 8001e0e:	e002      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e12:	623b      	str	r3, [r7, #32]
      break;
 8001e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e16:	6a3b      	ldr	r3, [r7, #32]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3728      	adds	r7, #40	; 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc90      	pop	{r4, r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	08002570 	.word	0x08002570
 8001e28:	08002580 	.word	0x08002580
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	007a1200 	.word	0x007a1200
 8001e34:	003d0900 	.word	0x003d0900

08001e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e3c:	4b02      	ldr	r3, [pc, #8]	; (8001e48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	20000000 	.word	0x20000000

08001e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e50:	f7ff fff2 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e54:	4601      	mov	r1, r0
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	4a03      	ldr	r2, [pc, #12]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e62:	5cd3      	ldrb	r3, [r2, r3]
 8001e64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08002594 	.word	0x08002594

08001e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e7c:	4601      	mov	r1, r0
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	0adb      	lsrs	r3, r3, #11
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	08002594 	.word	0x08002594

08001e9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <RCC_Delay+0x34>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <RCC_Delay+0x38>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	0a5b      	lsrs	r3, r3, #9
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001eb8:	bf00      	nop
  }
  while (Delay --);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1e5a      	subs	r2, r3, #1
 8001ebe:	60fa      	str	r2, [r7, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f9      	bne.n	8001eb8 <RCC_Delay+0x1c>
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	10624dd3 	.word	0x10624dd3

08001ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e03f      	b.n	8001f6a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d106      	bne.n	8001f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe fc26 	bl	8000750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2224      	movs	r2, #36	; 0x24
 8001f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f9b1 	bl	8002284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b088      	sub	sp, #32
 8001f76:	af02      	add	r7, sp, #8
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	f040 8083 	bne.w	800209a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_UART_Transmit+0x2e>
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e07b      	b.n	800209c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_UART_Transmit+0x40>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e074      	b.n	800209c <HAL_UART_Transmit+0x12a>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2221      	movs	r2, #33	; 0x21
 8001fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fc8:	f7fe feee 	bl	8000da8 <HAL_GetTick>
 8001fcc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	88fa      	ldrh	r2, [r7, #6]
 8001fd2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	88fa      	ldrh	r2, [r7, #6]
 8001fd8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fda:	e042      	b.n	8002062 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff2:	d122      	bne.n	800203a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f8f6 	bl	80021f0 <UART_WaitOnFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e046      	b.n	800209c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002020:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d103      	bne.n	8002032 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3302      	adds	r3, #2
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	e017      	b.n	8002062 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3301      	adds	r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	e013      	b.n	8002062 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2200      	movs	r2, #0
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f8d3 	bl	80021f0 <UART_WaitOnFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e023      	b.n	800209c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	60ba      	str	r2, [r7, #8]
 800205a:	781a      	ldrb	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002066:	b29b      	uxth	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1b7      	bne.n	8001fdc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2200      	movs	r2, #0
 8002074:	2140      	movs	r1, #64	; 0x40
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f8ba 	bl	80021f0 <UART_WaitOnFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e00a      	b.n	800209c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2220      	movs	r2, #32
 800208a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800209a:	2302      	movs	r3, #2
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	4613      	mov	r3, r2
 80020b2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	f040 8090 	bne.w	80021e6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <HAL_UART_Receive+0x2e>
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e088      	b.n	80021e8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_UART_Receive+0x40>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e081      	b.n	80021e8 <HAL_UART_Receive+0x144>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2222      	movs	r2, #34	; 0x22
 80020f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80020fa:	f7fe fe55 	bl	8000da8 <HAL_GetTick>
 80020fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	88fa      	ldrh	r2, [r7, #6]
 8002104:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	88fa      	ldrh	r2, [r7, #6]
 800210a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800210c:	e05c      	b.n	80021c8 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002124:	d12b      	bne.n	800217e <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2200      	movs	r2, #0
 800212e:	2120      	movs	r1, #32
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f85d 	bl	80021f0 <UART_WaitOnFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e053      	b.n	80021e8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10c      	bne.n	8002166 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	b29b      	uxth	r3, r3
 8002154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002158:	b29a      	uxth	r2, r3
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	3302      	adds	r3, #2
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	e030      	b.n	80021c8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	b29b      	uxth	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	b29a      	uxth	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3301      	adds	r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	e024      	b.n	80021c8 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2200      	movs	r2, #0
 8002186:	2120      	movs	r1, #32
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f831 	bl	80021f0 <UART_WaitOnFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e027      	b.n	80021e8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d108      	bne.n	80021b2 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6859      	ldr	r1, [r3, #4]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	60ba      	str	r2, [r7, #8]
 80021ac:	b2ca      	uxtb	r2, r1
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e00a      	b.n	80021c8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1c59      	adds	r1, r3, #1
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d19d      	bne.n	800210e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e000      	b.n	80021e8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80021e6:	2302      	movs	r3, #2
  }
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002200:	e02c      	b.n	800225c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d028      	beq.n	800225c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <UART_WaitOnFlagUntilTimeout+0x30>
 8002210:	f7fe fdca 	bl	8000da8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	429a      	cmp	r2, r3
 800221e:	d21d      	bcs.n	800225c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800222e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e00f      	b.n	800227c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	4013      	ands	r3, r2
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	429a      	cmp	r2, r3
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	429a      	cmp	r2, r3
 8002278:	d0c3      	beq.n	8002202 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022be:	f023 030c 	bic.w	r3, r3, #12
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	68f9      	ldr	r1, [r7, #12]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a52      	ldr	r2, [pc, #328]	; (8002430 <UART_SetConfig+0x1ac>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d14e      	bne.n	800238a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022ec:	f7ff fdc2 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 80022f0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	009a      	lsls	r2, r3, #2
 80022fc:	441a      	add	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	fbb2 f3f3 	udiv	r3, r2, r3
 8002308:	4a4a      	ldr	r2, [pc, #296]	; (8002434 <UART_SetConfig+0x1b0>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	0119      	lsls	r1, r3, #4
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	009a      	lsls	r2, r3, #2
 800231c:	441a      	add	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	fbb2 f2f3 	udiv	r2, r2, r3
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <UART_SetConfig+0x1b0>)
 800232a:	fba3 0302 	umull	r0, r3, r3, r2
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	2064      	movs	r0, #100	; 0x64
 8002332:	fb00 f303 	mul.w	r3, r0, r3
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	3332      	adds	r3, #50	; 0x32
 800233c:	4a3d      	ldr	r2, [pc, #244]	; (8002434 <UART_SetConfig+0x1b0>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002348:	4419      	add	r1, r3
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	009a      	lsls	r2, r3, #2
 8002354:	441a      	add	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002360:	4b34      	ldr	r3, [pc, #208]	; (8002434 <UART_SetConfig+0x1b0>)
 8002362:	fba3 0302 	umull	r0, r3, r3, r2
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	2064      	movs	r0, #100	; 0x64
 800236a:	fb00 f303 	mul.w	r3, r0, r3
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	3332      	adds	r3, #50	; 0x32
 8002374:	4a2f      	ldr	r2, [pc, #188]	; (8002434 <UART_SetConfig+0x1b0>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	f003 020f 	and.w	r2, r3, #15
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	440a      	add	r2, r1
 8002386:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002388:	e04d      	b.n	8002426 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800238a:	f7ff fd5f 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 800238e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	009a      	lsls	r2, r3, #2
 800239a:	441a      	add	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a6:	4a23      	ldr	r2, [pc, #140]	; (8002434 <UART_SetConfig+0x1b0>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	0119      	lsls	r1, r3, #4
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	009a      	lsls	r2, r3, #2
 80023ba:	441a      	add	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <UART_SetConfig+0x1b0>)
 80023c8:	fba3 0302 	umull	r0, r3, r3, r2
 80023cc:	095b      	lsrs	r3, r3, #5
 80023ce:	2064      	movs	r0, #100	; 0x64
 80023d0:	fb00 f303 	mul.w	r3, r0, r3
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	3332      	adds	r3, #50	; 0x32
 80023da:	4a16      	ldr	r2, [pc, #88]	; (8002434 <UART_SetConfig+0x1b0>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e6:	4419      	add	r1, r3
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	009a      	lsls	r2, r3, #2
 80023f2:	441a      	add	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <UART_SetConfig+0x1b0>)
 8002400:	fba3 0302 	umull	r0, r3, r3, r2
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	2064      	movs	r0, #100	; 0x64
 8002408:	fb00 f303 	mul.w	r3, r0, r3
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	3332      	adds	r3, #50	; 0x32
 8002412:	4a08      	ldr	r2, [pc, #32]	; (8002434 <UART_SetConfig+0x1b0>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	f003 020f 	and.w	r2, r3, #15
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	440a      	add	r2, r1
 8002424:	609a      	str	r2, [r3, #8]
}
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40013800 	.word	0x40013800
 8002434:	51eb851f 	.word	0x51eb851f

08002438 <__libc_init_array>:
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	2500      	movs	r5, #0
 800243c:	4e0c      	ldr	r6, [pc, #48]	; (8002470 <__libc_init_array+0x38>)
 800243e:	4c0d      	ldr	r4, [pc, #52]	; (8002474 <__libc_init_array+0x3c>)
 8002440:	1ba4      	subs	r4, r4, r6
 8002442:	10a4      	asrs	r4, r4, #2
 8002444:	42a5      	cmp	r5, r4
 8002446:	d109      	bne.n	800245c <__libc_init_array+0x24>
 8002448:	f000 f822 	bl	8002490 <_init>
 800244c:	2500      	movs	r5, #0
 800244e:	4e0a      	ldr	r6, [pc, #40]	; (8002478 <__libc_init_array+0x40>)
 8002450:	4c0a      	ldr	r4, [pc, #40]	; (800247c <__libc_init_array+0x44>)
 8002452:	1ba4      	subs	r4, r4, r6
 8002454:	10a4      	asrs	r4, r4, #2
 8002456:	42a5      	cmp	r5, r4
 8002458:	d105      	bne.n	8002466 <__libc_init_array+0x2e>
 800245a:	bd70      	pop	{r4, r5, r6, pc}
 800245c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002460:	4798      	blx	r3
 8002462:	3501      	adds	r5, #1
 8002464:	e7ee      	b.n	8002444 <__libc_init_array+0xc>
 8002466:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800246a:	4798      	blx	r3
 800246c:	3501      	adds	r5, #1
 800246e:	e7f2      	b.n	8002456 <__libc_init_array+0x1e>
 8002470:	0800259c 	.word	0x0800259c
 8002474:	0800259c 	.word	0x0800259c
 8002478:	0800259c 	.word	0x0800259c
 800247c:	080025a0 	.word	0x080025a0

08002480 <memset>:
 8002480:	4603      	mov	r3, r0
 8002482:	4402      	add	r2, r0
 8002484:	4293      	cmp	r3, r2
 8002486:	d100      	bne.n	800248a <memset+0xa>
 8002488:	4770      	bx	lr
 800248a:	f803 1b01 	strb.w	r1, [r3], #1
 800248e:	e7f9      	b.n	8002484 <memset+0x4>

08002490 <_init>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	bf00      	nop
 8002494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002496:	bc08      	pop	{r3}
 8002498:	469e      	mov	lr, r3
 800249a:	4770      	bx	lr

0800249c <_fini>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	bf00      	nop
 80024a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a2:	bc08      	pop	{r3}
 80024a4:	469e      	mov	lr, r3
 80024a6:	4770      	bx	lr
