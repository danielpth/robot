
ctrl_wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050ac  08004110  08004110  00004110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080091bc  080091bc  000091bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009248  08009248  00010080  2**0
                  CONTENTS
  4 .ARM          00000000  08009248  08009248  00010080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009248  08009248  00010080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009248  08009248  00009248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800924c  0800924c  0000924c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009250  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000080  080092d0  00010080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080092d0  000102f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1e5  00000000  00000000  000100a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000293c  00000000  00000000  0001e28e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  00020bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc0  00000000  00000000  00021a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016378  00000000  00000000  000226d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d4f1  00000000  00000000  00038a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077990  00000000  00000000  00045f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bd8d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc4  00000000  00000000  000bd94c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08004110 <__do_global_dtors_aux>:
 8004110:	b510      	push	{r4, lr}
 8004112:	4c05      	ldr	r4, [pc, #20]	; (8004128 <__do_global_dtors_aux+0x18>)
 8004114:	7823      	ldrb	r3, [r4, #0]
 8004116:	b933      	cbnz	r3, 8004126 <__do_global_dtors_aux+0x16>
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <__do_global_dtors_aux+0x1c>)
 800411a:	b113      	cbz	r3, 8004122 <__do_global_dtors_aux+0x12>
 800411c:	4804      	ldr	r0, [pc, #16]	; (8004130 <__do_global_dtors_aux+0x20>)
 800411e:	f3af 8000 	nop.w
 8004122:	2301      	movs	r3, #1
 8004124:	7023      	strb	r3, [r4, #0]
 8004126:	bd10      	pop	{r4, pc}
 8004128:	20000080 	.word	0x20000080
 800412c:	00000000 	.word	0x00000000
 8004130:	080091a4 	.word	0x080091a4

08004134 <frame_dummy>:
 8004134:	b508      	push	{r3, lr}
 8004136:	4b03      	ldr	r3, [pc, #12]	; (8004144 <frame_dummy+0x10>)
 8004138:	b11b      	cbz	r3, 8004142 <frame_dummy+0xe>
 800413a:	4903      	ldr	r1, [pc, #12]	; (8004148 <frame_dummy+0x14>)
 800413c:	4803      	ldr	r0, [pc, #12]	; (800414c <frame_dummy+0x18>)
 800413e:	f3af 8000 	nop.w
 8004142:	bd08      	pop	{r3, pc}
 8004144:	00000000 	.word	0x00000000
 8004148:	20000084 	.word	0x20000084
 800414c:	080091a4 	.word	0x080091a4

08004150 <strlen>:
 8004150:	4603      	mov	r3, r0
 8004152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004156:	2a00      	cmp	r2, #0
 8004158:	d1fb      	bne.n	8004152 <strlen+0x2>
 800415a:	1a18      	subs	r0, r3, r0
 800415c:	3801      	subs	r0, #1
 800415e:	4770      	bx	lr

08004160 <__aeabi_drsub>:
 8004160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004164:	e002      	b.n	800416c <__adddf3>
 8004166:	bf00      	nop

08004168 <__aeabi_dsub>:
 8004168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800416c <__adddf3>:
 800416c:	b530      	push	{r4, r5, lr}
 800416e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004176:	ea94 0f05 	teq	r4, r5
 800417a:	bf08      	it	eq
 800417c:	ea90 0f02 	teqeq	r0, r2
 8004180:	bf1f      	itttt	ne
 8004182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800418a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800418e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004192:	f000 80e2 	beq.w	800435a <__adddf3+0x1ee>
 8004196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800419a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800419e:	bfb8      	it	lt
 80041a0:	426d      	neglt	r5, r5
 80041a2:	dd0c      	ble.n	80041be <__adddf3+0x52>
 80041a4:	442c      	add	r4, r5
 80041a6:	ea80 0202 	eor.w	r2, r0, r2
 80041aa:	ea81 0303 	eor.w	r3, r1, r3
 80041ae:	ea82 0000 	eor.w	r0, r2, r0
 80041b2:	ea83 0101 	eor.w	r1, r3, r1
 80041b6:	ea80 0202 	eor.w	r2, r0, r2
 80041ba:	ea81 0303 	eor.w	r3, r1, r3
 80041be:	2d36      	cmp	r5, #54	; 0x36
 80041c0:	bf88      	it	hi
 80041c2:	bd30      	pophi	{r4, r5, pc}
 80041c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80041c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80041cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80041d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80041d4:	d002      	beq.n	80041dc <__adddf3+0x70>
 80041d6:	4240      	negs	r0, r0
 80041d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80041dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80041e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80041e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80041e8:	d002      	beq.n	80041f0 <__adddf3+0x84>
 80041ea:	4252      	negs	r2, r2
 80041ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80041f0:	ea94 0f05 	teq	r4, r5
 80041f4:	f000 80a7 	beq.w	8004346 <__adddf3+0x1da>
 80041f8:	f1a4 0401 	sub.w	r4, r4, #1
 80041fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8004200:	db0d      	blt.n	800421e <__adddf3+0xb2>
 8004202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004206:	fa22 f205 	lsr.w	r2, r2, r5
 800420a:	1880      	adds	r0, r0, r2
 800420c:	f141 0100 	adc.w	r1, r1, #0
 8004210:	fa03 f20e 	lsl.w	r2, r3, lr
 8004214:	1880      	adds	r0, r0, r2
 8004216:	fa43 f305 	asr.w	r3, r3, r5
 800421a:	4159      	adcs	r1, r3
 800421c:	e00e      	b.n	800423c <__adddf3+0xd0>
 800421e:	f1a5 0520 	sub.w	r5, r5, #32
 8004222:	f10e 0e20 	add.w	lr, lr, #32
 8004226:	2a01      	cmp	r2, #1
 8004228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800422c:	bf28      	it	cs
 800422e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004232:	fa43 f305 	asr.w	r3, r3, r5
 8004236:	18c0      	adds	r0, r0, r3
 8004238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800423c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004240:	d507      	bpl.n	8004252 <__adddf3+0xe6>
 8004242:	f04f 0e00 	mov.w	lr, #0
 8004246:	f1dc 0c00 	rsbs	ip, ip, #0
 800424a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800424e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004256:	d31b      	bcc.n	8004290 <__adddf3+0x124>
 8004258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800425c:	d30c      	bcc.n	8004278 <__adddf3+0x10c>
 800425e:	0849      	lsrs	r1, r1, #1
 8004260:	ea5f 0030 	movs.w	r0, r0, rrx
 8004264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004268:	f104 0401 	add.w	r4, r4, #1
 800426c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004274:	f080 809a 	bcs.w	80043ac <__adddf3+0x240>
 8004278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800427c:	bf08      	it	eq
 800427e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004282:	f150 0000 	adcs.w	r0, r0, #0
 8004286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800428a:	ea41 0105 	orr.w	r1, r1, r5
 800428e:	bd30      	pop	{r4, r5, pc}
 8004290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004294:	4140      	adcs	r0, r0
 8004296:	eb41 0101 	adc.w	r1, r1, r1
 800429a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800429e:	f1a4 0401 	sub.w	r4, r4, #1
 80042a2:	d1e9      	bne.n	8004278 <__adddf3+0x10c>
 80042a4:	f091 0f00 	teq	r1, #0
 80042a8:	bf04      	itt	eq
 80042aa:	4601      	moveq	r1, r0
 80042ac:	2000      	moveq	r0, #0
 80042ae:	fab1 f381 	clz	r3, r1
 80042b2:	bf08      	it	eq
 80042b4:	3320      	addeq	r3, #32
 80042b6:	f1a3 030b 	sub.w	r3, r3, #11
 80042ba:	f1b3 0220 	subs.w	r2, r3, #32
 80042be:	da0c      	bge.n	80042da <__adddf3+0x16e>
 80042c0:	320c      	adds	r2, #12
 80042c2:	dd08      	ble.n	80042d6 <__adddf3+0x16a>
 80042c4:	f102 0c14 	add.w	ip, r2, #20
 80042c8:	f1c2 020c 	rsb	r2, r2, #12
 80042cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80042d0:	fa21 f102 	lsr.w	r1, r1, r2
 80042d4:	e00c      	b.n	80042f0 <__adddf3+0x184>
 80042d6:	f102 0214 	add.w	r2, r2, #20
 80042da:	bfd8      	it	le
 80042dc:	f1c2 0c20 	rsble	ip, r2, #32
 80042e0:	fa01 f102 	lsl.w	r1, r1, r2
 80042e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80042e8:	bfdc      	itt	le
 80042ea:	ea41 010c 	orrle.w	r1, r1, ip
 80042ee:	4090      	lslle	r0, r2
 80042f0:	1ae4      	subs	r4, r4, r3
 80042f2:	bfa2      	ittt	ge
 80042f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80042f8:	4329      	orrge	r1, r5
 80042fa:	bd30      	popge	{r4, r5, pc}
 80042fc:	ea6f 0404 	mvn.w	r4, r4
 8004300:	3c1f      	subs	r4, #31
 8004302:	da1c      	bge.n	800433e <__adddf3+0x1d2>
 8004304:	340c      	adds	r4, #12
 8004306:	dc0e      	bgt.n	8004326 <__adddf3+0x1ba>
 8004308:	f104 0414 	add.w	r4, r4, #20
 800430c:	f1c4 0220 	rsb	r2, r4, #32
 8004310:	fa20 f004 	lsr.w	r0, r0, r4
 8004314:	fa01 f302 	lsl.w	r3, r1, r2
 8004318:	ea40 0003 	orr.w	r0, r0, r3
 800431c:	fa21 f304 	lsr.w	r3, r1, r4
 8004320:	ea45 0103 	orr.w	r1, r5, r3
 8004324:	bd30      	pop	{r4, r5, pc}
 8004326:	f1c4 040c 	rsb	r4, r4, #12
 800432a:	f1c4 0220 	rsb	r2, r4, #32
 800432e:	fa20 f002 	lsr.w	r0, r0, r2
 8004332:	fa01 f304 	lsl.w	r3, r1, r4
 8004336:	ea40 0003 	orr.w	r0, r0, r3
 800433a:	4629      	mov	r1, r5
 800433c:	bd30      	pop	{r4, r5, pc}
 800433e:	fa21 f004 	lsr.w	r0, r1, r4
 8004342:	4629      	mov	r1, r5
 8004344:	bd30      	pop	{r4, r5, pc}
 8004346:	f094 0f00 	teq	r4, #0
 800434a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800434e:	bf06      	itte	eq
 8004350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004354:	3401      	addeq	r4, #1
 8004356:	3d01      	subne	r5, #1
 8004358:	e74e      	b.n	80041f8 <__adddf3+0x8c>
 800435a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800435e:	bf18      	it	ne
 8004360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004364:	d029      	beq.n	80043ba <__adddf3+0x24e>
 8004366:	ea94 0f05 	teq	r4, r5
 800436a:	bf08      	it	eq
 800436c:	ea90 0f02 	teqeq	r0, r2
 8004370:	d005      	beq.n	800437e <__adddf3+0x212>
 8004372:	ea54 0c00 	orrs.w	ip, r4, r0
 8004376:	bf04      	itt	eq
 8004378:	4619      	moveq	r1, r3
 800437a:	4610      	moveq	r0, r2
 800437c:	bd30      	pop	{r4, r5, pc}
 800437e:	ea91 0f03 	teq	r1, r3
 8004382:	bf1e      	ittt	ne
 8004384:	2100      	movne	r1, #0
 8004386:	2000      	movne	r0, #0
 8004388:	bd30      	popne	{r4, r5, pc}
 800438a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800438e:	d105      	bne.n	800439c <__adddf3+0x230>
 8004390:	0040      	lsls	r0, r0, #1
 8004392:	4149      	adcs	r1, r1
 8004394:	bf28      	it	cs
 8004396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800439a:	bd30      	pop	{r4, r5, pc}
 800439c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80043a0:	bf3c      	itt	cc
 80043a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80043a6:	bd30      	popcc	{r4, r5, pc}
 80043a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80043ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80043b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043b4:	f04f 0000 	mov.w	r0, #0
 80043b8:	bd30      	pop	{r4, r5, pc}
 80043ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80043be:	bf1a      	itte	ne
 80043c0:	4619      	movne	r1, r3
 80043c2:	4610      	movne	r0, r2
 80043c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80043c8:	bf1c      	itt	ne
 80043ca:	460b      	movne	r3, r1
 80043cc:	4602      	movne	r2, r0
 80043ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80043d2:	bf06      	itte	eq
 80043d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80043d8:	ea91 0f03 	teqeq	r1, r3
 80043dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80043e0:	bd30      	pop	{r4, r5, pc}
 80043e2:	bf00      	nop

080043e4 <__aeabi_ui2d>:
 80043e4:	f090 0f00 	teq	r0, #0
 80043e8:	bf04      	itt	eq
 80043ea:	2100      	moveq	r1, #0
 80043ec:	4770      	bxeq	lr
 80043ee:	b530      	push	{r4, r5, lr}
 80043f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80043f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80043f8:	f04f 0500 	mov.w	r5, #0
 80043fc:	f04f 0100 	mov.w	r1, #0
 8004400:	e750      	b.n	80042a4 <__adddf3+0x138>
 8004402:	bf00      	nop

08004404 <__aeabi_i2d>:
 8004404:	f090 0f00 	teq	r0, #0
 8004408:	bf04      	itt	eq
 800440a:	2100      	moveq	r1, #0
 800440c:	4770      	bxeq	lr
 800440e:	b530      	push	{r4, r5, lr}
 8004410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800441c:	bf48      	it	mi
 800441e:	4240      	negmi	r0, r0
 8004420:	f04f 0100 	mov.w	r1, #0
 8004424:	e73e      	b.n	80042a4 <__adddf3+0x138>
 8004426:	bf00      	nop

08004428 <__aeabi_f2d>:
 8004428:	0042      	lsls	r2, r0, #1
 800442a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800442e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004436:	bf1f      	itttt	ne
 8004438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800443c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004444:	4770      	bxne	lr
 8004446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800444a:	bf08      	it	eq
 800444c:	4770      	bxeq	lr
 800444e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004452:	bf04      	itt	eq
 8004454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8004458:	4770      	bxeq	lr
 800445a:	b530      	push	{r4, r5, lr}
 800445c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004468:	e71c      	b.n	80042a4 <__adddf3+0x138>
 800446a:	bf00      	nop

0800446c <__aeabi_ul2d>:
 800446c:	ea50 0201 	orrs.w	r2, r0, r1
 8004470:	bf08      	it	eq
 8004472:	4770      	bxeq	lr
 8004474:	b530      	push	{r4, r5, lr}
 8004476:	f04f 0500 	mov.w	r5, #0
 800447a:	e00a      	b.n	8004492 <__aeabi_l2d+0x16>

0800447c <__aeabi_l2d>:
 800447c:	ea50 0201 	orrs.w	r2, r0, r1
 8004480:	bf08      	it	eq
 8004482:	4770      	bxeq	lr
 8004484:	b530      	push	{r4, r5, lr}
 8004486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800448a:	d502      	bpl.n	8004492 <__aeabi_l2d+0x16>
 800448c:	4240      	negs	r0, r0
 800448e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800449a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800449e:	f43f aed8 	beq.w	8004252 <__adddf3+0xe6>
 80044a2:	f04f 0203 	mov.w	r2, #3
 80044a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80044aa:	bf18      	it	ne
 80044ac:	3203      	addne	r2, #3
 80044ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80044b2:	bf18      	it	ne
 80044b4:	3203      	addne	r2, #3
 80044b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80044ba:	f1c2 0320 	rsb	r3, r2, #32
 80044be:	fa00 fc03 	lsl.w	ip, r0, r3
 80044c2:	fa20 f002 	lsr.w	r0, r0, r2
 80044c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80044ca:	ea40 000e 	orr.w	r0, r0, lr
 80044ce:	fa21 f102 	lsr.w	r1, r1, r2
 80044d2:	4414      	add	r4, r2
 80044d4:	e6bd      	b.n	8004252 <__adddf3+0xe6>
 80044d6:	bf00      	nop

080044d8 <__aeabi_dmul>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80044de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80044e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80044e6:	bf1d      	ittte	ne
 80044e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80044ec:	ea94 0f0c 	teqne	r4, ip
 80044f0:	ea95 0f0c 	teqne	r5, ip
 80044f4:	f000 f8de 	bleq	80046b4 <__aeabi_dmul+0x1dc>
 80044f8:	442c      	add	r4, r5
 80044fa:	ea81 0603 	eor.w	r6, r1, r3
 80044fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800450a:	bf18      	it	ne
 800450c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004518:	d038      	beq.n	800458c <__aeabi_dmul+0xb4>
 800451a:	fba0 ce02 	umull	ip, lr, r0, r2
 800451e:	f04f 0500 	mov.w	r5, #0
 8004522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800452a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800452e:	f04f 0600 	mov.w	r6, #0
 8004532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004536:	f09c 0f00 	teq	ip, #0
 800453a:	bf18      	it	ne
 800453c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800454c:	d204      	bcs.n	8004558 <__aeabi_dmul+0x80>
 800454e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004552:	416d      	adcs	r5, r5
 8004554:	eb46 0606 	adc.w	r6, r6, r6
 8004558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800455c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800456c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004570:	bf88      	it	hi
 8004572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004576:	d81e      	bhi.n	80045b6 <__aeabi_dmul+0xde>
 8004578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800457c:	bf08      	it	eq
 800457e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004582:	f150 0000 	adcs.w	r0, r0, #0
 8004586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004590:	ea46 0101 	orr.w	r1, r6, r1
 8004594:	ea40 0002 	orr.w	r0, r0, r2
 8004598:	ea81 0103 	eor.w	r1, r1, r3
 800459c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80045a0:	bfc2      	ittt	gt
 80045a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80045a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80045aa:	bd70      	popgt	{r4, r5, r6, pc}
 80045ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80045b0:	f04f 0e00 	mov.w	lr, #0
 80045b4:	3c01      	subs	r4, #1
 80045b6:	f300 80ab 	bgt.w	8004710 <__aeabi_dmul+0x238>
 80045ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80045be:	bfde      	ittt	le
 80045c0:	2000      	movle	r0, #0
 80045c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80045c6:	bd70      	pople	{r4, r5, r6, pc}
 80045c8:	f1c4 0400 	rsb	r4, r4, #0
 80045cc:	3c20      	subs	r4, #32
 80045ce:	da35      	bge.n	800463c <__aeabi_dmul+0x164>
 80045d0:	340c      	adds	r4, #12
 80045d2:	dc1b      	bgt.n	800460c <__aeabi_dmul+0x134>
 80045d4:	f104 0414 	add.w	r4, r4, #20
 80045d8:	f1c4 0520 	rsb	r5, r4, #32
 80045dc:	fa00 f305 	lsl.w	r3, r0, r5
 80045e0:	fa20 f004 	lsr.w	r0, r0, r4
 80045e4:	fa01 f205 	lsl.w	r2, r1, r5
 80045e8:	ea40 0002 	orr.w	r0, r0, r2
 80045ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80045f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80045f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80045f8:	fa21 f604 	lsr.w	r6, r1, r4
 80045fc:	eb42 0106 	adc.w	r1, r2, r6
 8004600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004604:	bf08      	it	eq
 8004606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	f1c4 040c 	rsb	r4, r4, #12
 8004610:	f1c4 0520 	rsb	r5, r4, #32
 8004614:	fa00 f304 	lsl.w	r3, r0, r4
 8004618:	fa20 f005 	lsr.w	r0, r0, r5
 800461c:	fa01 f204 	lsl.w	r2, r1, r4
 8004620:	ea40 0002 	orr.w	r0, r0, r2
 8004624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800462c:	f141 0100 	adc.w	r1, r1, #0
 8004630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004634:	bf08      	it	eq
 8004636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800463a:	bd70      	pop	{r4, r5, r6, pc}
 800463c:	f1c4 0520 	rsb	r5, r4, #32
 8004640:	fa00 f205 	lsl.w	r2, r0, r5
 8004644:	ea4e 0e02 	orr.w	lr, lr, r2
 8004648:	fa20 f304 	lsr.w	r3, r0, r4
 800464c:	fa01 f205 	lsl.w	r2, r1, r5
 8004650:	ea43 0302 	orr.w	r3, r3, r2
 8004654:	fa21 f004 	lsr.w	r0, r1, r4
 8004658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800465c:	fa21 f204 	lsr.w	r2, r1, r4
 8004660:	ea20 0002 	bic.w	r0, r0, r2
 8004664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800466c:	bf08      	it	eq
 800466e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004672:	bd70      	pop	{r4, r5, r6, pc}
 8004674:	f094 0f00 	teq	r4, #0
 8004678:	d10f      	bne.n	800469a <__aeabi_dmul+0x1c2>
 800467a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800467e:	0040      	lsls	r0, r0, #1
 8004680:	eb41 0101 	adc.w	r1, r1, r1
 8004684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004688:	bf08      	it	eq
 800468a:	3c01      	subeq	r4, #1
 800468c:	d0f7      	beq.n	800467e <__aeabi_dmul+0x1a6>
 800468e:	ea41 0106 	orr.w	r1, r1, r6
 8004692:	f095 0f00 	teq	r5, #0
 8004696:	bf18      	it	ne
 8004698:	4770      	bxne	lr
 800469a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800469e:	0052      	lsls	r2, r2, #1
 80046a0:	eb43 0303 	adc.w	r3, r3, r3
 80046a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80046a8:	bf08      	it	eq
 80046aa:	3d01      	subeq	r5, #1
 80046ac:	d0f7      	beq.n	800469e <__aeabi_dmul+0x1c6>
 80046ae:	ea43 0306 	orr.w	r3, r3, r6
 80046b2:	4770      	bx	lr
 80046b4:	ea94 0f0c 	teq	r4, ip
 80046b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80046bc:	bf18      	it	ne
 80046be:	ea95 0f0c 	teqne	r5, ip
 80046c2:	d00c      	beq.n	80046de <__aeabi_dmul+0x206>
 80046c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80046c8:	bf18      	it	ne
 80046ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80046ce:	d1d1      	bne.n	8004674 <__aeabi_dmul+0x19c>
 80046d0:	ea81 0103 	eor.w	r1, r1, r3
 80046d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80046d8:	f04f 0000 	mov.w	r0, #0
 80046dc:	bd70      	pop	{r4, r5, r6, pc}
 80046de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80046e2:	bf06      	itte	eq
 80046e4:	4610      	moveq	r0, r2
 80046e6:	4619      	moveq	r1, r3
 80046e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80046ec:	d019      	beq.n	8004722 <__aeabi_dmul+0x24a>
 80046ee:	ea94 0f0c 	teq	r4, ip
 80046f2:	d102      	bne.n	80046fa <__aeabi_dmul+0x222>
 80046f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80046f8:	d113      	bne.n	8004722 <__aeabi_dmul+0x24a>
 80046fa:	ea95 0f0c 	teq	r5, ip
 80046fe:	d105      	bne.n	800470c <__aeabi_dmul+0x234>
 8004700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004704:	bf1c      	itt	ne
 8004706:	4610      	movne	r0, r2
 8004708:	4619      	movne	r1, r3
 800470a:	d10a      	bne.n	8004722 <__aeabi_dmul+0x24a>
 800470c:	ea81 0103 	eor.w	r1, r1, r3
 8004710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800471c:	f04f 0000 	mov.w	r0, #0
 8004720:	bd70      	pop	{r4, r5, r6, pc}
 8004722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800472a:	bd70      	pop	{r4, r5, r6, pc}

0800472c <__aeabi_ddiv>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800473a:	bf1d      	ittte	ne
 800473c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004740:	ea94 0f0c 	teqne	r4, ip
 8004744:	ea95 0f0c 	teqne	r5, ip
 8004748:	f000 f8a7 	bleq	800489a <__aeabi_ddiv+0x16e>
 800474c:	eba4 0405 	sub.w	r4, r4, r5
 8004750:	ea81 0e03 	eor.w	lr, r1, r3
 8004754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800475c:	f000 8088 	beq.w	8004870 <__aeabi_ddiv+0x144>
 8004760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800476c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800477c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004784:	429d      	cmp	r5, r3
 8004786:	bf08      	it	eq
 8004788:	4296      	cmpeq	r6, r2
 800478a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800478e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004792:	d202      	bcs.n	800479a <__aeabi_ddiv+0x6e>
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	ea4f 0232 	mov.w	r2, r2, rrx
 800479a:	1ab6      	subs	r6, r6, r2
 800479c:	eb65 0503 	sbc.w	r5, r5, r3
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80047a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80047aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80047ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80047b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047b6:	bf22      	ittt	cs
 80047b8:	1ab6      	subcs	r6, r6, r2
 80047ba:	4675      	movcs	r5, lr
 80047bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80047c0:	085b      	lsrs	r3, r3, #1
 80047c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80047c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80047ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047ce:	bf22      	ittt	cs
 80047d0:	1ab6      	subcs	r6, r6, r2
 80047d2:	4675      	movcs	r5, lr
 80047d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	ea4f 0232 	mov.w	r2, r2, rrx
 80047de:	ebb6 0e02 	subs.w	lr, r6, r2
 80047e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047e6:	bf22      	ittt	cs
 80047e8:	1ab6      	subcs	r6, r6, r2
 80047ea:	4675      	movcs	r5, lr
 80047ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80047f0:	085b      	lsrs	r3, r3, #1
 80047f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80047f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80047fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047fe:	bf22      	ittt	cs
 8004800:	1ab6      	subcs	r6, r6, r2
 8004802:	4675      	movcs	r5, lr
 8004804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004808:	ea55 0e06 	orrs.w	lr, r5, r6
 800480c:	d018      	beq.n	8004840 <__aeabi_ddiv+0x114>
 800480e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800481a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800481e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800482a:	d1c0      	bne.n	80047ae <__aeabi_ddiv+0x82>
 800482c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004830:	d10b      	bne.n	800484a <__aeabi_ddiv+0x11e>
 8004832:	ea41 0100 	orr.w	r1, r1, r0
 8004836:	f04f 0000 	mov.w	r0, #0
 800483a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800483e:	e7b6      	b.n	80047ae <__aeabi_ddiv+0x82>
 8004840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004844:	bf04      	itt	eq
 8004846:	4301      	orreq	r1, r0
 8004848:	2000      	moveq	r0, #0
 800484a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800484e:	bf88      	it	hi
 8004850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004854:	f63f aeaf 	bhi.w	80045b6 <__aeabi_dmul+0xde>
 8004858:	ebb5 0c03 	subs.w	ip, r5, r3
 800485c:	bf04      	itt	eq
 800485e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004866:	f150 0000 	adcs.w	r0, r0, #0
 800486a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800486e:	bd70      	pop	{r4, r5, r6, pc}
 8004870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800487c:	bfc2      	ittt	gt
 800487e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004886:	bd70      	popgt	{r4, r5, r6, pc}
 8004888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800488c:	f04f 0e00 	mov.w	lr, #0
 8004890:	3c01      	subs	r4, #1
 8004892:	e690      	b.n	80045b6 <__aeabi_dmul+0xde>
 8004894:	ea45 0e06 	orr.w	lr, r5, r6
 8004898:	e68d      	b.n	80045b6 <__aeabi_dmul+0xde>
 800489a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800489e:	ea94 0f0c 	teq	r4, ip
 80048a2:	bf08      	it	eq
 80048a4:	ea95 0f0c 	teqeq	r5, ip
 80048a8:	f43f af3b 	beq.w	8004722 <__aeabi_dmul+0x24a>
 80048ac:	ea94 0f0c 	teq	r4, ip
 80048b0:	d10a      	bne.n	80048c8 <__aeabi_ddiv+0x19c>
 80048b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80048b6:	f47f af34 	bne.w	8004722 <__aeabi_dmul+0x24a>
 80048ba:	ea95 0f0c 	teq	r5, ip
 80048be:	f47f af25 	bne.w	800470c <__aeabi_dmul+0x234>
 80048c2:	4610      	mov	r0, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	e72c      	b.n	8004722 <__aeabi_dmul+0x24a>
 80048c8:	ea95 0f0c 	teq	r5, ip
 80048cc:	d106      	bne.n	80048dc <__aeabi_ddiv+0x1b0>
 80048ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80048d2:	f43f aefd 	beq.w	80046d0 <__aeabi_dmul+0x1f8>
 80048d6:	4610      	mov	r0, r2
 80048d8:	4619      	mov	r1, r3
 80048da:	e722      	b.n	8004722 <__aeabi_dmul+0x24a>
 80048dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80048e0:	bf18      	it	ne
 80048e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80048e6:	f47f aec5 	bne.w	8004674 <__aeabi_dmul+0x19c>
 80048ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80048ee:	f47f af0d 	bne.w	800470c <__aeabi_dmul+0x234>
 80048f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80048f6:	f47f aeeb 	bne.w	80046d0 <__aeabi_dmul+0x1f8>
 80048fa:	e712      	b.n	8004722 <__aeabi_dmul+0x24a>

080048fc <__gedf2>:
 80048fc:	f04f 3cff 	mov.w	ip, #4294967295
 8004900:	e006      	b.n	8004910 <__cmpdf2+0x4>
 8004902:	bf00      	nop

08004904 <__ledf2>:
 8004904:	f04f 0c01 	mov.w	ip, #1
 8004908:	e002      	b.n	8004910 <__cmpdf2+0x4>
 800490a:	bf00      	nop

0800490c <__cmpdf2>:
 800490c:	f04f 0c01 	mov.w	ip, #1
 8004910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800491c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004920:	bf18      	it	ne
 8004922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004926:	d01b      	beq.n	8004960 <__cmpdf2+0x54>
 8004928:	b001      	add	sp, #4
 800492a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800492e:	bf0c      	ite	eq
 8004930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004934:	ea91 0f03 	teqne	r1, r3
 8004938:	bf02      	ittt	eq
 800493a:	ea90 0f02 	teqeq	r0, r2
 800493e:	2000      	moveq	r0, #0
 8004940:	4770      	bxeq	lr
 8004942:	f110 0f00 	cmn.w	r0, #0
 8004946:	ea91 0f03 	teq	r1, r3
 800494a:	bf58      	it	pl
 800494c:	4299      	cmppl	r1, r3
 800494e:	bf08      	it	eq
 8004950:	4290      	cmpeq	r0, r2
 8004952:	bf2c      	ite	cs
 8004954:	17d8      	asrcs	r0, r3, #31
 8004956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800495a:	f040 0001 	orr.w	r0, r0, #1
 800495e:	4770      	bx	lr
 8004960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004968:	d102      	bne.n	8004970 <__cmpdf2+0x64>
 800496a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800496e:	d107      	bne.n	8004980 <__cmpdf2+0x74>
 8004970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004978:	d1d6      	bne.n	8004928 <__cmpdf2+0x1c>
 800497a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800497e:	d0d3      	beq.n	8004928 <__cmpdf2+0x1c>
 8004980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop

08004988 <__aeabi_cdrcmple>:
 8004988:	4684      	mov	ip, r0
 800498a:	4610      	mov	r0, r2
 800498c:	4662      	mov	r2, ip
 800498e:	468c      	mov	ip, r1
 8004990:	4619      	mov	r1, r3
 8004992:	4663      	mov	r3, ip
 8004994:	e000      	b.n	8004998 <__aeabi_cdcmpeq>
 8004996:	bf00      	nop

08004998 <__aeabi_cdcmpeq>:
 8004998:	b501      	push	{r0, lr}
 800499a:	f7ff ffb7 	bl	800490c <__cmpdf2>
 800499e:	2800      	cmp	r0, #0
 80049a0:	bf48      	it	mi
 80049a2:	f110 0f00 	cmnmi.w	r0, #0
 80049a6:	bd01      	pop	{r0, pc}

080049a8 <__aeabi_dcmpeq>:
 80049a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049ac:	f7ff fff4 	bl	8004998 <__aeabi_cdcmpeq>
 80049b0:	bf0c      	ite	eq
 80049b2:	2001      	moveq	r0, #1
 80049b4:	2000      	movne	r0, #0
 80049b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80049ba:	bf00      	nop

080049bc <__aeabi_dcmplt>:
 80049bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049c0:	f7ff ffea 	bl	8004998 <__aeabi_cdcmpeq>
 80049c4:	bf34      	ite	cc
 80049c6:	2001      	movcc	r0, #1
 80049c8:	2000      	movcs	r0, #0
 80049ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80049ce:	bf00      	nop

080049d0 <__aeabi_dcmple>:
 80049d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049d4:	f7ff ffe0 	bl	8004998 <__aeabi_cdcmpeq>
 80049d8:	bf94      	ite	ls
 80049da:	2001      	movls	r0, #1
 80049dc:	2000      	movhi	r0, #0
 80049de:	f85d fb08 	ldr.w	pc, [sp], #8
 80049e2:	bf00      	nop

080049e4 <__aeabi_dcmpge>:
 80049e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049e8:	f7ff ffce 	bl	8004988 <__aeabi_cdrcmple>
 80049ec:	bf94      	ite	ls
 80049ee:	2001      	movls	r0, #1
 80049f0:	2000      	movhi	r0, #0
 80049f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80049f6:	bf00      	nop

080049f8 <__aeabi_dcmpgt>:
 80049f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049fc:	f7ff ffc4 	bl	8004988 <__aeabi_cdrcmple>
 8004a00:	bf34      	ite	cc
 8004a02:	2001      	movcc	r0, #1
 8004a04:	2000      	movcs	r0, #0
 8004a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8004a0a:	bf00      	nop

08004a0c <__aeabi_d2iz>:
 8004a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004a14:	d215      	bcs.n	8004a42 <__aeabi_d2iz+0x36>
 8004a16:	d511      	bpl.n	8004a3c <__aeabi_d2iz+0x30>
 8004a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004a20:	d912      	bls.n	8004a48 <__aeabi_d2iz+0x3c>
 8004a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004a32:	fa23 f002 	lsr.w	r0, r3, r2
 8004a36:	bf18      	it	ne
 8004a38:	4240      	negne	r0, r0
 8004a3a:	4770      	bx	lr
 8004a3c:	f04f 0000 	mov.w	r0, #0
 8004a40:	4770      	bx	lr
 8004a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004a46:	d105      	bne.n	8004a54 <__aeabi_d2iz+0x48>
 8004a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004a4c:	bf08      	it	eq
 8004a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004a52:	4770      	bx	lr
 8004a54:	f04f 0000 	mov.w	r0, #0
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop

08004a5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8004a62:	1d3b      	adds	r3, r7, #4
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	605a      	str	r2, [r3, #4]
 8004a6a:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8004a6c:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <MX_ADC1_Init+0x74>)
 8004a6e:	4a19      	ldr	r2, [pc, #100]	; (8004ad4 <MX_ADC1_Init+0x78>)
 8004a70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004a72:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <MX_ADC1_Init+0x74>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <MX_ADC1_Init+0x74>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004a7e:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <MX_ADC1_Init+0x74>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004a84:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <MX_ADC1_Init+0x74>)
 8004a86:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004a8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004a8c:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <MX_ADC1_Init+0x74>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8004a92:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <MX_ADC1_Init+0x74>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004a98:	480d      	ldr	r0, [pc, #52]	; (8004ad0 <MX_ADC1_Init+0x74>)
 8004a9a:	f001 fa91 	bl	8005fc0 <HAL_ADC_Init>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8004aa4:	f000 faa0 	bl	8004fe8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004aac:	2301      	movs	r3, #1
 8004aae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ab4:	1d3b      	adds	r3, r7, #4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4805      	ldr	r0, [pc, #20]	; (8004ad0 <MX_ADC1_Init+0x74>)
 8004aba:	f001 fb59 	bl	8006170 <HAL_ADC_ConfigChannel>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8004ac4:	f000 fa90 	bl	8004fe8 <Error_Handler>
  }

}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	200000bc 	.word	0x200000bc
 8004ad4:	40012400 	.word	0x40012400

08004ad8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae0:	f107 0310 	add.w	r3, r7, #16
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	609a      	str	r2, [r3, #8]
 8004aec:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a28      	ldr	r2, [pc, #160]	; (8004b94 <HAL_ADC_MspInit+0xbc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d149      	bne.n	8004b8c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004af8:	4b27      	ldr	r3, [pc, #156]	; (8004b98 <HAL_ADC_MspInit+0xc0>)
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	4a26      	ldr	r2, [pc, #152]	; (8004b98 <HAL_ADC_MspInit+0xc0>)
 8004afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b02:	6193      	str	r3, [r2, #24]
 8004b04:	4b24      	ldr	r3, [pc, #144]	; (8004b98 <HAL_ADC_MspInit+0xc0>)
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b10:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <HAL_ADC_MspInit+0xc0>)
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	4a20      	ldr	r2, [pc, #128]	; (8004b98 <HAL_ADC_MspInit+0xc0>)
 8004b16:	f043 0304 	orr.w	r3, r3, #4
 8004b1a:	6193      	str	r3, [r2, #24]
 8004b1c:	4b1e      	ldr	r3, [pc, #120]	; (8004b98 <HAL_ADC_MspInit+0xc0>)
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = Motor1_VCC_Pin|Motor2_VCC_Pin|Motor1_Current_Pin|Motor2_Current_Pin 
 8004b28:	233e      	movs	r3, #62	; 0x3e
 8004b2a:	613b      	str	r3, [r7, #16]
                          |Battery_Vdd_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b30:	f107 0310 	add.w	r3, r7, #16
 8004b34:	4619      	mov	r1, r3
 8004b36:	4819      	ldr	r0, [pc, #100]	; (8004b9c <HAL_ADC_MspInit+0xc4>)
 8004b38:	f001 fed6 	bl	80068e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004b3c:	4b18      	ldr	r3, [pc, #96]	; (8004ba0 <HAL_ADC_MspInit+0xc8>)
 8004b3e:	4a19      	ldr	r2, [pc, #100]	; (8004ba4 <HAL_ADC_MspInit+0xcc>)
 8004b40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b42:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <HAL_ADC_MspInit+0xc8>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b48:	4b15      	ldr	r3, [pc, #84]	; (8004ba0 <HAL_ADC_MspInit+0xc8>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004b4e:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <HAL_ADC_MspInit+0xc8>)
 8004b50:	2280      	movs	r2, #128	; 0x80
 8004b52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004b54:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <HAL_ADC_MspInit+0xc8>)
 8004b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b5a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004b5c:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <HAL_ADC_MspInit+0xc8>)
 8004b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b62:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <HAL_ADC_MspInit+0xc8>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <HAL_ADC_MspInit+0xc8>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004b70:	480b      	ldr	r0, [pc, #44]	; (8004ba0 <HAL_ADC_MspInit+0xc8>)
 8004b72:	f001 fd59 	bl	8006628 <HAL_DMA_Init>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8004b7c:	f000 fa34 	bl	8004fe8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a07      	ldr	r2, [pc, #28]	; (8004ba0 <HAL_ADC_MspInit+0xc8>)
 8004b84:	621a      	str	r2, [r3, #32]
 8004b86:	4a06      	ldr	r2, [pc, #24]	; (8004ba0 <HAL_ADC_MspInit+0xc8>)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	3720      	adds	r7, #32
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40012400 	.word	0x40012400
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	40010800 	.word	0x40010800
 8004ba0:	200000ec 	.word	0x200000ec
 8004ba4:	40020008 	.word	0x40020008

08004ba8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8004bac:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <MX_CRC_Init+0x20>)
 8004bae:	4a07      	ldr	r2, [pc, #28]	; (8004bcc <MX_CRC_Init+0x24>)
 8004bb0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004bb2:	4805      	ldr	r0, [pc, #20]	; (8004bc8 <MX_CRC_Init+0x20>)
 8004bb4:	f001 fd1b 	bl	80065ee <HAL_CRC_Init>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8004bbe:	f000 fa13 	bl	8004fe8 <Error_Handler>
  }

}
 8004bc2:	bf00      	nop
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000130 	.word	0x20000130
 8004bcc:	40023000 	.word	0x40023000

08004bd0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <HAL_CRC_MspInit+0x34>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d10b      	bne.n	8004bfa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004be2:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <HAL_CRC_MspInit+0x38>)
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	4a08      	ldr	r2, [pc, #32]	; (8004c08 <HAL_CRC_MspInit+0x38>)
 8004be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bec:	6153      	str	r3, [r2, #20]
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <HAL_CRC_MspInit+0x38>)
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr
 8004c04:	40023000 	.word	0x40023000
 8004c08:	40021000 	.word	0x40021000

08004c0c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c12:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <MX_DMA_Init+0x38>)
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	4a0b      	ldr	r2, [pc, #44]	; (8004c44 <MX_DMA_Init+0x38>)
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	6153      	str	r3, [r2, #20]
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <MX_DMA_Init+0x38>)
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	200b      	movs	r0, #11
 8004c30:	f001 fca7 	bl	8006582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004c34:	200b      	movs	r0, #11
 8004c36:	f001 fcc0 	bl	80065ba <HAL_NVIC_EnableIRQ>

}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40021000 	.word	0x40021000

08004c48 <flash_jump_to_app>:
 * @brief   Actually jumps to the user application.
 * @param   void
 * @return  void
 */
void flash_jump_to_app(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
  /* Function pointer to the address of the user application. */
  fnc_ptr jump_to_app;
  jump_to_app = (fnc_ptr)(*(volatile uint32_t*) (FLASH_APP_START_ADDRESS+4u));
 8004c4e:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <flash_jump_to_app+0x2c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	607b      	str	r3, [r7, #4]
  //__disable_irq();
  HAL_DeInit();
 8004c54:	f001 f94a 	bl	8005eec <HAL_DeInit>
  /* Change the main stack pointer. */
  __set_MSP(*(volatile uint32_t*)FLASH_APP_START_ADDRESS);
 8004c58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	f383 8808 	msr	MSP, r3
  jump_to_app();
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4798      	blx	r3
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	08000004 	.word	0x08000004

08004c78 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c7e:	f107 0310 	add.w	r3, r7, #16
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	605a      	str	r2, [r3, #4]
 8004c88:	609a      	str	r2, [r3, #8]
 8004c8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c8c:	4b40      	ldr	r3, [pc, #256]	; (8004d90 <MX_GPIO_Init+0x118>)
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	4a3f      	ldr	r2, [pc, #252]	; (8004d90 <MX_GPIO_Init+0x118>)
 8004c92:	f043 0310 	orr.w	r3, r3, #16
 8004c96:	6193      	str	r3, [r2, #24]
 8004c98:	4b3d      	ldr	r3, [pc, #244]	; (8004d90 <MX_GPIO_Init+0x118>)
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ca4:	4b3a      	ldr	r3, [pc, #232]	; (8004d90 <MX_GPIO_Init+0x118>)
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	4a39      	ldr	r2, [pc, #228]	; (8004d90 <MX_GPIO_Init+0x118>)
 8004caa:	f043 0320 	orr.w	r3, r3, #32
 8004cae:	6193      	str	r3, [r2, #24]
 8004cb0:	4b37      	ldr	r3, [pc, #220]	; (8004d90 <MX_GPIO_Init+0x118>)
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cbc:	4b34      	ldr	r3, [pc, #208]	; (8004d90 <MX_GPIO_Init+0x118>)
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	4a33      	ldr	r2, [pc, #204]	; (8004d90 <MX_GPIO_Init+0x118>)
 8004cc2:	f043 0304 	orr.w	r3, r3, #4
 8004cc6:	6193      	str	r3, [r2, #24]
 8004cc8:	4b31      	ldr	r3, [pc, #196]	; (8004d90 <MX_GPIO_Init+0x118>)
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cd4:	4b2e      	ldr	r3, [pc, #184]	; (8004d90 <MX_GPIO_Init+0x118>)
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	4a2d      	ldr	r2, [pc, #180]	; (8004d90 <MX_GPIO_Init+0x118>)
 8004cda:	f043 0308 	orr.w	r3, r3, #8
 8004cde:	6193      	str	r3, [r2, #24]
 8004ce0:	4b2b      	ldr	r3, [pc, #172]	; (8004d90 <MX_GPIO_Init+0x118>)
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	603b      	str	r3, [r7, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8004cec:	2201      	movs	r2, #1
 8004cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cf2:	4828      	ldr	r0, [pc, #160]	; (8004d94 <MX_GPIO_Init+0x11c>)
 8004cf4:	f001 ff52 	bl	8006b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor1_INA_Pin|Motor1_INB_Pin|Motor2_INA_Pin|Motor2_INB_Pin, GPIO_PIN_RESET);
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8004cfe:	4826      	ldr	r0, [pc, #152]	; (8004d98 <MX_GPIO_Init+0x120>)
 8004d00:	f001 ff4c 	bl	8006b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d12:	2302      	movs	r3, #2
 8004d14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004d16:	f107 0310 	add.w	r3, r7, #16
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	481d      	ldr	r0, [pc, #116]	; (8004d94 <MX_GPIO_Init+0x11c>)
 8004d1e:	f001 fde3 	bl	80068e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 PA11 PA12 
                           PA13 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12 
 8004d22:	f647 1301 	movw	r3, #30977	; 0x7901
 8004d26:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d2c:	f107 0310 	add.w	r3, r7, #16
 8004d30:	4619      	mov	r1, r3
 8004d32:	481a      	ldr	r0, [pc, #104]	; (8004d9c <MX_GPIO_Init+0x124>)
 8004d34:	f001 fdd8 	bl	80068e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB15 PB4 PB5 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5 
 8004d38:	f248 3331 	movw	r3, #33585	; 0x8331
 8004d3c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d42:	f107 0310 	add.w	r3, r7, #16
 8004d46:	4619      	mov	r1, r3
 8004d48:	4813      	ldr	r0, [pc, #76]	; (8004d98 <MX_GPIO_Init+0x120>)
 8004d4a:	f001 fdcd 	bl	80068e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor1_EN_Pin|BOOT1_Pin|Motor2_EN_Pin;
 8004d4e:	f244 0306 	movw	r3, #16390	; 0x4006
 8004d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d5c:	f107 0310 	add.w	r3, r7, #16
 8004d60:	4619      	mov	r1, r3
 8004d62:	480d      	ldr	r0, [pc, #52]	; (8004d98 <MX_GPIO_Init+0x120>)
 8004d64:	f001 fdc0 	bl	80068e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor1_INA_Pin|Motor1_INB_Pin|Motor2_INA_Pin|Motor2_INB_Pin;
 8004d68:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d76:	2302      	movs	r3, #2
 8004d78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d7a:	f107 0310 	add.w	r3, r7, #16
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4805      	ldr	r0, [pc, #20]	; (8004d98 <MX_GPIO_Init+0x120>)
 8004d82:	f001 fdb1 	bl	80068e8 <HAL_GPIO_Init>

}
 8004d86:	bf00      	nop
 8004d88:	3720      	adds	r7, #32
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40021000 	.word	0x40021000
 8004d94:	40011000 	.word	0x40011000
 8004d98:	40010c00 	.word	0x40010c00
 8004d9c:	40010800 	.word	0x40010800

08004da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004da0:	b5b0      	push	{r4, r5, r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004da6:	f001 f88b 	bl	8005ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004daa:	f000 f8c1 	bl	8004f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004dae:	f7ff ff63 	bl	8004c78 <MX_GPIO_Init>
  MX_DMA_Init();
 8004db2:	f7ff ff2b 	bl	8004c0c <MX_DMA_Init>
  MX_TIM2_Init();
 8004db6:	f000 fdbb 	bl	8005930 <MX_TIM2_Init>
  MX_ADC1_Init();
 8004dba:	f7ff fe4f 	bl	8004a5c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8004dbe:	f000 ffe3 	bl	8005d88 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8004dc2:	f7ff fef1 	bl	8004ba8 <MX_CRC_Init>
  MX_TIM1_Init();
 8004dc6:	f000 fd61 	bl	800588c <MX_TIM1_Init>
  MX_TIM3_Init();
 8004dca:	f000 fe31 	bl	8005a30 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004dce:	f000 fe83 	bl	8005ad8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8004dd2:	484b      	ldr	r0, [pc, #300]	; (8004f00 <main+0x160>)
 8004dd4:	f002 fbf7 	bl	80075c6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004dd8:	2100      	movs	r1, #0
 8004dda:	484a      	ldr	r0, [pc, #296]	; (8004f04 <main+0x164>)
 8004ddc:	f002 fc4a 	bl	8007674 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004de0:	2104      	movs	r1, #4
 8004de2:	4848      	ldr	r0, [pc, #288]	; (8004f04 <main+0x164>)
 8004de4:	f002 fc46 	bl	8007674 <HAL_TIM_PWM_Start>
	//HAL_TIM_Base_Start_IT(&htim3);
	//HAL_TIM_Base_Start(&htim4);
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8004de8:	2100      	movs	r1, #0
 8004dea:	4847      	ldr	r0, [pc, #284]	; (8004f08 <main+0x168>)
 8004dec:	f002 fd02 	bl	80077f4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8004df0:	2104      	movs	r1, #4
 8004df2:	4845      	ldr	r0, [pc, #276]	; (8004f08 <main+0x168>)
 8004df4:	f002 fcfe 	bl	80077f4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4844      	ldr	r0, [pc, #272]	; (8004f0c <main+0x16c>)
 8004dfc:	f002 fcfa 	bl	80077f4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8004e00:	2104      	movs	r1, #4
 8004e02:	4842      	ldr	r0, [pc, #264]	; (8004f0c <main+0x16c>)
 8004e04:	f002 fcf6 	bl	80077f4 <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		i = HAL_GetTick();
 8004e08:	f001 f8d0 	bl	8005fac <HAL_GetTick>
 8004e0c:	60f8      	str	r0, [r7, #12]
		if ((i / 200) & 1) {
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4a3f      	ldr	r2, [pc, #252]	; (8004f10 <main+0x170>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	099b      	lsrs	r3, r3, #6
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d006      	beq.n	8004e2e <main+0x8e>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004e20:	2200      	movs	r2, #0
 8004e22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e26:	483b      	ldr	r0, [pc, #236]	; (8004f14 <main+0x174>)
 8004e28:	f001 feb8 	bl	8006b9c <HAL_GPIO_WritePin>
 8004e2c:	e005      	b.n	8004e3a <main+0x9a>
		} else {
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e34:	4837      	ldr	r0, [pc, #220]	; (8004f14 <main+0x174>)
 8004e36:	f001 feb1 	bl	8006b9c <HAL_GPIO_WritePin>
		}

		HAL_UART_Receive(&huart1, buffer, 10, 100);
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	2364      	movs	r3, #100	; 0x64
 8004e3e:	220a      	movs	r2, #10
 8004e40:	4835      	ldr	r0, [pc, #212]	; (8004f18 <main+0x178>)
 8004e42:	f003 fba1 	bl	8008588 <HAL_UART_Receive>

		switch (buffer[0]) {
 8004e46:	783b      	ldrb	r3, [r7, #0]
 8004e48:	2b73      	cmp	r3, #115	; 0x73
 8004e4a:	d027      	beq.n	8004e9c <main+0xfc>
 8004e4c:	2b73      	cmp	r3, #115	; 0x73
 8004e4e:	dc04      	bgt.n	8004e5a <main+0xba>
 8004e50:	2b42      	cmp	r3, #66	; 0x42
 8004e52:	d007      	beq.n	8004e64 <main+0xc4>
 8004e54:	2b62      	cmp	r3, #98	; 0x62
 8004e56:	d005      	beq.n	8004e64 <main+0xc4>
 8004e58:	e02b      	b.n	8004eb2 <main+0x112>
 8004e5a:	2b77      	cmp	r3, #119	; 0x77
 8004e5c:	d00c      	beq.n	8004e78 <main+0xd8>
 8004e5e:	2b78      	cmp	r3, #120	; 0x78
 8004e60:	d013      	beq.n	8004e8a <main+0xea>
 8004e62:	e026      	b.n	8004eb2 <main+0x112>
		case 'b':
		case 'B':
			HAL_UART_Transmit(&huart1,
 8004e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e68:	221c      	movs	r2, #28
 8004e6a:	492c      	ldr	r1, [pc, #176]	; (8004f1c <main+0x17c>)
 8004e6c:	482a      	ldr	r0, [pc, #168]	; (8004f18 <main+0x178>)
 8004e6e:	f003 faf2 	bl	8008456 <HAL_UART_Transmit>
					(uint8_t*) "\n\rJumping to bootloader...\n\r", 28, 1000);
			flash_jump_to_app();
 8004e72:	f7ff fee9 	bl	8004c48 <flash_jump_to_app>
			break;
 8004e76:	e01c      	b.n	8004eb2 <main+0x112>

		case 'w':
			MotorSetReference (1000, 1000);
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	4b28      	ldr	r3, [pc, #160]	; (8004f20 <main+0x180>)
 8004e7e:	f04f 0000 	mov.w	r0, #0
 8004e82:	4927      	ldr	r1, [pc, #156]	; (8004f20 <main+0x180>)
 8004e84:	f000 f944 	bl	8005110 <MotorSetReference>
			//Motor1SetPWM(16000);
			break;
 8004e88:	e013      	b.n	8004eb2 <main+0x112>

		case 'x':
			MotorSetReference (-1000, -1000);
 8004e8a:	a31b      	add	r3, pc, #108	; (adr r3, 8004ef8 <main+0x158>)
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	a119      	add	r1, pc, #100	; (adr r1, 8004ef8 <main+0x158>)
 8004e92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e96:	f000 f93b 	bl	8005110 <MotorSetReference>
			//Motor1SetPWM(-16000);
			break;
 8004e9a:	e00a      	b.n	8004eb2 <main+0x112>

		case 's':
			MotorSetReference (0, 0);
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	f04f 0000 	mov.w	r0, #0
 8004ea8:	f04f 0100 	mov.w	r1, #0
 8004eac:	f000 f930 	bl	8005110 <MotorSetReference>
			//Motor1SetPWM(0);
			break;
 8004eb0:	bf00      	nop
		}

		//sprintf (buffer, "M: %d %d\n\r", (int)HAL_GPIO_ReadPin(Motor2_EncoderA_GPIO_Port, Motor2_EncoderA_Pin), (int)HAL_GPIO_ReadPin(Motor2_EncoderB_GPIO_Port, Motor2_EncoderB_Pin));
		//sprintf (buffer, "M: %d %d\n\r", (int)motor1_position, (int)motor2_position);
		//sprintf (buffer, "M: %d %d\n\r", TIM3->CNT, TIM4->CNT);
		sprintf (buffer, "M: %d %d\n\r", (int)motor1_speed, (int)motor2_speed);
 8004eb2:	4b1c      	ldr	r3, [pc, #112]	; (8004f24 <main+0x184>)
 8004eb4:	cb18      	ldmia	r3, {r3, r4}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	4621      	mov	r1, r4
 8004eba:	f7ff fda7 	bl	8004a0c <__aeabi_d2iz>
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <main+0x188>)
 8004ec2:	cb18      	ldmia	r3, {r3, r4}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	f7ff fda0 	bl	8004a0c <__aeabi_d2iz>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4638      	mov	r0, r7
 8004ed0:	462a      	mov	r2, r5
 8004ed2:	4916      	ldr	r1, [pc, #88]	; (8004f2c <main+0x18c>)
 8004ed4:	f003 fd54 	bl	8008980 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8004ed8:	463b      	mov	r3, r7
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff f938 	bl	8004150 <strlen>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004eea:	480b      	ldr	r0, [pc, #44]	; (8004f18 <main+0x178>)
 8004eec:	f003 fab3 	bl	8008456 <HAL_UART_Transmit>
		i = HAL_GetTick();
 8004ef0:	e78a      	b.n	8004e08 <main+0x68>
 8004ef2:	bf00      	nop
 8004ef4:	f3af 8000 	nop.w
 8004ef8:	00000000 	.word	0x00000000
 8004efc:	c08f4000 	.word	0xc08f4000
 8004f00:	20000228 	.word	0x20000228
 8004f04:	20000268 	.word	0x20000268
 8004f08:	200001e8 	.word	0x200001e8
 8004f0c:	200001a8 	.word	0x200001a8
 8004f10:	51eb851f 	.word	0x51eb851f
 8004f14:	40011000 	.word	0x40011000
 8004f18:	200002a8 	.word	0x200002a8
 8004f1c:	080091bc 	.word	0x080091bc
 8004f20:	408f4000 	.word	0x408f4000
 8004f24:	20000170 	.word	0x20000170
 8004f28:	20000168 	.word	0x20000168
 8004f2c:	080091dc 	.word	0x080091dc

08004f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b094      	sub	sp, #80	; 0x50
 8004f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f3a:	2228      	movs	r2, #40	; 0x28
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f003 fd16 	bl	8008970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f44:	f107 0314 	add.w	r3, r7, #20
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f54:	1d3b      	adds	r3, r7, #4
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	605a      	str	r2, [r3, #4]
 8004f5c:	609a      	str	r2, [r3, #8]
 8004f5e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f60:	2301      	movs	r3, #1
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f72:	2302      	movs	r3, #2
 8004f74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004f7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f86:	4618      	mov	r0, r3
 8004f88:	f001 fe20 	bl	8006bcc <HAL_RCC_OscConfig>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004f92:	f000 f829 	bl	8004fe8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f96:	230f      	movs	r3, #15
 8004f98:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fa6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004fac:	f107 0314 	add.w	r3, r7, #20
 8004fb0:	2102      	movs	r1, #2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f002 f88a 	bl	80070cc <HAL_RCC_ClockConfig>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8004fbe:	f000 f813 	bl	8004fe8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fcc:	1d3b      	adds	r3, r7, #4
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f002 fa18 	bl	8007404 <HAL_RCCEx_PeriphCLKConfig>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004fda:	f000 f805 	bl	8004fe8 <Error_Handler>
  }
}
 8004fde:	bf00      	nop
 8004fe0:	3750      	adds	r7, #80	; 0x50
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004fec:	2200      	movs	r2, #0
 8004fee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ff2:	4802      	ldr	r0, [pc, #8]	; (8004ffc <Error_Handler+0x14>)
 8004ff4:	f001 fdd2 	bl	8006b9c <HAL_GPIO_WritePin>
	while (1)
 8004ff8:	e7fe      	b.n	8004ff8 <Error_Handler+0x10>
 8004ffa:	bf00      	nop
 8004ffc:	40011000 	.word	0x40011000

08005000 <Motor1SetPWM>:
volatile double motor1_error, motor2_error;
volatile double cnt1, cnt2;
volatile double P = 0.5, I = 0, D = 0;
volatile double Kv = 50;

void Motor1SetPWM(int pwm1) {
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	if (pwm1 > 0) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	dd10      	ble.n	8005030 <Motor1SetPWM+0x30>
		HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, GPIO_PIN_SET);
 800500e:	2201      	movs	r2, #1
 8005010:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005014:	481b      	ldr	r0, [pc, #108]	; (8005084 <Motor1SetPWM+0x84>)
 8005016:	f001 fdc1 	bl	8006b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, GPIO_PIN_RESET);
 800501a:	2200      	movs	r2, #0
 800501c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005020:	4818      	ldr	r0, [pc, #96]	; (8005084 <Motor1SetPWM+0x84>)
 8005022:	f001 fdbb 	bl	8006b9c <HAL_GPIO_WritePin>
		TIM2->CCR1 = pwm1;
 8005026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, GPIO_PIN_RESET);
		TIM2->CCR1 = 0;

	}
}
 800502e:	e024      	b.n	800507a <Motor1SetPWM+0x7a>
	} else if (pwm1 < 0) {
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	da11      	bge.n	800505a <Motor1SetPWM+0x5a>
		HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, GPIO_PIN_RESET);
 8005036:	2200      	movs	r2, #0
 8005038:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800503c:	4811      	ldr	r0, [pc, #68]	; (8005084 <Motor1SetPWM+0x84>)
 800503e:	f001 fdad 	bl	8006b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, GPIO_PIN_SET);
 8005042:	2201      	movs	r2, #1
 8005044:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005048:	480e      	ldr	r0, [pc, #56]	; (8005084 <Motor1SetPWM+0x84>)
 800504a:	f001 fda7 	bl	8006b9c <HAL_GPIO_WritePin>
		TIM2->CCR1 = -pwm1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	425a      	negs	r2, r3
 8005052:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005056:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005058:	e00f      	b.n	800507a <Motor1SetPWM+0x7a>
		HAL_GPIO_WritePin(Motor1_INA_GPIO_Port, Motor1_INA_Pin, GPIO_PIN_RESET);
 800505a:	2200      	movs	r2, #0
 800505c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005060:	4808      	ldr	r0, [pc, #32]	; (8005084 <Motor1SetPWM+0x84>)
 8005062:	f001 fd9b 	bl	8006b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor1_INB_GPIO_Port, Motor1_INB_Pin, GPIO_PIN_RESET);
 8005066:	2200      	movs	r2, #0
 8005068:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800506c:	4805      	ldr	r0, [pc, #20]	; (8005084 <Motor1SetPWM+0x84>)
 800506e:	f001 fd95 	bl	8006b9c <HAL_GPIO_WritePin>
		TIM2->CCR1 = 0;
 8005072:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005076:	2200      	movs	r2, #0
 8005078:	635a      	str	r2, [r3, #52]	; 0x34
}
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40010c00 	.word	0x40010c00

08005088 <Motor2SetPWM>:

void Motor2SetPWM(int pwm2) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	if (pwm2 > 0) {
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	dd10      	ble.n	80050b8 <Motor2SetPWM+0x30>
		HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, GPIO_PIN_SET);
 8005096:	2201      	movs	r2, #1
 8005098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800509c:	481b      	ldr	r0, [pc, #108]	; (800510c <Motor2SetPWM+0x84>)
 800509e:	f001 fd7d 	bl	8006b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, GPIO_PIN_RESET);
 80050a2:	2200      	movs	r2, #0
 80050a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050a8:	4818      	ldr	r0, [pc, #96]	; (800510c <Motor2SetPWM+0x84>)
 80050aa:	f001 fd77 	bl	8006b9c <HAL_GPIO_WritePin>
		TIM2->CCR2 = pwm2;
 80050ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, GPIO_PIN_RESET);
		TIM2->CCR2 = 0;

	}
}
 80050b6:	e024      	b.n	8005102 <Motor2SetPWM+0x7a>
	} else if (pwm2 < 0) {
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	da11      	bge.n	80050e2 <Motor2SetPWM+0x5a>
		HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, GPIO_PIN_RESET);
 80050be:	2200      	movs	r2, #0
 80050c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050c4:	4811      	ldr	r0, [pc, #68]	; (800510c <Motor2SetPWM+0x84>)
 80050c6:	f001 fd69 	bl	8006b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, GPIO_PIN_SET);
 80050ca:	2201      	movs	r2, #1
 80050cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050d0:	480e      	ldr	r0, [pc, #56]	; (800510c <Motor2SetPWM+0x84>)
 80050d2:	f001 fd63 	bl	8006b9c <HAL_GPIO_WritePin>
		TIM2->CCR2 = -pwm2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	425a      	negs	r2, r3
 80050da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050de:	639a      	str	r2, [r3, #56]	; 0x38
}
 80050e0:	e00f      	b.n	8005102 <Motor2SetPWM+0x7a>
		HAL_GPIO_WritePin(Motor2_INA_GPIO_Port, Motor2_INA_Pin, GPIO_PIN_RESET);
 80050e2:	2200      	movs	r2, #0
 80050e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050e8:	4808      	ldr	r0, [pc, #32]	; (800510c <Motor2SetPWM+0x84>)
 80050ea:	f001 fd57 	bl	8006b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor2_INB_GPIO_Port, Motor2_INB_Pin, GPIO_PIN_RESET);
 80050ee:	2200      	movs	r2, #0
 80050f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050f4:	4805      	ldr	r0, [pc, #20]	; (800510c <Motor2SetPWM+0x84>)
 80050f6:	f001 fd51 	bl	8006b9c <HAL_GPIO_WritePin>
		TIM2->CCR2 = 0;
 80050fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050fe:	2200      	movs	r2, #0
 8005100:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005102:	bf00      	nop
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40010c00 	.word	0x40010c00

08005110 <MotorSetReference>:

void MotorSetReference(double ref1, double ref2) {
 8005110:	b490      	push	{r4, r7}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800511a:	e9c7 2300 	strd	r2, r3, [r7]
	motor1_ref = ref1;
 800511e:	4a07      	ldr	r2, [pc, #28]	; (800513c <MotorSetReference+0x2c>)
 8005120:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005124:	e9c2 3400 	strd	r3, r4, [r2]
	motor2_ref = ref2;
 8005128:	4a05      	ldr	r2, [pc, #20]	; (8005140 <MotorSetReference+0x30>)
 800512a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800512e:	e9c2 3400 	strd	r3, r4, [r2]
}
 8005132:	bf00      	nop
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bc90      	pop	{r4, r7}
 800513a:	4770      	bx	lr
 800513c:	20000150 	.word	0x20000150
 8005140:	20000180 	.word	0x20000180
 8005144:	00000000 	.word	0x00000000

08005148 <MotorSpeedControl>:

#define TIME_INTERVAL 0.05
void MotorSpeedControl(void) {
 8005148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
	int pwm1, pwm2, deriv1 = 0, deriv2 = 0;
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	2300      	movs	r3, #0
 8005154:	60bb      	str	r3, [r7, #8]
	cnt1 = (int32_t)TIM3->CNT;
 8005156:	4bac      	ldr	r3, [pc, #688]	; (8005408 <MotorSpeedControl+0x2c0>)
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff f952 	bl	8004404 <__aeabi_i2d>
 8005160:	4603      	mov	r3, r0
 8005162:	460c      	mov	r4, r1
 8005164:	4aa9      	ldr	r2, [pc, #676]	; (800540c <MotorSpeedControl+0x2c4>)
 8005166:	e9c2 3400 	strd	r3, r4, [r2]
	cnt2 = (int32_t)TIM4->CNT;
 800516a:	4ba9      	ldr	r3, [pc, #676]	; (8005410 <MotorSpeedControl+0x2c8>)
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff f948 	bl	8004404 <__aeabi_i2d>
 8005174:	4603      	mov	r3, r0
 8005176:	460c      	mov	r4, r1
 8005178:	4aa6      	ldr	r2, [pc, #664]	; (8005414 <MotorSpeedControl+0x2cc>)
 800517a:	e9c2 3400 	strd	r3, r4, [r2]
	TIM3->CNT = 0;
 800517e:	4ba2      	ldr	r3, [pc, #648]	; (8005408 <MotorSpeedControl+0x2c0>)
 8005180:	2200      	movs	r2, #0
 8005182:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 0;
 8005184:	4ba2      	ldr	r3, [pc, #648]	; (8005410 <MotorSpeedControl+0x2c8>)
 8005186:	2200      	movs	r2, #0
 8005188:	625a      	str	r2, [r3, #36]	; 0x24
	//cnt1 *= motor1_dir;
	//cnt2 *= motor2_dir;
	motor1_speed = cnt1 / TIME_INTERVAL;
 800518a:	4ba0      	ldr	r3, [pc, #640]	; (800540c <MotorSpeedControl+0x2c4>)
 800518c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005190:	a39b      	add	r3, pc, #620	; (adr r3, 8005400 <MotorSpeedControl+0x2b8>)
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f7ff fac9 	bl	800472c <__aeabi_ddiv>
 800519a:	4603      	mov	r3, r0
 800519c:	460c      	mov	r4, r1
 800519e:	4a9e      	ldr	r2, [pc, #632]	; (8005418 <MotorSpeedControl+0x2d0>)
 80051a0:	e9c2 3400 	strd	r3, r4, [r2]
	motor2_speed = cnt2 / TIME_INTERVAL;
 80051a4:	4b9b      	ldr	r3, [pc, #620]	; (8005414 <MotorSpeedControl+0x2cc>)
 80051a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051aa:	a395      	add	r3, pc, #596	; (adr r3, 8005400 <MotorSpeedControl+0x2b8>)
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f7ff fabc 	bl	800472c <__aeabi_ddiv>
 80051b4:	4603      	mov	r3, r0
 80051b6:	460c      	mov	r4, r1
 80051b8:	4a98      	ldr	r2, [pc, #608]	; (800541c <MotorSpeedControl+0x2d4>)
 80051ba:	e9c2 3400 	strd	r3, r4, [r2]
	motor1_position += cnt1;
 80051be:	4b93      	ldr	r3, [pc, #588]	; (800540c <MotorSpeedControl+0x2c4>)
 80051c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051c4:	4b96      	ldr	r3, [pc, #600]	; (8005420 <MotorSpeedControl+0x2d8>)
 80051c6:	cb18      	ldmia	r3, {r3, r4}
 80051c8:	461a      	mov	r2, r3
 80051ca:	4623      	mov	r3, r4
 80051cc:	f7fe ffce 	bl	800416c <__adddf3>
 80051d0:	4603      	mov	r3, r0
 80051d2:	460c      	mov	r4, r1
 80051d4:	4a92      	ldr	r2, [pc, #584]	; (8005420 <MotorSpeedControl+0x2d8>)
 80051d6:	e9c2 3400 	strd	r3, r4, [r2]
	motor2_position += cnt2;
 80051da:	4b8e      	ldr	r3, [pc, #568]	; (8005414 <MotorSpeedControl+0x2cc>)
 80051dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051e0:	4b90      	ldr	r3, [pc, #576]	; (8005424 <MotorSpeedControl+0x2dc>)
 80051e2:	cb18      	ldmia	r3, {r3, r4}
 80051e4:	461a      	mov	r2, r3
 80051e6:	4623      	mov	r3, r4
 80051e8:	f7fe ffc0 	bl	800416c <__adddf3>
 80051ec:	4603      	mov	r3, r0
 80051ee:	460c      	mov	r4, r1
 80051f0:	4a8c      	ldr	r2, [pc, #560]	; (8005424 <MotorSpeedControl+0x2dc>)
 80051f2:	e9c2 3400 	strd	r3, r4, [r2]

	deriv1 = (motor1_speed - motor1_speed_old) / TIME_INTERVAL;
 80051f6:	4b88      	ldr	r3, [pc, #544]	; (8005418 <MotorSpeedControl+0x2d0>)
 80051f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051fc:	4b8a      	ldr	r3, [pc, #552]	; (8005428 <MotorSpeedControl+0x2e0>)
 80051fe:	cb18      	ldmia	r3, {r3, r4}
 8005200:	461a      	mov	r2, r3
 8005202:	4623      	mov	r3, r4
 8005204:	f7fe ffb0 	bl	8004168 <__aeabi_dsub>
 8005208:	4603      	mov	r3, r0
 800520a:	460c      	mov	r4, r1
 800520c:	4618      	mov	r0, r3
 800520e:	4621      	mov	r1, r4
 8005210:	a37b      	add	r3, pc, #492	; (adr r3, 8005400 <MotorSpeedControl+0x2b8>)
 8005212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005216:	f7ff fa89 	bl	800472c <__aeabi_ddiv>
 800521a:	4603      	mov	r3, r0
 800521c:	460c      	mov	r4, r1
 800521e:	4618      	mov	r0, r3
 8005220:	4621      	mov	r1, r4
 8005222:	f7ff fbf3 	bl	8004a0c <__aeabi_d2iz>
 8005226:	4603      	mov	r3, r0
 8005228:	60fb      	str	r3, [r7, #12]
	deriv2 = (motor2_speed - motor2_speed_old) / TIME_INTERVAL;
 800522a:	4b7c      	ldr	r3, [pc, #496]	; (800541c <MotorSpeedControl+0x2d4>)
 800522c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005230:	4b7e      	ldr	r3, [pc, #504]	; (800542c <MotorSpeedControl+0x2e4>)
 8005232:	cb18      	ldmia	r3, {r3, r4}
 8005234:	461a      	mov	r2, r3
 8005236:	4623      	mov	r3, r4
 8005238:	f7fe ff96 	bl	8004168 <__aeabi_dsub>
 800523c:	4603      	mov	r3, r0
 800523e:	460c      	mov	r4, r1
 8005240:	4618      	mov	r0, r3
 8005242:	4621      	mov	r1, r4
 8005244:	a36e      	add	r3, pc, #440	; (adr r3, 8005400 <MotorSpeedControl+0x2b8>)
 8005246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524a:	f7ff fa6f 	bl	800472c <__aeabi_ddiv>
 800524e:	4603      	mov	r3, r0
 8005250:	460c      	mov	r4, r1
 8005252:	4618      	mov	r0, r3
 8005254:	4621      	mov	r1, r4
 8005256:	f7ff fbd9 	bl	8004a0c <__aeabi_d2iz>
 800525a:	4603      	mov	r3, r0
 800525c:	60bb      	str	r3, [r7, #8]

	motor1_speed_old = motor1_speed;
 800525e:	4b6e      	ldr	r3, [pc, #440]	; (8005418 <MotorSpeedControl+0x2d0>)
 8005260:	cb18      	ldmia	r3, {r3, r4}
 8005262:	4a71      	ldr	r2, [pc, #452]	; (8005428 <MotorSpeedControl+0x2e0>)
 8005264:	e9c2 3400 	strd	r3, r4, [r2]
	motor2_speed_old = motor2_speed;
 8005268:	4b6c      	ldr	r3, [pc, #432]	; (800541c <MotorSpeedControl+0x2d4>)
 800526a:	cb18      	ldmia	r3, {r3, r4}
 800526c:	4a6f      	ldr	r2, [pc, #444]	; (800542c <MotorSpeedControl+0x2e4>)
 800526e:	e9c2 3400 	strd	r3, r4, [r2]

	// controle PID Motor1
	motor1_error = motor1_ref - motor1_speed;
 8005272:	4b6f      	ldr	r3, [pc, #444]	; (8005430 <MotorSpeedControl+0x2e8>)
 8005274:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005278:	4b67      	ldr	r3, [pc, #412]	; (8005418 <MotorSpeedControl+0x2d0>)
 800527a:	cb18      	ldmia	r3, {r3, r4}
 800527c:	461a      	mov	r2, r3
 800527e:	4623      	mov	r3, r4
 8005280:	f7fe ff72 	bl	8004168 <__aeabi_dsub>
 8005284:	4603      	mov	r3, r0
 8005286:	460c      	mov	r4, r1
 8005288:	4a6a      	ldr	r2, [pc, #424]	; (8005434 <MotorSpeedControl+0x2ec>)
 800528a:	e9c2 3400 	strd	r3, r4, [r2]
	motor1_integration += motor1_error * TIME_INTERVAL;
 800528e:	4b69      	ldr	r3, [pc, #420]	; (8005434 <MotorSpeedControl+0x2ec>)
 8005290:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005294:	a35a      	add	r3, pc, #360	; (adr r3, 8005400 <MotorSpeedControl+0x2b8>)
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	f7ff f91d 	bl	80044d8 <__aeabi_dmul>
 800529e:	4603      	mov	r3, r0
 80052a0:	460c      	mov	r4, r1
 80052a2:	4618      	mov	r0, r3
 80052a4:	4621      	mov	r1, r4
 80052a6:	4b64      	ldr	r3, [pc, #400]	; (8005438 <MotorSpeedControl+0x2f0>)
 80052a8:	cb18      	ldmia	r3, {r3, r4}
 80052aa:	461a      	mov	r2, r3
 80052ac:	4623      	mov	r3, r4
 80052ae:	f7fe ff5d 	bl	800416c <__adddf3>
 80052b2:	4603      	mov	r3, r0
 80052b4:	460c      	mov	r4, r1
 80052b6:	4a60      	ldr	r2, [pc, #384]	; (8005438 <MotorSpeedControl+0x2f0>)
 80052b8:	e9c2 3400 	strd	r3, r4, [r2]
	pwm1 = ((motor1_integration * I) + (motor1_error * P) + (deriv1 * D)) * Kv;
 80052bc:	4b5e      	ldr	r3, [pc, #376]	; (8005438 <MotorSpeedControl+0x2f0>)
 80052be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052c2:	4b5e      	ldr	r3, [pc, #376]	; (800543c <MotorSpeedControl+0x2f4>)
 80052c4:	cb18      	ldmia	r3, {r3, r4}
 80052c6:	461a      	mov	r2, r3
 80052c8:	4623      	mov	r3, r4
 80052ca:	f7ff f905 	bl	80044d8 <__aeabi_dmul>
 80052ce:	4603      	mov	r3, r0
 80052d0:	460c      	mov	r4, r1
 80052d2:	461d      	mov	r5, r3
 80052d4:	4626      	mov	r6, r4
 80052d6:	4b57      	ldr	r3, [pc, #348]	; (8005434 <MotorSpeedControl+0x2ec>)
 80052d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052dc:	4b58      	ldr	r3, [pc, #352]	; (8005440 <MotorSpeedControl+0x2f8>)
 80052de:	cb18      	ldmia	r3, {r3, r4}
 80052e0:	461a      	mov	r2, r3
 80052e2:	4623      	mov	r3, r4
 80052e4:	f7ff f8f8 	bl	80044d8 <__aeabi_dmul>
 80052e8:	4603      	mov	r3, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	461a      	mov	r2, r3
 80052ee:	4623      	mov	r3, r4
 80052f0:	4628      	mov	r0, r5
 80052f2:	4631      	mov	r1, r6
 80052f4:	f7fe ff3a 	bl	800416c <__adddf3>
 80052f8:	4603      	mov	r3, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	461d      	mov	r5, r3
 80052fe:	4626      	mov	r6, r4
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7ff f87f 	bl	8004404 <__aeabi_i2d>
 8005306:	4b4f      	ldr	r3, [pc, #316]	; (8005444 <MotorSpeedControl+0x2fc>)
 8005308:	cb18      	ldmia	r3, {r3, r4}
 800530a:	461a      	mov	r2, r3
 800530c:	4623      	mov	r3, r4
 800530e:	f7ff f8e3 	bl	80044d8 <__aeabi_dmul>
 8005312:	4603      	mov	r3, r0
 8005314:	460c      	mov	r4, r1
 8005316:	461a      	mov	r2, r3
 8005318:	4623      	mov	r3, r4
 800531a:	4628      	mov	r0, r5
 800531c:	4631      	mov	r1, r6
 800531e:	f7fe ff25 	bl	800416c <__adddf3>
 8005322:	4603      	mov	r3, r0
 8005324:	460c      	mov	r4, r1
 8005326:	4618      	mov	r0, r3
 8005328:	4621      	mov	r1, r4
 800532a:	4b47      	ldr	r3, [pc, #284]	; (8005448 <MotorSpeedControl+0x300>)
 800532c:	cb18      	ldmia	r3, {r3, r4}
 800532e:	461a      	mov	r2, r3
 8005330:	4623      	mov	r3, r4
 8005332:	f7ff f8d1 	bl	80044d8 <__aeabi_dmul>
 8005336:	4603      	mov	r3, r0
 8005338:	460c      	mov	r4, r1
 800533a:	4618      	mov	r0, r3
 800533c:	4621      	mov	r1, r4
 800533e:	f7ff fb65 	bl	8004a0c <__aeabi_d2iz>
 8005342:	4603      	mov	r3, r0
 8005344:	607b      	str	r3, [r7, #4]

	motor1_error = motor1_ref - motor1_speed;
 8005346:	4b3a      	ldr	r3, [pc, #232]	; (8005430 <MotorSpeedControl+0x2e8>)
 8005348:	e9d3 0100 	ldrd	r0, r1, [r3]
 800534c:	4b32      	ldr	r3, [pc, #200]	; (8005418 <MotorSpeedControl+0x2d0>)
 800534e:	cb18      	ldmia	r3, {r3, r4}
 8005350:	461a      	mov	r2, r3
 8005352:	4623      	mov	r3, r4
 8005354:	f7fe ff08 	bl	8004168 <__aeabi_dsub>
 8005358:	4603      	mov	r3, r0
 800535a:	460c      	mov	r4, r1
 800535c:	4a35      	ldr	r2, [pc, #212]	; (8005434 <MotorSpeedControl+0x2ec>)
 800535e:	e9c2 3400 	strd	r3, r4, [r2]
	motor1_integration += motor1_error * TIME_INTERVAL;
 8005362:	4b34      	ldr	r3, [pc, #208]	; (8005434 <MotorSpeedControl+0x2ec>)
 8005364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005368:	a325      	add	r3, pc, #148	; (adr r3, 8005400 <MotorSpeedControl+0x2b8>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f7ff f8b3 	bl	80044d8 <__aeabi_dmul>
 8005372:	4603      	mov	r3, r0
 8005374:	460c      	mov	r4, r1
 8005376:	4618      	mov	r0, r3
 8005378:	4621      	mov	r1, r4
 800537a:	4b2f      	ldr	r3, [pc, #188]	; (8005438 <MotorSpeedControl+0x2f0>)
 800537c:	cb18      	ldmia	r3, {r3, r4}
 800537e:	461a      	mov	r2, r3
 8005380:	4623      	mov	r3, r4
 8005382:	f7fe fef3 	bl	800416c <__adddf3>
 8005386:	4603      	mov	r3, r0
 8005388:	460c      	mov	r4, r1
 800538a:	4a2b      	ldr	r2, [pc, #172]	; (8005438 <MotorSpeedControl+0x2f0>)
 800538c:	e9c2 3400 	strd	r3, r4, [r2]
	pwm1 = ((motor1_integration * I) + (motor1_error * P) + (deriv1 * D)) * Kv;
 8005390:	4b29      	ldr	r3, [pc, #164]	; (8005438 <MotorSpeedControl+0x2f0>)
 8005392:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005396:	4b29      	ldr	r3, [pc, #164]	; (800543c <MotorSpeedControl+0x2f4>)
 8005398:	cb18      	ldmia	r3, {r3, r4}
 800539a:	461a      	mov	r2, r3
 800539c:	4623      	mov	r3, r4
 800539e:	f7ff f89b 	bl	80044d8 <__aeabi_dmul>
 80053a2:	4603      	mov	r3, r0
 80053a4:	460c      	mov	r4, r1
 80053a6:	461d      	mov	r5, r3
 80053a8:	4626      	mov	r6, r4
 80053aa:	4b22      	ldr	r3, [pc, #136]	; (8005434 <MotorSpeedControl+0x2ec>)
 80053ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053b0:	4b23      	ldr	r3, [pc, #140]	; (8005440 <MotorSpeedControl+0x2f8>)
 80053b2:	cb18      	ldmia	r3, {r3, r4}
 80053b4:	461a      	mov	r2, r3
 80053b6:	4623      	mov	r3, r4
 80053b8:	f7ff f88e 	bl	80044d8 <__aeabi_dmul>
 80053bc:	4603      	mov	r3, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	461a      	mov	r2, r3
 80053c2:	4623      	mov	r3, r4
 80053c4:	4628      	mov	r0, r5
 80053c6:	4631      	mov	r1, r6
 80053c8:	f7fe fed0 	bl	800416c <__adddf3>
 80053cc:	4603      	mov	r3, r0
 80053ce:	460c      	mov	r4, r1
 80053d0:	461d      	mov	r5, r3
 80053d2:	4626      	mov	r6, r4
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f7ff f815 	bl	8004404 <__aeabi_i2d>
 80053da:	4b1a      	ldr	r3, [pc, #104]	; (8005444 <MotorSpeedControl+0x2fc>)
 80053dc:	cb18      	ldmia	r3, {r3, r4}
 80053de:	461a      	mov	r2, r3
 80053e0:	4623      	mov	r3, r4
 80053e2:	f7ff f879 	bl	80044d8 <__aeabi_dmul>
 80053e6:	4603      	mov	r3, r0
 80053e8:	460c      	mov	r4, r1
 80053ea:	461a      	mov	r2, r3
 80053ec:	4623      	mov	r3, r4
 80053ee:	4628      	mov	r0, r5
 80053f0:	4631      	mov	r1, r6
 80053f2:	f7fe febb 	bl	800416c <__adddf3>
 80053f6:	4603      	mov	r3, r0
 80053f8:	e028      	b.n	800544c <MotorSpeedControl+0x304>
 80053fa:	bf00      	nop
 80053fc:	f3af 8000 	nop.w
 8005400:	9999999a 	.word	0x9999999a
 8005404:	3fa99999 	.word	0x3fa99999
 8005408:	40000400 	.word	0x40000400
 800540c:	20000198 	.word	0x20000198
 8005410:	40000800 	.word	0x40000800
 8005414:	20000140 	.word	0x20000140
 8005418:	20000170 	.word	0x20000170
 800541c:	20000168 	.word	0x20000168
 8005420:	20000190 	.word	0x20000190
 8005424:	200001a0 	.word	0x200001a0
 8005428:	20000148 	.word	0x20000148
 800542c:	20000158 	.word	0x20000158
 8005430:	20000150 	.word	0x20000150
 8005434:	20000160 	.word	0x20000160
 8005438:	20000188 	.word	0x20000188
 800543c:	200000a0 	.word	0x200000a0
 8005440:	20000000 	.word	0x20000000
 8005444:	200000a8 	.word	0x200000a8
 8005448:	20000008 	.word	0x20000008
 800544c:	460c      	mov	r4, r1
 800544e:	4618      	mov	r0, r3
 8005450:	4621      	mov	r1, r4
 8005452:	4b97      	ldr	r3, [pc, #604]	; (80056b0 <MotorSpeedControl+0x568>)
 8005454:	cb18      	ldmia	r3, {r3, r4}
 8005456:	461a      	mov	r2, r3
 8005458:	4623      	mov	r3, r4
 800545a:	f7ff f83d 	bl	80044d8 <__aeabi_dmul>
 800545e:	4603      	mov	r3, r0
 8005460:	460c      	mov	r4, r1
 8005462:	4618      	mov	r0, r3
 8005464:	4621      	mov	r1, r4
 8005466:	f7ff fad1 	bl	8004a0c <__aeabi_d2iz>
 800546a:	4603      	mov	r3, r0
 800546c:	607b      	str	r3, [r7, #4]

	// controle PID Motor2
	motor2_error = motor2_ref - motor2_speed;
 800546e:	4b91      	ldr	r3, [pc, #580]	; (80056b4 <MotorSpeedControl+0x56c>)
 8005470:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005474:	4b90      	ldr	r3, [pc, #576]	; (80056b8 <MotorSpeedControl+0x570>)
 8005476:	cb18      	ldmia	r3, {r3, r4}
 8005478:	461a      	mov	r2, r3
 800547a:	4623      	mov	r3, r4
 800547c:	f7fe fe74 	bl	8004168 <__aeabi_dsub>
 8005480:	4603      	mov	r3, r0
 8005482:	460c      	mov	r4, r1
 8005484:	4a8d      	ldr	r2, [pc, #564]	; (80056bc <MotorSpeedControl+0x574>)
 8005486:	e9c2 3400 	strd	r3, r4, [r2]
	motor2_integration += motor2_error;
 800548a:	4b8c      	ldr	r3, [pc, #560]	; (80056bc <MotorSpeedControl+0x574>)
 800548c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005490:	4b8b      	ldr	r3, [pc, #556]	; (80056c0 <MotorSpeedControl+0x578>)
 8005492:	cb18      	ldmia	r3, {r3, r4}
 8005494:	461a      	mov	r2, r3
 8005496:	4623      	mov	r3, r4
 8005498:	f7fe fe68 	bl	800416c <__adddf3>
 800549c:	4603      	mov	r3, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	4a87      	ldr	r2, [pc, #540]	; (80056c0 <MotorSpeedControl+0x578>)
 80054a2:	e9c2 3400 	strd	r3, r4, [r2]
	pwm2 = ((motor2_integration * I) + (motor2_error * P) + (deriv2 * D)) * Kv;
 80054a6:	4b86      	ldr	r3, [pc, #536]	; (80056c0 <MotorSpeedControl+0x578>)
 80054a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054ac:	4b85      	ldr	r3, [pc, #532]	; (80056c4 <MotorSpeedControl+0x57c>)
 80054ae:	cb18      	ldmia	r3, {r3, r4}
 80054b0:	461a      	mov	r2, r3
 80054b2:	4623      	mov	r3, r4
 80054b4:	f7ff f810 	bl	80044d8 <__aeabi_dmul>
 80054b8:	4603      	mov	r3, r0
 80054ba:	460c      	mov	r4, r1
 80054bc:	461d      	mov	r5, r3
 80054be:	4626      	mov	r6, r4
 80054c0:	4b7e      	ldr	r3, [pc, #504]	; (80056bc <MotorSpeedControl+0x574>)
 80054c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054c6:	4b80      	ldr	r3, [pc, #512]	; (80056c8 <MotorSpeedControl+0x580>)
 80054c8:	cb18      	ldmia	r3, {r3, r4}
 80054ca:	461a      	mov	r2, r3
 80054cc:	4623      	mov	r3, r4
 80054ce:	f7ff f803 	bl	80044d8 <__aeabi_dmul>
 80054d2:	4603      	mov	r3, r0
 80054d4:	460c      	mov	r4, r1
 80054d6:	461a      	mov	r2, r3
 80054d8:	4623      	mov	r3, r4
 80054da:	4628      	mov	r0, r5
 80054dc:	4631      	mov	r1, r6
 80054de:	f7fe fe45 	bl	800416c <__adddf3>
 80054e2:	4603      	mov	r3, r0
 80054e4:	460c      	mov	r4, r1
 80054e6:	461d      	mov	r5, r3
 80054e8:	4626      	mov	r6, r4
 80054ea:	68b8      	ldr	r0, [r7, #8]
 80054ec:	f7fe ff8a 	bl	8004404 <__aeabi_i2d>
 80054f0:	4b76      	ldr	r3, [pc, #472]	; (80056cc <MotorSpeedControl+0x584>)
 80054f2:	cb18      	ldmia	r3, {r3, r4}
 80054f4:	461a      	mov	r2, r3
 80054f6:	4623      	mov	r3, r4
 80054f8:	f7fe ffee 	bl	80044d8 <__aeabi_dmul>
 80054fc:	4603      	mov	r3, r0
 80054fe:	460c      	mov	r4, r1
 8005500:	461a      	mov	r2, r3
 8005502:	4623      	mov	r3, r4
 8005504:	4628      	mov	r0, r5
 8005506:	4631      	mov	r1, r6
 8005508:	f7fe fe30 	bl	800416c <__adddf3>
 800550c:	4603      	mov	r3, r0
 800550e:	460c      	mov	r4, r1
 8005510:	4618      	mov	r0, r3
 8005512:	4621      	mov	r1, r4
 8005514:	4b66      	ldr	r3, [pc, #408]	; (80056b0 <MotorSpeedControl+0x568>)
 8005516:	cb18      	ldmia	r3, {r3, r4}
 8005518:	461a      	mov	r2, r3
 800551a:	4623      	mov	r3, r4
 800551c:	f7fe ffdc 	bl	80044d8 <__aeabi_dmul>
 8005520:	4603      	mov	r3, r0
 8005522:	460c      	mov	r4, r1
 8005524:	4618      	mov	r0, r3
 8005526:	4621      	mov	r1, r4
 8005528:	f7ff fa70 	bl	8004a0c <__aeabi_d2iz>
 800552c:	4603      	mov	r3, r0
 800552e:	603b      	str	r3, [r7, #0]

	motor2_error = motor2_ref - motor2_speed;
 8005530:	4b60      	ldr	r3, [pc, #384]	; (80056b4 <MotorSpeedControl+0x56c>)
 8005532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005536:	4b60      	ldr	r3, [pc, #384]	; (80056b8 <MotorSpeedControl+0x570>)
 8005538:	cb18      	ldmia	r3, {r3, r4}
 800553a:	461a      	mov	r2, r3
 800553c:	4623      	mov	r3, r4
 800553e:	f7fe fe13 	bl	8004168 <__aeabi_dsub>
 8005542:	4603      	mov	r3, r0
 8005544:	460c      	mov	r4, r1
 8005546:	4a5d      	ldr	r2, [pc, #372]	; (80056bc <MotorSpeedControl+0x574>)
 8005548:	e9c2 3400 	strd	r3, r4, [r2]
	motor2_integration += motor2_error;
 800554c:	4b5b      	ldr	r3, [pc, #364]	; (80056bc <MotorSpeedControl+0x574>)
 800554e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005552:	4b5b      	ldr	r3, [pc, #364]	; (80056c0 <MotorSpeedControl+0x578>)
 8005554:	cb18      	ldmia	r3, {r3, r4}
 8005556:	461a      	mov	r2, r3
 8005558:	4623      	mov	r3, r4
 800555a:	f7fe fe07 	bl	800416c <__adddf3>
 800555e:	4603      	mov	r3, r0
 8005560:	460c      	mov	r4, r1
 8005562:	4a57      	ldr	r2, [pc, #348]	; (80056c0 <MotorSpeedControl+0x578>)
 8005564:	e9c2 3400 	strd	r3, r4, [r2]
	pwm2 = ((motor2_integration * I) + (motor2_error * P) + (deriv2 * D)) * Kv;
 8005568:	4b55      	ldr	r3, [pc, #340]	; (80056c0 <MotorSpeedControl+0x578>)
 800556a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800556e:	4b55      	ldr	r3, [pc, #340]	; (80056c4 <MotorSpeedControl+0x57c>)
 8005570:	cb18      	ldmia	r3, {r3, r4}
 8005572:	461a      	mov	r2, r3
 8005574:	4623      	mov	r3, r4
 8005576:	f7fe ffaf 	bl	80044d8 <__aeabi_dmul>
 800557a:	4603      	mov	r3, r0
 800557c:	460c      	mov	r4, r1
 800557e:	461d      	mov	r5, r3
 8005580:	4626      	mov	r6, r4
 8005582:	4b4e      	ldr	r3, [pc, #312]	; (80056bc <MotorSpeedControl+0x574>)
 8005584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005588:	4b4f      	ldr	r3, [pc, #316]	; (80056c8 <MotorSpeedControl+0x580>)
 800558a:	cb18      	ldmia	r3, {r3, r4}
 800558c:	461a      	mov	r2, r3
 800558e:	4623      	mov	r3, r4
 8005590:	f7fe ffa2 	bl	80044d8 <__aeabi_dmul>
 8005594:	4603      	mov	r3, r0
 8005596:	460c      	mov	r4, r1
 8005598:	461a      	mov	r2, r3
 800559a:	4623      	mov	r3, r4
 800559c:	4628      	mov	r0, r5
 800559e:	4631      	mov	r1, r6
 80055a0:	f7fe fde4 	bl	800416c <__adddf3>
 80055a4:	4603      	mov	r3, r0
 80055a6:	460c      	mov	r4, r1
 80055a8:	461d      	mov	r5, r3
 80055aa:	4626      	mov	r6, r4
 80055ac:	68b8      	ldr	r0, [r7, #8]
 80055ae:	f7fe ff29 	bl	8004404 <__aeabi_i2d>
 80055b2:	4b46      	ldr	r3, [pc, #280]	; (80056cc <MotorSpeedControl+0x584>)
 80055b4:	cb18      	ldmia	r3, {r3, r4}
 80055b6:	461a      	mov	r2, r3
 80055b8:	4623      	mov	r3, r4
 80055ba:	f7fe ff8d 	bl	80044d8 <__aeabi_dmul>
 80055be:	4603      	mov	r3, r0
 80055c0:	460c      	mov	r4, r1
 80055c2:	461a      	mov	r2, r3
 80055c4:	4623      	mov	r3, r4
 80055c6:	4628      	mov	r0, r5
 80055c8:	4631      	mov	r1, r6
 80055ca:	f7fe fdcf 	bl	800416c <__adddf3>
 80055ce:	4603      	mov	r3, r0
 80055d0:	460c      	mov	r4, r1
 80055d2:	4618      	mov	r0, r3
 80055d4:	4621      	mov	r1, r4
 80055d6:	4b36      	ldr	r3, [pc, #216]	; (80056b0 <MotorSpeedControl+0x568>)
 80055d8:	cb18      	ldmia	r3, {r3, r4}
 80055da:	461a      	mov	r2, r3
 80055dc:	4623      	mov	r3, r4
 80055de:	f7fe ff7b 	bl	80044d8 <__aeabi_dmul>
 80055e2:	4603      	mov	r3, r0
 80055e4:	460c      	mov	r4, r1
 80055e6:	4618      	mov	r0, r3
 80055e8:	4621      	mov	r1, r4
 80055ea:	f7ff fa0f 	bl	8004a0c <__aeabi_d2iz>
 80055ee:	4603      	mov	r3, r0
 80055f0:	603b      	str	r3, [r7, #0]

	// Set PWM
	if ((motor1_ref == 0) && (motor1_speed == 0)) {
 80055f2:	4b37      	ldr	r3, [pc, #220]	; (80056d0 <MotorSpeedControl+0x588>)
 80055f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	f7ff f9d2 	bl	80049a8 <__aeabi_dcmpeq>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d01d      	beq.n	8005646 <MotorSpeedControl+0x4fe>
 800560a:	4b32      	ldr	r3, [pc, #200]	; (80056d4 <MotorSpeedControl+0x58c>)
 800560c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	f7ff f9c6 	bl	80049a8 <__aeabi_dcmpeq>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d011      	beq.n	8005646 <MotorSpeedControl+0x4fe>
		motor1_position = 0;
 8005622:	4a2d      	ldr	r2, [pc, #180]	; (80056d8 <MotorSpeedControl+0x590>)
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	f04f 0400 	mov.w	r4, #0
 800562c:	e9c2 3400 	strd	r3, r4, [r2]
		motor1_integration = 0;
 8005630:	4a2a      	ldr	r2, [pc, #168]	; (80056dc <MotorSpeedControl+0x594>)
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	f04f 0400 	mov.w	r4, #0
 800563a:	e9c2 3400 	strd	r3, r4, [r2]
		Motor1SetPWM(0);
 800563e:	2000      	movs	r0, #0
 8005640:	f7ff fcde 	bl	8005000 <Motor1SetPWM>
 8005644:	e002      	b.n	800564c <MotorSpeedControl+0x504>
	} else {
		Motor1SetPWM(pwm1);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff fcda 	bl	8005000 <Motor1SetPWM>
	}

	if ((motor2_ref == 0) && (motor2_speed == 0)) {
 800564c:	4b19      	ldr	r3, [pc, #100]	; (80056b4 <MotorSpeedControl+0x56c>)
 800564e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	f7ff f9a5 	bl	80049a8 <__aeabi_dcmpeq>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01d      	beq.n	80056a0 <MotorSpeedControl+0x558>
 8005664:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <MotorSpeedControl+0x570>)
 8005666:	e9d3 0100 	ldrd	r0, r1, [r3]
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	f7ff f999 	bl	80049a8 <__aeabi_dcmpeq>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d011      	beq.n	80056a0 <MotorSpeedControl+0x558>
		motor2_position = 0;
 800567c:	4a18      	ldr	r2, [pc, #96]	; (80056e0 <MotorSpeedControl+0x598>)
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	f04f 0400 	mov.w	r4, #0
 8005686:	e9c2 3400 	strd	r3, r4, [r2]
		motor2_integration = 0;
 800568a:	4a0d      	ldr	r2, [pc, #52]	; (80056c0 <MotorSpeedControl+0x578>)
 800568c:	f04f 0300 	mov.w	r3, #0
 8005690:	f04f 0400 	mov.w	r4, #0
 8005694:	e9c2 3400 	strd	r3, r4, [r2]
		Motor2SetPWM(0);
 8005698:	2000      	movs	r0, #0
 800569a:	f7ff fcf5 	bl	8005088 <Motor2SetPWM>
 800569e:	e002      	b.n	80056a6 <MotorSpeedControl+0x55e>
	} else {
		Motor2SetPWM(pwm2);
 80056a0:	6838      	ldr	r0, [r7, #0]
 80056a2:	f7ff fcf1 	bl	8005088 <Motor2SetPWM>
	}

}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000008 	.word	0x20000008
 80056b4:	20000180 	.word	0x20000180
 80056b8:	20000168 	.word	0x20000168
 80056bc:	20000138 	.word	0x20000138
 80056c0:	20000178 	.word	0x20000178
 80056c4:	200000a0 	.word	0x200000a0
 80056c8:	20000000 	.word	0x20000000
 80056cc:	200000a8 	.word	0x200000a8
 80056d0:	20000150 	.word	0x20000150
 80056d4:	20000170 	.word	0x20000170
 80056d8:	20000190 	.word	0x20000190
 80056dc:	20000188 	.word	0x20000188
 80056e0:	200001a0 	.word	0x200001a0

080056e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80056ea:	4b15      	ldr	r3, [pc, #84]	; (8005740 <HAL_MspInit+0x5c>)
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	4a14      	ldr	r2, [pc, #80]	; (8005740 <HAL_MspInit+0x5c>)
 80056f0:	f043 0301 	orr.w	r3, r3, #1
 80056f4:	6193      	str	r3, [r2, #24]
 80056f6:	4b12      	ldr	r3, [pc, #72]	; (8005740 <HAL_MspInit+0x5c>)
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	60bb      	str	r3, [r7, #8]
 8005700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005702:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <HAL_MspInit+0x5c>)
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	4a0e      	ldr	r2, [pc, #56]	; (8005740 <HAL_MspInit+0x5c>)
 8005708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570c:	61d3      	str	r3, [r2, #28]
 800570e:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <HAL_MspInit+0x5c>)
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005716:	607b      	str	r3, [r7, #4]
 8005718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800571a:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <HAL_MspInit+0x60>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	4a04      	ldr	r2, [pc, #16]	; (8005744 <HAL_MspInit+0x60>)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr
 8005740:	40021000 	.word	0x40021000
 8005744:	40010000 	.word	0x40010000

08005748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr

08005754 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005758:	e7fe      	b.n	8005758 <HardFault_Handler+0x4>

0800575a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800575a:	b480      	push	{r7}
 800575c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800575e:	e7fe      	b.n	800575e <MemManage_Handler+0x4>

08005760 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005764:	e7fe      	b.n	8005764 <BusFault_Handler+0x4>

08005766 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005766:	b480      	push	{r7}
 8005768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800576a:	e7fe      	b.n	800576a <UsageFault_Handler+0x4>

0800576c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005770:	bf00      	nop
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr

08005778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800577c:	bf00      	nop
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005788:	bf00      	nop
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr

08005790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005794:	f000 fbf8 	bl	8005f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005798:	bf00      	nop
 800579a:	bd80      	pop	{r7, pc}

0800579c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80057a0:	4802      	ldr	r0, [pc, #8]	; (80057ac <DMA1_Channel1_IRQHandler+0x10>)
 80057a2:	f000 ff9b 	bl	80066dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80057a6:	bf00      	nop
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	200000ec 	.word	0x200000ec

080057b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80057b4:	4803      	ldr	r0, [pc, #12]	; (80057c4 <TIM1_UP_IRQHandler+0x14>)
 80057b6:	f002 f854 	bl	8007862 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  MotorSpeedControl();
 80057ba:	f7ff fcc5 	bl	8005148 <MotorSpeedControl>

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000228 	.word	0x20000228

080057c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80057d0:	4b11      	ldr	r3, [pc, #68]	; (8005818 <_sbrk+0x50>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <_sbrk+0x16>
		heap_end = &end;
 80057d8:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <_sbrk+0x50>)
 80057da:	4a10      	ldr	r2, [pc, #64]	; (800581c <_sbrk+0x54>)
 80057dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80057de:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <_sbrk+0x50>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80057e4:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <_sbrk+0x50>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4413      	add	r3, r2
 80057ec:	466a      	mov	r2, sp
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d907      	bls.n	8005802 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80057f2:	f003 f893 	bl	800891c <__errno>
 80057f6:	4602      	mov	r2, r0
 80057f8:	230c      	movs	r3, #12
 80057fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80057fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005800:	e006      	b.n	8005810 <_sbrk+0x48>
	}

	heap_end += incr;
 8005802:	4b05      	ldr	r3, [pc, #20]	; (8005818 <_sbrk+0x50>)
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4413      	add	r3, r2
 800580a:	4a03      	ldr	r2, [pc, #12]	; (8005818 <_sbrk+0x50>)
 800580c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800580e:	68fb      	ldr	r3, [r7, #12]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	200000b0 	.word	0x200000b0
 800581c:	200002f0 	.word	0x200002f0

08005820 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005824:	4b15      	ldr	r3, [pc, #84]	; (800587c <SystemInit+0x5c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a14      	ldr	r2, [pc, #80]	; (800587c <SystemInit+0x5c>)
 800582a:	f043 0301 	orr.w	r3, r3, #1
 800582e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005830:	4b12      	ldr	r3, [pc, #72]	; (800587c <SystemInit+0x5c>)
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	4911      	ldr	r1, [pc, #68]	; (800587c <SystemInit+0x5c>)
 8005836:	4b12      	ldr	r3, [pc, #72]	; (8005880 <SystemInit+0x60>)
 8005838:	4013      	ands	r3, r2
 800583a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800583c:	4b0f      	ldr	r3, [pc, #60]	; (800587c <SystemInit+0x5c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a0e      	ldr	r2, [pc, #56]	; (800587c <SystemInit+0x5c>)
 8005842:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800584a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800584c:	4b0b      	ldr	r3, [pc, #44]	; (800587c <SystemInit+0x5c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a0a      	ldr	r2, [pc, #40]	; (800587c <SystemInit+0x5c>)
 8005852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005856:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005858:	4b08      	ldr	r3, [pc, #32]	; (800587c <SystemInit+0x5c>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	4a07      	ldr	r2, [pc, #28]	; (800587c <SystemInit+0x5c>)
 800585e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005862:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005864:	4b05      	ldr	r3, [pc, #20]	; (800587c <SystemInit+0x5c>)
 8005866:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800586a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800586c:	4b05      	ldr	r3, [pc, #20]	; (8005884 <SystemInit+0x64>)
 800586e:	4a06      	ldr	r2, [pc, #24]	; (8005888 <SystemInit+0x68>)
 8005870:	609a      	str	r2, [r3, #8]
#endif 
}
 8005872:	bf00      	nop
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40021000 	.word	0x40021000
 8005880:	f8ff0000 	.word	0xf8ff0000
 8005884:	e000ed00 	.word	0xe000ed00
 8005888:	08004000 	.word	0x08004000

0800588c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005892:	f107 0308 	add.w	r3, r7, #8
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	605a      	str	r2, [r3, #4]
 800589c:	609a      	str	r2, [r3, #8]
 800589e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058a0:	463b      	mov	r3, r7
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80058a8:	4b1f      	ldr	r3, [pc, #124]	; (8005928 <MX_TIM1_Init+0x9c>)
 80058aa:	4a20      	ldr	r2, [pc, #128]	; (800592c <MX_TIM1_Init+0xa0>)
 80058ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720;
 80058ae:	4b1e      	ldr	r3, [pc, #120]	; (8005928 <MX_TIM1_Init+0x9c>)
 80058b0:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80058b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058b6:	4b1c      	ldr	r3, [pc, #112]	; (8005928 <MX_TIM1_Init+0x9c>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80058bc:	4b1a      	ldr	r3, [pc, #104]	; (8005928 <MX_TIM1_Init+0x9c>)
 80058be:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058c4:	4b18      	ldr	r3, [pc, #96]	; (8005928 <MX_TIM1_Init+0x9c>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80058ca:	4b17      	ldr	r3, [pc, #92]	; (8005928 <MX_TIM1_Init+0x9c>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80058d0:	4b15      	ldr	r3, [pc, #84]	; (8005928 <MX_TIM1_Init+0x9c>)
 80058d2:	2280      	movs	r2, #128	; 0x80
 80058d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80058d6:	4814      	ldr	r0, [pc, #80]	; (8005928 <MX_TIM1_Init+0x9c>)
 80058d8:	f001 fe4a 	bl	8007570 <HAL_TIM_Base_Init>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80058e2:	f7ff fb81 	bl	8004fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80058ec:	f107 0308 	add.w	r3, r7, #8
 80058f0:	4619      	mov	r1, r3
 80058f2:	480d      	ldr	r0, [pc, #52]	; (8005928 <MX_TIM1_Init+0x9c>)
 80058f4:	f002 f984 	bl	8007c00 <HAL_TIM_ConfigClockSource>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80058fe:	f7ff fb73 	bl	8004fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005902:	2300      	movs	r3, #0
 8005904:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005906:	2300      	movs	r3, #0
 8005908:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800590a:	463b      	mov	r3, r7
 800590c:	4619      	mov	r1, r3
 800590e:	4806      	ldr	r0, [pc, #24]	; (8005928 <MX_TIM1_Init+0x9c>)
 8005910:	f002 fcfe 	bl	8008310 <HAL_TIMEx_MasterConfigSynchronization>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800591a:	f7ff fb65 	bl	8004fe8 <Error_Handler>
  }

}
 800591e:	bf00      	nop
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20000228 	.word	0x20000228
 800592c:	40012c00 	.word	0x40012c00

08005930 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08e      	sub	sp, #56	; 0x38
 8005934:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005936:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	605a      	str	r2, [r3, #4]
 8005940:	609a      	str	r2, [r3, #8]
 8005942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005944:	f107 0320 	add.w	r3, r7, #32
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800594e:	1d3b      	adds	r3, r7, #4
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	605a      	str	r2, [r3, #4]
 8005956:	609a      	str	r2, [r3, #8]
 8005958:	60da      	str	r2, [r3, #12]
 800595a:	611a      	str	r2, [r3, #16]
 800595c:	615a      	str	r2, [r3, #20]
 800595e:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005960:	4b32      	ldr	r3, [pc, #200]	; (8005a2c <MX_TIM2_Init+0xfc>)
 8005962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005966:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005968:	4b30      	ldr	r3, [pc, #192]	; (8005a2c <MX_TIM2_Init+0xfc>)
 800596a:	2200      	movs	r2, #0
 800596c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800596e:	4b2f      	ldr	r3, [pc, #188]	; (8005a2c <MX_TIM2_Init+0xfc>)
 8005970:	2200      	movs	r2, #0
 8005972:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8005974:	4b2d      	ldr	r3, [pc, #180]	; (8005a2c <MX_TIM2_Init+0xfc>)
 8005976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800597a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800597c:	4b2b      	ldr	r3, [pc, #172]	; (8005a2c <MX_TIM2_Init+0xfc>)
 800597e:	2200      	movs	r2, #0
 8005980:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005982:	4b2a      	ldr	r3, [pc, #168]	; (8005a2c <MX_TIM2_Init+0xfc>)
 8005984:	2280      	movs	r2, #128	; 0x80
 8005986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005988:	4828      	ldr	r0, [pc, #160]	; (8005a2c <MX_TIM2_Init+0xfc>)
 800598a:	f001 fdf1 	bl	8007570 <HAL_TIM_Base_Init>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8005994:	f7ff fb28 	bl	8004fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800599e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059a2:	4619      	mov	r1, r3
 80059a4:	4821      	ldr	r0, [pc, #132]	; (8005a2c <MX_TIM2_Init+0xfc>)
 80059a6:	f002 f92b 	bl	8007c00 <HAL_TIM_ConfigClockSource>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80059b0:	f7ff fb1a 	bl	8004fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80059b4:	481d      	ldr	r0, [pc, #116]	; (8005a2c <MX_TIM2_Init+0xfc>)
 80059b6:	f001 fe29 	bl	800760c <HAL_TIM_PWM_Init>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80059c0:	f7ff fb12 	bl	8004fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059c4:	2300      	movs	r3, #0
 80059c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059c8:	2300      	movs	r3, #0
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80059cc:	f107 0320 	add.w	r3, r7, #32
 80059d0:	4619      	mov	r1, r3
 80059d2:	4816      	ldr	r0, [pc, #88]	; (8005a2c <MX_TIM2_Init+0xfc>)
 80059d4:	f002 fc9c 	bl	8008310 <HAL_TIMEx_MasterConfigSynchronization>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80059de:	f7ff fb03 	bl	8004fe8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80059e2:	2360      	movs	r3, #96	; 0x60
 80059e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80059ee:	2304      	movs	r3, #4
 80059f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80059f2:	1d3b      	adds	r3, r7, #4
 80059f4:	2200      	movs	r2, #0
 80059f6:	4619      	mov	r1, r3
 80059f8:	480c      	ldr	r0, [pc, #48]	; (8005a2c <MX_TIM2_Init+0xfc>)
 80059fa:	f002 f83b 	bl	8007a74 <HAL_TIM_PWM_ConfigChannel>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8005a04:	f7ff faf0 	bl	8004fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005a08:	1d3b      	adds	r3, r7, #4
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4807      	ldr	r0, [pc, #28]	; (8005a2c <MX_TIM2_Init+0xfc>)
 8005a10:	f002 f830 	bl	8007a74 <HAL_TIM_PWM_ConfigChannel>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8005a1a:	f7ff fae5 	bl	8004fe8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8005a1e:	4803      	ldr	r0, [pc, #12]	; (8005a2c <MX_TIM2_Init+0xfc>)
 8005a20:	f000 f952 	bl	8005cc8 <HAL_TIM_MspPostInit>

}
 8005a24:	bf00      	nop
 8005a26:	3738      	adds	r7, #56	; 0x38
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20000268 	.word	0x20000268

08005a30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08c      	sub	sp, #48	; 0x30
 8005a34:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8005a36:	f107 030c 	add.w	r3, r7, #12
 8005a3a:	2224      	movs	r2, #36	; 0x24
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f002 ff96 	bl	8008970 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a44:	1d3b      	adds	r3, r7, #4
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8005a4c:	4b20      	ldr	r3, [pc, #128]	; (8005ad0 <MX_TIM3_Init+0xa0>)
 8005a4e:	4a21      	ldr	r2, [pc, #132]	; (8005ad4 <MX_TIM3_Init+0xa4>)
 8005a50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005a52:	4b1f      	ldr	r3, [pc, #124]	; (8005ad0 <MX_TIM3_Init+0xa0>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a58:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <MX_TIM3_Init+0xa0>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8005a5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <MX_TIM3_Init+0xa0>)
 8005a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a66:	4b1a      	ldr	r3, [pc, #104]	; (8005ad0 <MX_TIM3_Init+0xa0>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a6c:	4b18      	ldr	r3, [pc, #96]	; (8005ad0 <MX_TIM3_Init+0xa0>)
 8005a6e:	2280      	movs	r2, #128	; 0x80
 8005a70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005a72:	2301      	movs	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005a76:	2302      	movs	r3, #2
 8005a78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8005a86:	2302      	movs	r3, #2
 8005a88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005a96:	f107 030c 	add.w	r3, r7, #12
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	480c      	ldr	r0, [pc, #48]	; (8005ad0 <MX_TIM3_Init+0xa0>)
 8005a9e:	f001 fe1b 	bl	80076d8 <HAL_TIM_Encoder_Init>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005aa8:	f7ff fa9e 	bl	8004fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005aac:	2300      	movs	r3, #0
 8005aae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ab4:	1d3b      	adds	r3, r7, #4
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4805      	ldr	r0, [pc, #20]	; (8005ad0 <MX_TIM3_Init+0xa0>)
 8005aba:	f002 fc29 	bl	8008310 <HAL_TIMEx_MasterConfigSynchronization>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005ac4:	f7ff fa90 	bl	8004fe8 <Error_Handler>
  }

}
 8005ac8:	bf00      	nop
 8005aca:	3730      	adds	r7, #48	; 0x30
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	200001e8 	.word	0x200001e8
 8005ad4:	40000400 	.word	0x40000400

08005ad8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08c      	sub	sp, #48	; 0x30
 8005adc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8005ade:	f107 030c 	add.w	r3, r7, #12
 8005ae2:	2224      	movs	r2, #36	; 0x24
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f002 ff42 	bl	8008970 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005aec:	1d3b      	adds	r3, r7, #4
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8005af4:	4b20      	ldr	r3, [pc, #128]	; (8005b78 <MX_TIM4_Init+0xa0>)
 8005af6:	4a21      	ldr	r2, [pc, #132]	; (8005b7c <MX_TIM4_Init+0xa4>)
 8005af8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005afa:	4b1f      	ldr	r3, [pc, #124]	; (8005b78 <MX_TIM4_Init+0xa0>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b00:	4b1d      	ldr	r3, [pc, #116]	; (8005b78 <MX_TIM4_Init+0xa0>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF;
 8005b06:	4b1c      	ldr	r3, [pc, #112]	; (8005b78 <MX_TIM4_Init+0xa0>)
 8005b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b0e:	4b1a      	ldr	r3, [pc, #104]	; (8005b78 <MX_TIM4_Init+0xa0>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b14:	4b18      	ldr	r3, [pc, #96]	; (8005b78 <MX_TIM4_Init+0xa0>)
 8005b16:	2280      	movs	r2, #128	; 0x80
 8005b18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005b1e:	2302      	movs	r3, #2
 8005b20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005b22:	2301      	movs	r3, #1
 8005b24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005b32:	2301      	movs	r3, #1
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005b36:	2300      	movs	r3, #0
 8005b38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005b3e:	f107 030c 	add.w	r3, r7, #12
 8005b42:	4619      	mov	r1, r3
 8005b44:	480c      	ldr	r0, [pc, #48]	; (8005b78 <MX_TIM4_Init+0xa0>)
 8005b46:	f001 fdc7 	bl	80076d8 <HAL_TIM_Encoder_Init>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8005b50:	f7ff fa4a 	bl	8004fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b54:	2300      	movs	r3, #0
 8005b56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005b5c:	1d3b      	adds	r3, r7, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4805      	ldr	r0, [pc, #20]	; (8005b78 <MX_TIM4_Init+0xa0>)
 8005b62:	f002 fbd5 	bl	8008310 <HAL_TIMEx_MasterConfigSynchronization>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8005b6c:	f7ff fa3c 	bl	8004fe8 <Error_Handler>
  }

}
 8005b70:	bf00      	nop
 8005b72:	3730      	adds	r7, #48	; 0x30
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	200001a8 	.word	0x200001a8
 8005b7c:	40000800 	.word	0x40000800

08005b80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a16      	ldr	r2, [pc, #88]	; (8005be8 <HAL_TIM_Base_MspInit+0x68>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d114      	bne.n	8005bbc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b92:	4b16      	ldr	r3, [pc, #88]	; (8005bec <HAL_TIM_Base_MspInit+0x6c>)
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	4a15      	ldr	r2, [pc, #84]	; (8005bec <HAL_TIM_Base_MspInit+0x6c>)
 8005b98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b9c:	6193      	str	r3, [r2, #24]
 8005b9e:	4b13      	ldr	r3, [pc, #76]	; (8005bec <HAL_TIM_Base_MspInit+0x6c>)
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8005baa:	2200      	movs	r2, #0
 8005bac:	2100      	movs	r1, #0
 8005bae:	2019      	movs	r0, #25
 8005bb0:	f000 fce7 	bl	8006582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005bb4:	2019      	movs	r0, #25
 8005bb6:	f000 fd00 	bl	80065ba <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005bba:	e010      	b.n	8005bde <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc4:	d10b      	bne.n	8005bde <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005bc6:	4b09      	ldr	r3, [pc, #36]	; (8005bec <HAL_TIM_Base_MspInit+0x6c>)
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	4a08      	ldr	r2, [pc, #32]	; (8005bec <HAL_TIM_Base_MspInit+0x6c>)
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	61d3      	str	r3, [r2, #28]
 8005bd2:	4b06      	ldr	r3, [pc, #24]	; (8005bec <HAL_TIM_Base_MspInit+0x6c>)
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	60bb      	str	r3, [r7, #8]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
}
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40012c00 	.word	0x40012c00
 8005bec:	40021000 	.word	0x40021000

08005bf0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08a      	sub	sp, #40	; 0x28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bf8:	f107 0318 	add.w	r3, r7, #24
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	605a      	str	r2, [r3, #4]
 8005c02:	609a      	str	r2, [r3, #8]
 8005c04:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a2a      	ldr	r2, [pc, #168]	; (8005cb4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d124      	bne.n	8005c5a <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c10:	4b29      	ldr	r3, [pc, #164]	; (8005cb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	4a28      	ldr	r2, [pc, #160]	; (8005cb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005c16:	f043 0302 	orr.w	r3, r3, #2
 8005c1a:	61d3      	str	r3, [r2, #28]
 8005c1c:	4b26      	ldr	r3, [pc, #152]	; (8005cb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c28:	4b23      	ldr	r3, [pc, #140]	; (8005cb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	4a22      	ldr	r2, [pc, #136]	; (8005cb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005c2e:	f043 0304 	orr.w	r3, r3, #4
 8005c32:	6193      	str	r3, [r2, #24]
 8005c34:	4b20      	ldr	r3, [pc, #128]	; (8005cb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c40:	23c0      	movs	r3, #192	; 0xc0
 8005c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c4c:	f107 0318 	add.w	r3, r7, #24
 8005c50:	4619      	mov	r1, r3
 8005c52:	481a      	ldr	r0, [pc, #104]	; (8005cbc <HAL_TIM_Encoder_MspInit+0xcc>)
 8005c54:	f000 fe48 	bl	80068e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005c58:	e028      	b.n	8005cac <HAL_TIM_Encoder_MspInit+0xbc>
  else if(tim_encoderHandle->Instance==TIM4)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a18      	ldr	r2, [pc, #96]	; (8005cc0 <HAL_TIM_Encoder_MspInit+0xd0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d123      	bne.n	8005cac <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005c64:	4b14      	ldr	r3, [pc, #80]	; (8005cb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	4a13      	ldr	r2, [pc, #76]	; (8005cb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005c6a:	f043 0304 	orr.w	r3, r3, #4
 8005c6e:	61d3      	str	r3, [r2, #28]
 8005c70:	4b11      	ldr	r3, [pc, #68]	; (8005cb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c7c:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	4a0d      	ldr	r2, [pc, #52]	; (8005cb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005c82:	f043 0308 	orr.w	r3, r3, #8
 8005c86:	6193      	str	r3, [r2, #24]
 8005c88:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	60bb      	str	r3, [r7, #8]
 8005c92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c94:	23c0      	movs	r3, #192	; 0xc0
 8005c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ca0:	f107 0318 	add.w	r3, r7, #24
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4807      	ldr	r0, [pc, #28]	; (8005cc4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8005ca8:	f000 fe1e 	bl	80068e8 <HAL_GPIO_Init>
}
 8005cac:	bf00      	nop
 8005cae:	3728      	adds	r7, #40	; 0x28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	40010800 	.word	0x40010800
 8005cc0:	40000800 	.word	0x40000800
 8005cc4:	40010c00 	.word	0x40010c00

08005cc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08a      	sub	sp, #40	; 0x28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cd0:	f107 0314 	add.w	r3, r7, #20
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	605a      	str	r2, [r3, #4]
 8005cda:	609a      	str	r2, [r3, #8]
 8005cdc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce6:	d142      	bne.n	8005d6e <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ce8:	4b23      	ldr	r3, [pc, #140]	; (8005d78 <HAL_TIM_MspPostInit+0xb0>)
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	4a22      	ldr	r2, [pc, #136]	; (8005d78 <HAL_TIM_MspPostInit+0xb0>)
 8005cee:	f043 0304 	orr.w	r3, r3, #4
 8005cf2:	6193      	str	r3, [r2, #24]
 8005cf4:	4b20      	ldr	r3, [pc, #128]	; (8005d78 <HAL_TIM_MspPostInit+0xb0>)
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d00:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <HAL_TIM_MspPostInit+0xb0>)
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	4a1c      	ldr	r2, [pc, #112]	; (8005d78 <HAL_TIM_MspPostInit+0xb0>)
 8005d06:	f043 0308 	orr.w	r3, r3, #8
 8005d0a:	6193      	str	r3, [r2, #24]
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <HAL_TIM_MspPostInit+0xb0>)
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	f003 0308 	and.w	r3, r3, #8
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = Motor1_PWM_Pin;
 8005d18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d1e:	2302      	movs	r3, #2
 8005d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d22:	2303      	movs	r3, #3
 8005d24:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Motor1_PWM_GPIO_Port, &GPIO_InitStruct);
 8005d26:	f107 0314 	add.w	r3, r7, #20
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4813      	ldr	r0, [pc, #76]	; (8005d7c <HAL_TIM_MspPostInit+0xb4>)
 8005d2e:	f000 fddb 	bl	80068e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor2_PWM_Pin;
 8005d32:	2308      	movs	r3, #8
 8005d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d36:	2302      	movs	r3, #2
 8005d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Motor2_PWM_GPIO_Port, &GPIO_InitStruct);
 8005d3e:	f107 0314 	add.w	r3, r7, #20
 8005d42:	4619      	mov	r1, r3
 8005d44:	480e      	ldr	r0, [pc, #56]	; (8005d80 <HAL_TIM_MspPostInit+0xb8>)
 8005d46:	f000 fdcf 	bl	80068e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8005d4a:	4b0e      	ldr	r3, [pc, #56]	; (8005d84 <HAL_TIM_MspPostInit+0xbc>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
 8005d68:	4a06      	ldr	r2, [pc, #24]	; (8005d84 <HAL_TIM_MspPostInit+0xbc>)
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005d6e:	bf00      	nop
 8005d70:	3728      	adds	r7, #40	; 0x28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	40010800 	.word	0x40010800
 8005d80:	40010c00 	.word	0x40010c00
 8005d84:	40010000 	.word	0x40010000

08005d88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005d8c:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005d8e:	4a12      	ldr	r2, [pc, #72]	; (8005dd8 <MX_USART1_UART_Init+0x50>)
 8005d90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005d92:	4b10      	ldr	r3, [pc, #64]	; (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005d94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d9a:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005da0:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005da6:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005dac:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005dae:	220c      	movs	r2, #12
 8005db0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005db2:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005db8:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005dbe:	4805      	ldr	r0, [pc, #20]	; (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005dc0:	f002 fafc 	bl	80083bc <HAL_UART_Init>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005dca:	f7ff f90d 	bl	8004fe8 <Error_Handler>
  }

}
 8005dce:	bf00      	nop
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	200002a8 	.word	0x200002a8
 8005dd8:	40013800 	.word	0x40013800

08005ddc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005de4:	f107 0310 	add.w	r3, r7, #16
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	605a      	str	r2, [r3, #4]
 8005dee:	609a      	str	r2, [r3, #8]
 8005df0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a1c      	ldr	r2, [pc, #112]	; (8005e68 <HAL_UART_MspInit+0x8c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d131      	bne.n	8005e60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005dfc:	4b1b      	ldr	r3, [pc, #108]	; (8005e6c <HAL_UART_MspInit+0x90>)
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	4a1a      	ldr	r2, [pc, #104]	; (8005e6c <HAL_UART_MspInit+0x90>)
 8005e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e06:	6193      	str	r3, [r2, #24]
 8005e08:	4b18      	ldr	r3, [pc, #96]	; (8005e6c <HAL_UART_MspInit+0x90>)
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e14:	4b15      	ldr	r3, [pc, #84]	; (8005e6c <HAL_UART_MspInit+0x90>)
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	4a14      	ldr	r2, [pc, #80]	; (8005e6c <HAL_UART_MspInit+0x90>)
 8005e1a:	f043 0304 	orr.w	r3, r3, #4
 8005e1e:	6193      	str	r3, [r2, #24]
 8005e20:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <HAL_UART_MspInit+0x90>)
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	60bb      	str	r3, [r7, #8]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e32:	2302      	movs	r3, #2
 8005e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e36:	2303      	movs	r3, #3
 8005e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e3a:	f107 0310 	add.w	r3, r7, #16
 8005e3e:	4619      	mov	r1, r3
 8005e40:	480b      	ldr	r0, [pc, #44]	; (8005e70 <HAL_UART_MspInit+0x94>)
 8005e42:	f000 fd51 	bl	80068e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e54:	f107 0310 	add.w	r3, r7, #16
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4805      	ldr	r0, [pc, #20]	; (8005e70 <HAL_UART_MspInit+0x94>)
 8005e5c:	f000 fd44 	bl	80068e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005e60:	bf00      	nop
 8005e62:	3720      	adds	r7, #32
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40013800 	.word	0x40013800
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	40010800 	.word	0x40010800

08005e74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005e74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005e76:	e003      	b.n	8005e80 <LoopCopyDataInit>

08005e78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005e78:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005e7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005e7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005e7e:	3104      	adds	r1, #4

08005e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005e80:	480a      	ldr	r0, [pc, #40]	; (8005eac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005e82:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005e84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005e86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005e88:	d3f6      	bcc.n	8005e78 <CopyDataInit>
  ldr r2, =_sbss
 8005e8a:	4a0a      	ldr	r2, [pc, #40]	; (8005eb4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005e8c:	e002      	b.n	8005e94 <LoopFillZerobss>

08005e8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005e8e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005e90:	f842 3b04 	str.w	r3, [r2], #4

08005e94 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005e94:	4b08      	ldr	r3, [pc, #32]	; (8005eb8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005e96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005e98:	d3f9      	bcc.n	8005e8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005e9a:	f7ff fcc1 	bl	8005820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e9e:	f002 fd43 	bl	8008928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005ea2:	f7fe ff7d 	bl	8004da0 <main>
  bx lr
 8005ea6:	4770      	bx	lr
  ldr r3, =_sidata
 8005ea8:	08009250 	.word	0x08009250
  ldr r0, =_sdata
 8005eac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005eb0:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8005eb4:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8005eb8:	200002f0 	.word	0x200002f0

08005ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005ebc:	e7fe      	b.n	8005ebc <ADC1_2_IRQHandler>
	...

08005ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ec4:	4b08      	ldr	r3, [pc, #32]	; (8005ee8 <HAL_Init+0x28>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a07      	ldr	r2, [pc, #28]	; (8005ee8 <HAL_Init+0x28>)
 8005eca:	f043 0310 	orr.w	r3, r3, #16
 8005ece:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ed0:	2003      	movs	r0, #3
 8005ed2:	f000 fb4b 	bl	800656c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	f000 f826 	bl	8005f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005edc:	f7ff fc02 	bl	80056e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40022000 	.word	0x40022000

08005eec <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8005ef0:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <HAL_DeInit+0x2c>)
 8005ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef6:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8005ef8:	4b07      	ldr	r3, [pc, #28]	; (8005f18 <HAL_DeInit+0x2c>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8005efe:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <HAL_DeInit+0x2c>)
 8005f00:	f04f 32ff 	mov.w	r2, #4294967295
 8005f04:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8005f06:	4b04      	ldr	r3, [pc, #16]	; (8005f18 <HAL_DeInit+0x2c>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8005f0c:	f000 f806 	bl	8005f1c <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40021000 	.word	0x40021000

08005f1c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr

08005f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f30:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <HAL_InitTick+0x54>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <HAL_InitTick+0x58>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fb45 	bl	80065d6 <HAL_SYSTICK_Config>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e00e      	b.n	8005f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b0f      	cmp	r3, #15
 8005f5a:	d80a      	bhi.n	8005f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	f04f 30ff 	mov.w	r0, #4294967295
 8005f64:	f000 fb0d 	bl	8006582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f68:	4a06      	ldr	r2, [pc, #24]	; (8005f84 <HAL_InitTick+0x5c>)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e000      	b.n	8005f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	20000010 	.word	0x20000010
 8005f80:	20000018 	.word	0x20000018
 8005f84:	20000014 	.word	0x20000014

08005f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f8c:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <HAL_IncTick+0x1c>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <HAL_IncTick+0x20>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4413      	add	r3, r2
 8005f98:	4a03      	ldr	r2, [pc, #12]	; (8005fa8 <HAL_IncTick+0x20>)
 8005f9a:	6013      	str	r3, [r2, #0]
}
 8005f9c:	bf00      	nop
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr
 8005fa4:	20000018 	.word	0x20000018
 8005fa8:	200002e8 	.word	0x200002e8

08005fac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  return uwTick;
 8005fb0:	4b02      	ldr	r3, [pc, #8]	; (8005fbc <HAL_GetTick+0x10>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bc80      	pop	{r7}
 8005fba:	4770      	bx	lr
 8005fbc:	200002e8 	.word	0x200002e8

08005fc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e0be      	b.n	8006160 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d109      	bne.n	8006004 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fe fd6a 	bl	8004ad8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f9ab 	bl	8006360 <ADC_ConversionStop_Disable>
 800600a:	4603      	mov	r3, r0
 800600c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006012:	f003 0310 	and.w	r3, r3, #16
 8006016:	2b00      	cmp	r3, #0
 8006018:	f040 8099 	bne.w	800614e <HAL_ADC_Init+0x18e>
 800601c:	7dfb      	ldrb	r3, [r7, #23]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f040 8095 	bne.w	800614e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006028:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800602c:	f023 0302 	bic.w	r3, r3, #2
 8006030:	f043 0202 	orr.w	r2, r3, #2
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006040:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	7b1b      	ldrb	r3, [r3, #12]
 8006046:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006048:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	4313      	orrs	r3, r2
 800604e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006058:	d003      	beq.n	8006062 <HAL_ADC_Init+0xa2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d102      	bne.n	8006068 <HAL_ADC_Init+0xa8>
 8006062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006066:	e000      	b.n	800606a <HAL_ADC_Init+0xaa>
 8006068:	2300      	movs	r3, #0
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	7d1b      	ldrb	r3, [r3, #20]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d119      	bne.n	80060ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	7b1b      	ldrb	r3, [r3, #12]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d109      	bne.n	8006094 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	3b01      	subs	r3, #1
 8006086:	035a      	lsls	r2, r3, #13
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	e00b      	b.n	80060ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006098:	f043 0220 	orr.w	r2, r3, #32
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	f043 0201 	orr.w	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	430a      	orrs	r2, r1
 80060be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689a      	ldr	r2, [r3, #8]
 80060c6:	4b28      	ldr	r3, [pc, #160]	; (8006168 <HAL_ADC_Init+0x1a8>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6812      	ldr	r2, [r2, #0]
 80060ce:	68b9      	ldr	r1, [r7, #8]
 80060d0:	430b      	orrs	r3, r1
 80060d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060dc:	d003      	beq.n	80060e6 <HAL_ADC_Init+0x126>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d104      	bne.n	80060f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	051b      	lsls	r3, r3, #20
 80060ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	430a      	orrs	r2, r1
 8006102:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	4b18      	ldr	r3, [pc, #96]	; (800616c <HAL_ADC_Init+0x1ac>)
 800610c:	4013      	ands	r3, r2
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	429a      	cmp	r2, r3
 8006112:	d10b      	bne.n	800612c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	f023 0303 	bic.w	r3, r3, #3
 8006122:	f043 0201 	orr.w	r2, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800612a:	e018      	b.n	800615e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	f023 0312 	bic.w	r3, r3, #18
 8006134:	f043 0210 	orr.w	r2, r3, #16
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	f043 0201 	orr.w	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800614c:	e007      	b.n	800615e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	f043 0210 	orr.w	r2, r3, #16
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800615e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	ffe1f7fd 	.word	0xffe1f7fd
 800616c:	ff1f0efe 	.word	0xff1f0efe

08006170 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_ADC_ConfigChannel+0x20>
 800618c:	2302      	movs	r3, #2
 800618e:	e0dc      	b.n	800634a <HAL_ADC_ConfigChannel+0x1da>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	2b06      	cmp	r3, #6
 800619e:	d81c      	bhi.n	80061da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	3b05      	subs	r3, #5
 80061b2:	221f      	movs	r2, #31
 80061b4:	fa02 f303 	lsl.w	r3, r2, r3
 80061b8:	43db      	mvns	r3, r3
 80061ba:	4019      	ands	r1, r3
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	3b05      	subs	r3, #5
 80061cc:	fa00 f203 	lsl.w	r2, r0, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	635a      	str	r2, [r3, #52]	; 0x34
 80061d8:	e03c      	b.n	8006254 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b0c      	cmp	r3, #12
 80061e0:	d81c      	bhi.n	800621c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	3b23      	subs	r3, #35	; 0x23
 80061f4:	221f      	movs	r2, #31
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	43db      	mvns	r3, r3
 80061fc:	4019      	ands	r1, r3
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	4613      	mov	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	3b23      	subs	r3, #35	; 0x23
 800620e:	fa00 f203 	lsl.w	r2, r0, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	631a      	str	r2, [r3, #48]	; 0x30
 800621a:	e01b      	b.n	8006254 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	3b41      	subs	r3, #65	; 0x41
 800622e:	221f      	movs	r2, #31
 8006230:	fa02 f303 	lsl.w	r3, r2, r3
 8006234:	43db      	mvns	r3, r3
 8006236:	4019      	ands	r1, r3
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	3b41      	subs	r3, #65	; 0x41
 8006248:	fa00 f203 	lsl.w	r2, r0, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b09      	cmp	r3, #9
 800625a:	d91c      	bls.n	8006296 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68d9      	ldr	r1, [r3, #12]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4613      	mov	r3, r2
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	4413      	add	r3, r2
 800626c:	3b1e      	subs	r3, #30
 800626e:	2207      	movs	r2, #7
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	43db      	mvns	r3, r3
 8006276:	4019      	ands	r1, r3
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	6898      	ldr	r0, [r3, #8]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	4613      	mov	r3, r2
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	4413      	add	r3, r2
 8006286:	3b1e      	subs	r3, #30
 8006288:	fa00 f203 	lsl.w	r2, r0, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	60da      	str	r2, [r3, #12]
 8006294:	e019      	b.n	80062ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6919      	ldr	r1, [r3, #16]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	4613      	mov	r3, r2
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	4413      	add	r3, r2
 80062a6:	2207      	movs	r2, #7
 80062a8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ac:	43db      	mvns	r3, r3
 80062ae:	4019      	ands	r1, r3
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	6898      	ldr	r0, [r3, #8]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	4613      	mov	r3, r2
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	4413      	add	r3, r2
 80062be:	fa00 f203 	lsl.w	r2, r0, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b10      	cmp	r3, #16
 80062d0:	d003      	beq.n	80062da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80062d6:	2b11      	cmp	r3, #17
 80062d8:	d132      	bne.n	8006340 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a1d      	ldr	r2, [pc, #116]	; (8006354 <HAL_ADC_ConfigChannel+0x1e4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d125      	bne.n	8006330 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d126      	bne.n	8006340 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006300:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b10      	cmp	r3, #16
 8006308:	d11a      	bne.n	8006340 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800630a:	4b13      	ldr	r3, [pc, #76]	; (8006358 <HAL_ADC_ConfigChannel+0x1e8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a13      	ldr	r2, [pc, #76]	; (800635c <HAL_ADC_ConfigChannel+0x1ec>)
 8006310:	fba2 2303 	umull	r2, r3, r2, r3
 8006314:	0c9a      	lsrs	r2, r3, #18
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006320:	e002      	b.n	8006328 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	3b01      	subs	r3, #1
 8006326:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1f9      	bne.n	8006322 <HAL_ADC_ConfigChannel+0x1b2>
 800632e:	e007      	b.n	8006340 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006334:	f043 0220 	orr.w	r2, r3, #32
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006348:	7bfb      	ldrb	r3, [r7, #15]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr
 8006354:	40012400 	.word	0x40012400
 8006358:	20000010 	.word	0x20000010
 800635c:	431bde83 	.word	0x431bde83

08006360 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b01      	cmp	r3, #1
 8006378:	d127      	bne.n	80063ca <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0201 	bic.w	r2, r2, #1
 8006388:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800638a:	f7ff fe0f 	bl	8005fac <HAL_GetTick>
 800638e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006390:	e014      	b.n	80063bc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006392:	f7ff fe0b 	bl	8005fac <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d90d      	bls.n	80063bc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a4:	f043 0210 	orr.w	r2, r3, #16
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	f043 0201 	orr.w	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e007      	b.n	80063cc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d0e3      	beq.n	8006392 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063e4:	4b0c      	ldr	r3, [pc, #48]	; (8006418 <__NVIC_SetPriorityGrouping+0x44>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063f0:	4013      	ands	r3, r2
 80063f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006406:	4a04      	ldr	r2, [pc, #16]	; (8006418 <__NVIC_SetPriorityGrouping+0x44>)
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	60d3      	str	r3, [r2, #12]
}
 800640c:	bf00      	nop
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	e000ed00 	.word	0xe000ed00

0800641c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006420:	4b04      	ldr	r3, [pc, #16]	; (8006434 <__NVIC_GetPriorityGrouping+0x18>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	0a1b      	lsrs	r3, r3, #8
 8006426:	f003 0307 	and.w	r3, r3, #7
}
 800642a:	4618      	mov	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	bc80      	pop	{r7}
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	e000ed00 	.word	0xe000ed00

08006438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006446:	2b00      	cmp	r3, #0
 8006448:	db0b      	blt.n	8006462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	f003 021f 	and.w	r2, r3, #31
 8006450:	4906      	ldr	r1, [pc, #24]	; (800646c <__NVIC_EnableIRQ+0x34>)
 8006452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	2001      	movs	r0, #1
 800645a:	fa00 f202 	lsl.w	r2, r0, r2
 800645e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	bc80      	pop	{r7}
 800646a:	4770      	bx	lr
 800646c:	e000e100 	.word	0xe000e100

08006470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	4603      	mov	r3, r0
 8006478:	6039      	str	r1, [r7, #0]
 800647a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800647c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006480:	2b00      	cmp	r3, #0
 8006482:	db0a      	blt.n	800649a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	490c      	ldr	r1, [pc, #48]	; (80064bc <__NVIC_SetPriority+0x4c>)
 800648a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648e:	0112      	lsls	r2, r2, #4
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	440b      	add	r3, r1
 8006494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006498:	e00a      	b.n	80064b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	b2da      	uxtb	r2, r3
 800649e:	4908      	ldr	r1, [pc, #32]	; (80064c0 <__NVIC_SetPriority+0x50>)
 80064a0:	79fb      	ldrb	r3, [r7, #7]
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	3b04      	subs	r3, #4
 80064a8:	0112      	lsls	r2, r2, #4
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	440b      	add	r3, r1
 80064ae:	761a      	strb	r2, [r3, #24]
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	e000e100 	.word	0xe000e100
 80064c0:	e000ed00 	.word	0xe000ed00

080064c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b089      	sub	sp, #36	; 0x24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f003 0307 	and.w	r3, r3, #7
 80064d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f1c3 0307 	rsb	r3, r3, #7
 80064de:	2b04      	cmp	r3, #4
 80064e0:	bf28      	it	cs
 80064e2:	2304      	movcs	r3, #4
 80064e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	3304      	adds	r3, #4
 80064ea:	2b06      	cmp	r3, #6
 80064ec:	d902      	bls.n	80064f4 <NVIC_EncodePriority+0x30>
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	3b03      	subs	r3, #3
 80064f2:	e000      	b.n	80064f6 <NVIC_EncodePriority+0x32>
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064f8:	f04f 32ff 	mov.w	r2, #4294967295
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006502:	43da      	mvns	r2, r3
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	401a      	ands	r2, r3
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800650c:	f04f 31ff 	mov.w	r1, #4294967295
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	fa01 f303 	lsl.w	r3, r1, r3
 8006516:	43d9      	mvns	r1, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800651c:	4313      	orrs	r3, r2
         );
}
 800651e:	4618      	mov	r0, r3
 8006520:	3724      	adds	r7, #36	; 0x24
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr

08006528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3b01      	subs	r3, #1
 8006534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006538:	d301      	bcc.n	800653e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800653a:	2301      	movs	r3, #1
 800653c:	e00f      	b.n	800655e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800653e:	4a0a      	ldr	r2, [pc, #40]	; (8006568 <SysTick_Config+0x40>)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3b01      	subs	r3, #1
 8006544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006546:	210f      	movs	r1, #15
 8006548:	f04f 30ff 	mov.w	r0, #4294967295
 800654c:	f7ff ff90 	bl	8006470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006550:	4b05      	ldr	r3, [pc, #20]	; (8006568 <SysTick_Config+0x40>)
 8006552:	2200      	movs	r2, #0
 8006554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006556:	4b04      	ldr	r3, [pc, #16]	; (8006568 <SysTick_Config+0x40>)
 8006558:	2207      	movs	r2, #7
 800655a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	e000e010 	.word	0xe000e010

0800656c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff ff2d 	bl	80063d4 <__NVIC_SetPriorityGrouping>
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006582:	b580      	push	{r7, lr}
 8006584:	b086      	sub	sp, #24
 8006586:	af00      	add	r7, sp, #0
 8006588:	4603      	mov	r3, r0
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]
 800658e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006594:	f7ff ff42 	bl	800641c <__NVIC_GetPriorityGrouping>
 8006598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	68b9      	ldr	r1, [r7, #8]
 800659e:	6978      	ldr	r0, [r7, #20]
 80065a0:	f7ff ff90 	bl	80064c4 <NVIC_EncodePriority>
 80065a4:	4602      	mov	r2, r0
 80065a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065aa:	4611      	mov	r1, r2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff ff5f 	bl	8006470 <__NVIC_SetPriority>
}
 80065b2:	bf00      	nop
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	4603      	mov	r3, r0
 80065c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff ff35 	bl	8006438 <__NVIC_EnableIRQ>
}
 80065ce:	bf00      	nop
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff ffa2 	bl	8006528 <SysTick_Config>
 80065e4:	4603      	mov	r3, r0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b082      	sub	sp, #8
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e00e      	b.n	800661e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	795b      	ldrb	r3, [r3, #5]
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d105      	bne.n	8006616 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7fe fadd 	bl	8004bd0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e043      	b.n	80066c6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	4b22      	ldr	r3, [pc, #136]	; (80066d0 <HAL_DMA_Init+0xa8>)
 8006646:	4413      	add	r3, r2
 8006648:	4a22      	ldr	r2, [pc, #136]	; (80066d4 <HAL_DMA_Init+0xac>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	091b      	lsrs	r3, r3, #4
 8006650:	009a      	lsls	r2, r3, #2
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a1f      	ldr	r2, [pc, #124]	; (80066d8 <HAL_DMA_Init+0xb0>)
 800665a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006672:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006676:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006680:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800668c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006698:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bc80      	pop	{r7}
 80066ce:	4770      	bx	lr
 80066d0:	bffdfff8 	.word	0xbffdfff8
 80066d4:	cccccccd 	.word	0xcccccccd
 80066d8:	40020000 	.word	0x40020000

080066dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f8:	2204      	movs	r2, #4
 80066fa:	409a      	lsls	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4013      	ands	r3, r2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d04f      	beq.n	80067a4 <HAL_DMA_IRQHandler+0xc8>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f003 0304 	and.w	r3, r3, #4
 800670a:	2b00      	cmp	r3, #0
 800670c:	d04a      	beq.n	80067a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0320 	and.w	r3, r3, #32
 8006718:	2b00      	cmp	r3, #0
 800671a:	d107      	bne.n	800672c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0204 	bic.w	r2, r2, #4
 800672a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a66      	ldr	r2, [pc, #408]	; (80068cc <HAL_DMA_IRQHandler+0x1f0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d029      	beq.n	800678a <HAL_DMA_IRQHandler+0xae>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a65      	ldr	r2, [pc, #404]	; (80068d0 <HAL_DMA_IRQHandler+0x1f4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d022      	beq.n	8006786 <HAL_DMA_IRQHandler+0xaa>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a63      	ldr	r2, [pc, #396]	; (80068d4 <HAL_DMA_IRQHandler+0x1f8>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d01a      	beq.n	8006780 <HAL_DMA_IRQHandler+0xa4>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a62      	ldr	r2, [pc, #392]	; (80068d8 <HAL_DMA_IRQHandler+0x1fc>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d012      	beq.n	800677a <HAL_DMA_IRQHandler+0x9e>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a60      	ldr	r2, [pc, #384]	; (80068dc <HAL_DMA_IRQHandler+0x200>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00a      	beq.n	8006774 <HAL_DMA_IRQHandler+0x98>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a5f      	ldr	r2, [pc, #380]	; (80068e0 <HAL_DMA_IRQHandler+0x204>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d102      	bne.n	800676e <HAL_DMA_IRQHandler+0x92>
 8006768:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800676c:	e00e      	b.n	800678c <HAL_DMA_IRQHandler+0xb0>
 800676e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006772:	e00b      	b.n	800678c <HAL_DMA_IRQHandler+0xb0>
 8006774:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006778:	e008      	b.n	800678c <HAL_DMA_IRQHandler+0xb0>
 800677a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800677e:	e005      	b.n	800678c <HAL_DMA_IRQHandler+0xb0>
 8006780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006784:	e002      	b.n	800678c <HAL_DMA_IRQHandler+0xb0>
 8006786:	2340      	movs	r3, #64	; 0x40
 8006788:	e000      	b.n	800678c <HAL_DMA_IRQHandler+0xb0>
 800678a:	2304      	movs	r3, #4
 800678c:	4a55      	ldr	r2, [pc, #340]	; (80068e4 <HAL_DMA_IRQHandler+0x208>)
 800678e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 8094 	beq.w	80068c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80067a2:	e08e      	b.n	80068c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a8:	2202      	movs	r2, #2
 80067aa:	409a      	lsls	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4013      	ands	r3, r2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d056      	beq.n	8006862 <HAL_DMA_IRQHandler+0x186>
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d051      	beq.n	8006862 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0320 	and.w	r3, r3, #32
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10b      	bne.n	80067e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 020a 	bic.w	r2, r2, #10
 80067da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a38      	ldr	r2, [pc, #224]	; (80068cc <HAL_DMA_IRQHandler+0x1f0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d029      	beq.n	8006842 <HAL_DMA_IRQHandler+0x166>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a37      	ldr	r2, [pc, #220]	; (80068d0 <HAL_DMA_IRQHandler+0x1f4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d022      	beq.n	800683e <HAL_DMA_IRQHandler+0x162>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a35      	ldr	r2, [pc, #212]	; (80068d4 <HAL_DMA_IRQHandler+0x1f8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d01a      	beq.n	8006838 <HAL_DMA_IRQHandler+0x15c>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a34      	ldr	r2, [pc, #208]	; (80068d8 <HAL_DMA_IRQHandler+0x1fc>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d012      	beq.n	8006832 <HAL_DMA_IRQHandler+0x156>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a32      	ldr	r2, [pc, #200]	; (80068dc <HAL_DMA_IRQHandler+0x200>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00a      	beq.n	800682c <HAL_DMA_IRQHandler+0x150>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a31      	ldr	r2, [pc, #196]	; (80068e0 <HAL_DMA_IRQHandler+0x204>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d102      	bne.n	8006826 <HAL_DMA_IRQHandler+0x14a>
 8006820:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006824:	e00e      	b.n	8006844 <HAL_DMA_IRQHandler+0x168>
 8006826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800682a:	e00b      	b.n	8006844 <HAL_DMA_IRQHandler+0x168>
 800682c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006830:	e008      	b.n	8006844 <HAL_DMA_IRQHandler+0x168>
 8006832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006836:	e005      	b.n	8006844 <HAL_DMA_IRQHandler+0x168>
 8006838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800683c:	e002      	b.n	8006844 <HAL_DMA_IRQHandler+0x168>
 800683e:	2320      	movs	r3, #32
 8006840:	e000      	b.n	8006844 <HAL_DMA_IRQHandler+0x168>
 8006842:	2302      	movs	r3, #2
 8006844:	4a27      	ldr	r2, [pc, #156]	; (80068e4 <HAL_DMA_IRQHandler+0x208>)
 8006846:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006854:	2b00      	cmp	r3, #0
 8006856:	d034      	beq.n	80068c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006860:	e02f      	b.n	80068c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	2208      	movs	r2, #8
 8006868:	409a      	lsls	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4013      	ands	r3, r2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d028      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x1e8>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f003 0308 	and.w	r3, r3, #8
 8006878:	2b00      	cmp	r3, #0
 800687a:	d023      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 020e 	bic.w	r2, r2, #14
 800688a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006894:	2101      	movs	r1, #1
 8006896:	fa01 f202 	lsl.w	r2, r1, r2
 800689a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
    }
  }
  return;
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
}
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	40020008 	.word	0x40020008
 80068d0:	4002001c 	.word	0x4002001c
 80068d4:	40020030 	.word	0x40020030
 80068d8:	40020044 	.word	0x40020044
 80068dc:	40020058 	.word	0x40020058
 80068e0:	4002006c 	.word	0x4002006c
 80068e4:	40020000 	.word	0x40020000

080068e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b08b      	sub	sp, #44	; 0x2c
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80068f2:	2300      	movs	r3, #0
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80068f6:	2300      	movs	r3, #0
 80068f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068fa:	e127      	b.n	8006b4c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80068fc:	2201      	movs	r2, #1
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	fa02 f303 	lsl.w	r3, r2, r3
 8006904:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69fa      	ldr	r2, [r7, #28]
 800690c:	4013      	ands	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	429a      	cmp	r2, r3
 8006916:	f040 8116 	bne.w	8006b46 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b12      	cmp	r3, #18
 8006920:	d034      	beq.n	800698c <HAL_GPIO_Init+0xa4>
 8006922:	2b12      	cmp	r3, #18
 8006924:	d80d      	bhi.n	8006942 <HAL_GPIO_Init+0x5a>
 8006926:	2b02      	cmp	r3, #2
 8006928:	d02b      	beq.n	8006982 <HAL_GPIO_Init+0x9a>
 800692a:	2b02      	cmp	r3, #2
 800692c:	d804      	bhi.n	8006938 <HAL_GPIO_Init+0x50>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d031      	beq.n	8006996 <HAL_GPIO_Init+0xae>
 8006932:	2b01      	cmp	r3, #1
 8006934:	d01c      	beq.n	8006970 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006936:	e048      	b.n	80069ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006938:	2b03      	cmp	r3, #3
 800693a:	d043      	beq.n	80069c4 <HAL_GPIO_Init+0xdc>
 800693c:	2b11      	cmp	r3, #17
 800693e:	d01b      	beq.n	8006978 <HAL_GPIO_Init+0x90>
          break;
 8006940:	e043      	b.n	80069ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006942:	4a89      	ldr	r2, [pc, #548]	; (8006b68 <HAL_GPIO_Init+0x280>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d026      	beq.n	8006996 <HAL_GPIO_Init+0xae>
 8006948:	4a87      	ldr	r2, [pc, #540]	; (8006b68 <HAL_GPIO_Init+0x280>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d806      	bhi.n	800695c <HAL_GPIO_Init+0x74>
 800694e:	4a87      	ldr	r2, [pc, #540]	; (8006b6c <HAL_GPIO_Init+0x284>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d020      	beq.n	8006996 <HAL_GPIO_Init+0xae>
 8006954:	4a86      	ldr	r2, [pc, #536]	; (8006b70 <HAL_GPIO_Init+0x288>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d01d      	beq.n	8006996 <HAL_GPIO_Init+0xae>
          break;
 800695a:	e036      	b.n	80069ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800695c:	4a85      	ldr	r2, [pc, #532]	; (8006b74 <HAL_GPIO_Init+0x28c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d019      	beq.n	8006996 <HAL_GPIO_Init+0xae>
 8006962:	4a85      	ldr	r2, [pc, #532]	; (8006b78 <HAL_GPIO_Init+0x290>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d016      	beq.n	8006996 <HAL_GPIO_Init+0xae>
 8006968:	4a84      	ldr	r2, [pc, #528]	; (8006b7c <HAL_GPIO_Init+0x294>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d013      	beq.n	8006996 <HAL_GPIO_Init+0xae>
          break;
 800696e:	e02c      	b.n	80069ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	623b      	str	r3, [r7, #32]
          break;
 8006976:	e028      	b.n	80069ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	3304      	adds	r3, #4
 800697e:	623b      	str	r3, [r7, #32]
          break;
 8006980:	e023      	b.n	80069ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	3308      	adds	r3, #8
 8006988:	623b      	str	r3, [r7, #32]
          break;
 800698a:	e01e      	b.n	80069ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	330c      	adds	r3, #12
 8006992:	623b      	str	r3, [r7, #32]
          break;
 8006994:	e019      	b.n	80069ca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d102      	bne.n	80069a4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800699e:	2304      	movs	r3, #4
 80069a0:	623b      	str	r3, [r7, #32]
          break;
 80069a2:	e012      	b.n	80069ca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d105      	bne.n	80069b8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80069ac:	2308      	movs	r3, #8
 80069ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	69fa      	ldr	r2, [r7, #28]
 80069b4:	611a      	str	r2, [r3, #16]
          break;
 80069b6:	e008      	b.n	80069ca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80069b8:	2308      	movs	r3, #8
 80069ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	615a      	str	r2, [r3, #20]
          break;
 80069c2:	e002      	b.n	80069ca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80069c4:	2300      	movs	r3, #0
 80069c6:	623b      	str	r3, [r7, #32]
          break;
 80069c8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2bff      	cmp	r3, #255	; 0xff
 80069ce:	d801      	bhi.n	80069d4 <HAL_GPIO_Init+0xec>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	e001      	b.n	80069d8 <HAL_GPIO_Init+0xf0>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3304      	adds	r3, #4
 80069d8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	2bff      	cmp	r3, #255	; 0xff
 80069de:	d802      	bhi.n	80069e6 <HAL_GPIO_Init+0xfe>
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	e002      	b.n	80069ec <HAL_GPIO_Init+0x104>
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	3b08      	subs	r3, #8
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	210f      	movs	r1, #15
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	fa01 f303 	lsl.w	r3, r1, r3
 80069fa:	43db      	mvns	r3, r3
 80069fc:	401a      	ands	r2, r3
 80069fe:	6a39      	ldr	r1, [r7, #32]
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	fa01 f303 	lsl.w	r3, r1, r3
 8006a06:	431a      	orrs	r2, r3
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8096 	beq.w	8006b46 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006a1a:	4b59      	ldr	r3, [pc, #356]	; (8006b80 <HAL_GPIO_Init+0x298>)
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	4a58      	ldr	r2, [pc, #352]	; (8006b80 <HAL_GPIO_Init+0x298>)
 8006a20:	f043 0301 	orr.w	r3, r3, #1
 8006a24:	6193      	str	r3, [r2, #24]
 8006a26:	4b56      	ldr	r3, [pc, #344]	; (8006b80 <HAL_GPIO_Init+0x298>)
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	60bb      	str	r3, [r7, #8]
 8006a30:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006a32:	4a54      	ldr	r2, [pc, #336]	; (8006b84 <HAL_GPIO_Init+0x29c>)
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	089b      	lsrs	r3, r3, #2
 8006a38:	3302      	adds	r3, #2
 8006a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a3e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	220f      	movs	r2, #15
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	43db      	mvns	r3, r3
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	4013      	ands	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a4b      	ldr	r2, [pc, #300]	; (8006b88 <HAL_GPIO_Init+0x2a0>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d013      	beq.n	8006a86 <HAL_GPIO_Init+0x19e>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a4a      	ldr	r2, [pc, #296]	; (8006b8c <HAL_GPIO_Init+0x2a4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00d      	beq.n	8006a82 <HAL_GPIO_Init+0x19a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a49      	ldr	r2, [pc, #292]	; (8006b90 <HAL_GPIO_Init+0x2a8>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d007      	beq.n	8006a7e <HAL_GPIO_Init+0x196>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a48      	ldr	r2, [pc, #288]	; (8006b94 <HAL_GPIO_Init+0x2ac>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d101      	bne.n	8006a7a <HAL_GPIO_Init+0x192>
 8006a76:	2303      	movs	r3, #3
 8006a78:	e006      	b.n	8006a88 <HAL_GPIO_Init+0x1a0>
 8006a7a:	2304      	movs	r3, #4
 8006a7c:	e004      	b.n	8006a88 <HAL_GPIO_Init+0x1a0>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e002      	b.n	8006a88 <HAL_GPIO_Init+0x1a0>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <HAL_GPIO_Init+0x1a0>
 8006a86:	2300      	movs	r3, #0
 8006a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8a:	f002 0203 	and.w	r2, r2, #3
 8006a8e:	0092      	lsls	r2, r2, #2
 8006a90:	4093      	lsls	r3, r2
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006a98:	493a      	ldr	r1, [pc, #232]	; (8006b84 <HAL_GPIO_Init+0x29c>)
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	089b      	lsrs	r3, r3, #2
 8006a9e:	3302      	adds	r3, #2
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d006      	beq.n	8006ac0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006ab2:	4b39      	ldr	r3, [pc, #228]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	4938      	ldr	r1, [pc, #224]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	600b      	str	r3, [r1, #0]
 8006abe:	e006      	b.n	8006ace <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006ac0:	4b35      	ldr	r3, [pc, #212]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	43db      	mvns	r3, r3
 8006ac8:	4933      	ldr	r1, [pc, #204]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006aca:	4013      	ands	r3, r2
 8006acc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d006      	beq.n	8006ae8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006ada:	4b2f      	ldr	r3, [pc, #188]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	492e      	ldr	r1, [pc, #184]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	604b      	str	r3, [r1, #4]
 8006ae6:	e006      	b.n	8006af6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006ae8:	4b2b      	ldr	r3, [pc, #172]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	43db      	mvns	r3, r3
 8006af0:	4929      	ldr	r1, [pc, #164]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006af2:	4013      	ands	r3, r2
 8006af4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d006      	beq.n	8006b10 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006b02:	4b25      	ldr	r3, [pc, #148]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	4924      	ldr	r1, [pc, #144]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	608b      	str	r3, [r1, #8]
 8006b0e:	e006      	b.n	8006b1e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006b10:	4b21      	ldr	r3, [pc, #132]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	43db      	mvns	r3, r3
 8006b18:	491f      	ldr	r1, [pc, #124]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d006      	beq.n	8006b38 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006b2a:	4b1b      	ldr	r3, [pc, #108]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	491a      	ldr	r1, [pc, #104]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60cb      	str	r3, [r1, #12]
 8006b36:	e006      	b.n	8006b46 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006b38:	4b17      	ldr	r3, [pc, #92]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	43db      	mvns	r3, r3
 8006b40:	4915      	ldr	r1, [pc, #84]	; (8006b98 <HAL_GPIO_Init+0x2b0>)
 8006b42:	4013      	ands	r3, r2
 8006b44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	3301      	adds	r3, #1
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	fa22 f303 	lsr.w	r3, r2, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f47f aed0 	bne.w	80068fc <HAL_GPIO_Init+0x14>
  }
}
 8006b5c:	bf00      	nop
 8006b5e:	372c      	adds	r7, #44	; 0x2c
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	10210000 	.word	0x10210000
 8006b6c:	10110000 	.word	0x10110000
 8006b70:	10120000 	.word	0x10120000
 8006b74:	10310000 	.word	0x10310000
 8006b78:	10320000 	.word	0x10320000
 8006b7c:	10220000 	.word	0x10220000
 8006b80:	40021000 	.word	0x40021000
 8006b84:	40010000 	.word	0x40010000
 8006b88:	40010800 	.word	0x40010800
 8006b8c:	40010c00 	.word	0x40010c00
 8006b90:	40011000 	.word	0x40011000
 8006b94:	40011400 	.word	0x40011400
 8006b98:	40010400 	.word	0x40010400

08006b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	807b      	strh	r3, [r7, #2]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006bac:	787b      	ldrb	r3, [r7, #1]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bb2:	887a      	ldrh	r2, [r7, #2]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006bb8:	e003      	b.n	8006bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006bba:	887b      	ldrh	r3, [r7, #2]
 8006bbc:	041a      	lsls	r2, r3, #16
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	611a      	str	r2, [r3, #16]
}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr

08006bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e26c      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 8087 	beq.w	8006cfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bec:	4b92      	ldr	r3, [pc, #584]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f003 030c 	and.w	r3, r3, #12
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d00c      	beq.n	8006c12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006bf8:	4b8f      	ldr	r3, [pc, #572]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f003 030c 	and.w	r3, r3, #12
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d112      	bne.n	8006c2a <HAL_RCC_OscConfig+0x5e>
 8006c04:	4b8c      	ldr	r3, [pc, #560]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c10:	d10b      	bne.n	8006c2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c12:	4b89      	ldr	r3, [pc, #548]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d06c      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x12c>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d168      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e246      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c32:	d106      	bne.n	8006c42 <HAL_RCC_OscConfig+0x76>
 8006c34:	4b80      	ldr	r3, [pc, #512]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a7f      	ldr	r2, [pc, #508]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	e02e      	b.n	8006ca0 <HAL_RCC_OscConfig+0xd4>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10c      	bne.n	8006c64 <HAL_RCC_OscConfig+0x98>
 8006c4a:	4b7b      	ldr	r3, [pc, #492]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a7a      	ldr	r2, [pc, #488]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	4b78      	ldr	r3, [pc, #480]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a77      	ldr	r2, [pc, #476]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	e01d      	b.n	8006ca0 <HAL_RCC_OscConfig+0xd4>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c6c:	d10c      	bne.n	8006c88 <HAL_RCC_OscConfig+0xbc>
 8006c6e:	4b72      	ldr	r3, [pc, #456]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a71      	ldr	r2, [pc, #452]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	4b6f      	ldr	r3, [pc, #444]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a6e      	ldr	r2, [pc, #440]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e00b      	b.n	8006ca0 <HAL_RCC_OscConfig+0xd4>
 8006c88:	4b6b      	ldr	r3, [pc, #428]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a6a      	ldr	r2, [pc, #424]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	4b68      	ldr	r3, [pc, #416]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a67      	ldr	r2, [pc, #412]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d013      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca8:	f7ff f980 	bl	8005fac <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cb0:	f7ff f97c 	bl	8005fac <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b64      	cmp	r3, #100	; 0x64
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e1fa      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cc2:	4b5d      	ldr	r3, [pc, #372]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0f0      	beq.n	8006cb0 <HAL_RCC_OscConfig+0xe4>
 8006cce:	e014      	b.n	8006cfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd0:	f7ff f96c 	bl	8005fac <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cd8:	f7ff f968 	bl	8005fac <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b64      	cmp	r3, #100	; 0x64
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e1e6      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cea:	4b53      	ldr	r3, [pc, #332]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f0      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x10c>
 8006cf6:	e000      	b.n	8006cfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d063      	beq.n	8006dce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d06:	4b4c      	ldr	r3, [pc, #304]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f003 030c 	and.w	r3, r3, #12
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00b      	beq.n	8006d2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006d12:	4b49      	ldr	r3, [pc, #292]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f003 030c 	and.w	r3, r3, #12
 8006d1a:	2b08      	cmp	r3, #8
 8006d1c:	d11c      	bne.n	8006d58 <HAL_RCC_OscConfig+0x18c>
 8006d1e:	4b46      	ldr	r3, [pc, #280]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d116      	bne.n	8006d58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d2a:	4b43      	ldr	r3, [pc, #268]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d005      	beq.n	8006d42 <HAL_RCC_OscConfig+0x176>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d001      	beq.n	8006d42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e1ba      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d42:	4b3d      	ldr	r3, [pc, #244]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	4939      	ldr	r1, [pc, #228]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d56:	e03a      	b.n	8006dce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d020      	beq.n	8006da2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d60:	4b36      	ldr	r3, [pc, #216]	; (8006e3c <HAL_RCC_OscConfig+0x270>)
 8006d62:	2201      	movs	r2, #1
 8006d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d66:	f7ff f921 	bl	8005fac <HAL_GetTick>
 8006d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d6c:	e008      	b.n	8006d80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d6e:	f7ff f91d 	bl	8005fac <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d901      	bls.n	8006d80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e19b      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d80:	4b2d      	ldr	r3, [pc, #180]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0f0      	beq.n	8006d6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d8c:	4b2a      	ldr	r3, [pc, #168]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	4927      	ldr	r1, [pc, #156]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	600b      	str	r3, [r1, #0]
 8006da0:	e015      	b.n	8006dce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006da2:	4b26      	ldr	r3, [pc, #152]	; (8006e3c <HAL_RCC_OscConfig+0x270>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da8:	f7ff f900 	bl	8005fac <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006db0:	f7ff f8fc 	bl	8005fac <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e17a      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dc2:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f0      	bne.n	8006db0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0308 	and.w	r3, r3, #8
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d03a      	beq.n	8006e50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d019      	beq.n	8006e16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006de2:	4b17      	ldr	r3, [pc, #92]	; (8006e40 <HAL_RCC_OscConfig+0x274>)
 8006de4:	2201      	movs	r2, #1
 8006de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006de8:	f7ff f8e0 	bl	8005fac <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dee:	e008      	b.n	8006e02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006df0:	f7ff f8dc 	bl	8005fac <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e15a      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e02:	4b0d      	ldr	r3, [pc, #52]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0f0      	beq.n	8006df0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006e0e:	2001      	movs	r0, #1
 8006e10:	f000 fada 	bl	80073c8 <RCC_Delay>
 8006e14:	e01c      	b.n	8006e50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e16:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <HAL_RCC_OscConfig+0x274>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e1c:	f7ff f8c6 	bl	8005fac <HAL_GetTick>
 8006e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e22:	e00f      	b.n	8006e44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e24:	f7ff f8c2 	bl	8005fac <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d908      	bls.n	8006e44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e140      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
 8006e36:	bf00      	nop
 8006e38:	40021000 	.word	0x40021000
 8006e3c:	42420000 	.word	0x42420000
 8006e40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e44:	4b9e      	ldr	r3, [pc, #632]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e9      	bne.n	8006e24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 80a6 	beq.w	8006faa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e62:	4b97      	ldr	r3, [pc, #604]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10d      	bne.n	8006e8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e6e:	4b94      	ldr	r3, [pc, #592]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	4a93      	ldr	r2, [pc, #588]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e78:	61d3      	str	r3, [r2, #28]
 8006e7a:	4b91      	ldr	r3, [pc, #580]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e82:	60bb      	str	r3, [r7, #8]
 8006e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e86:	2301      	movs	r3, #1
 8006e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e8a:	4b8e      	ldr	r3, [pc, #568]	; (80070c4 <HAL_RCC_OscConfig+0x4f8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d118      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e96:	4b8b      	ldr	r3, [pc, #556]	; (80070c4 <HAL_RCC_OscConfig+0x4f8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a8a      	ldr	r2, [pc, #552]	; (80070c4 <HAL_RCC_OscConfig+0x4f8>)
 8006e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ea2:	f7ff f883 	bl	8005fac <HAL_GetTick>
 8006ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ea8:	e008      	b.n	8006ebc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eaa:	f7ff f87f 	bl	8005fac <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b64      	cmp	r3, #100	; 0x64
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e0fd      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ebc:	4b81      	ldr	r3, [pc, #516]	; (80070c4 <HAL_RCC_OscConfig+0x4f8>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0f0      	beq.n	8006eaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d106      	bne.n	8006ede <HAL_RCC_OscConfig+0x312>
 8006ed0:	4b7b      	ldr	r3, [pc, #492]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	4a7a      	ldr	r2, [pc, #488]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006ed6:	f043 0301 	orr.w	r3, r3, #1
 8006eda:	6213      	str	r3, [r2, #32]
 8006edc:	e02d      	b.n	8006f3a <HAL_RCC_OscConfig+0x36e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10c      	bne.n	8006f00 <HAL_RCC_OscConfig+0x334>
 8006ee6:	4b76      	ldr	r3, [pc, #472]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	4a75      	ldr	r2, [pc, #468]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006eec:	f023 0301 	bic.w	r3, r3, #1
 8006ef0:	6213      	str	r3, [r2, #32]
 8006ef2:	4b73      	ldr	r3, [pc, #460]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	4a72      	ldr	r2, [pc, #456]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006ef8:	f023 0304 	bic.w	r3, r3, #4
 8006efc:	6213      	str	r3, [r2, #32]
 8006efe:	e01c      	b.n	8006f3a <HAL_RCC_OscConfig+0x36e>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	2b05      	cmp	r3, #5
 8006f06:	d10c      	bne.n	8006f22 <HAL_RCC_OscConfig+0x356>
 8006f08:	4b6d      	ldr	r3, [pc, #436]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	4a6c      	ldr	r2, [pc, #432]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f0e:	f043 0304 	orr.w	r3, r3, #4
 8006f12:	6213      	str	r3, [r2, #32]
 8006f14:	4b6a      	ldr	r3, [pc, #424]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	4a69      	ldr	r2, [pc, #420]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f1a:	f043 0301 	orr.w	r3, r3, #1
 8006f1e:	6213      	str	r3, [r2, #32]
 8006f20:	e00b      	b.n	8006f3a <HAL_RCC_OscConfig+0x36e>
 8006f22:	4b67      	ldr	r3, [pc, #412]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	4a66      	ldr	r2, [pc, #408]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f28:	f023 0301 	bic.w	r3, r3, #1
 8006f2c:	6213      	str	r3, [r2, #32]
 8006f2e:	4b64      	ldr	r3, [pc, #400]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	4a63      	ldr	r2, [pc, #396]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f34:	f023 0304 	bic.w	r3, r3, #4
 8006f38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d015      	beq.n	8006f6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f42:	f7ff f833 	bl	8005fac <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f48:	e00a      	b.n	8006f60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f4a:	f7ff f82f 	bl	8005fac <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d901      	bls.n	8006f60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e0ab      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f60:	4b57      	ldr	r3, [pc, #348]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	f003 0302 	and.w	r3, r3, #2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0ee      	beq.n	8006f4a <HAL_RCC_OscConfig+0x37e>
 8006f6c:	e014      	b.n	8006f98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f6e:	f7ff f81d 	bl	8005fac <HAL_GetTick>
 8006f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f74:	e00a      	b.n	8006f8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f76:	f7ff f819 	bl	8005fac <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d901      	bls.n	8006f8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e095      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f8c:	4b4c      	ldr	r3, [pc, #304]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1ee      	bne.n	8006f76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f98:	7dfb      	ldrb	r3, [r7, #23]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d105      	bne.n	8006faa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f9e:	4b48      	ldr	r3, [pc, #288]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	4a47      	ldr	r2, [pc, #284]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 8081 	beq.w	80070b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fb4:	4b42      	ldr	r3, [pc, #264]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f003 030c 	and.w	r3, r3, #12
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d061      	beq.n	8007084 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d146      	bne.n	8007056 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fc8:	4b3f      	ldr	r3, [pc, #252]	; (80070c8 <HAL_RCC_OscConfig+0x4fc>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fce:	f7fe ffed 	bl	8005fac <HAL_GetTick>
 8006fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fd4:	e008      	b.n	8006fe8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd6:	f7fe ffe9 	bl	8005fac <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d901      	bls.n	8006fe8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e067      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fe8:	4b35      	ldr	r3, [pc, #212]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1f0      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ffc:	d108      	bne.n	8007010 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006ffe:	4b30      	ldr	r3, [pc, #192]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	492d      	ldr	r1, [pc, #180]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 800700c:	4313      	orrs	r3, r2
 800700e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007010:	4b2b      	ldr	r3, [pc, #172]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a19      	ldr	r1, [r3, #32]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	430b      	orrs	r3, r1
 8007022:	4927      	ldr	r1, [pc, #156]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8007024:	4313      	orrs	r3, r2
 8007026:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007028:	4b27      	ldr	r3, [pc, #156]	; (80070c8 <HAL_RCC_OscConfig+0x4fc>)
 800702a:	2201      	movs	r2, #1
 800702c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800702e:	f7fe ffbd 	bl	8005fac <HAL_GetTick>
 8007032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007034:	e008      	b.n	8007048 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007036:	f7fe ffb9 	bl	8005fac <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	2b02      	cmp	r3, #2
 8007042:	d901      	bls.n	8007048 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e037      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007048:	4b1d      	ldr	r3, [pc, #116]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d0f0      	beq.n	8007036 <HAL_RCC_OscConfig+0x46a>
 8007054:	e02f      	b.n	80070b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007056:	4b1c      	ldr	r3, [pc, #112]	; (80070c8 <HAL_RCC_OscConfig+0x4fc>)
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800705c:	f7fe ffa6 	bl	8005fac <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007064:	f7fe ffa2 	bl	8005fac <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e020      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007076:	4b12      	ldr	r3, [pc, #72]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f0      	bne.n	8007064 <HAL_RCC_OscConfig+0x498>
 8007082:	e018      	b.n	80070b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e013      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007090:	4b0b      	ldr	r3, [pc, #44]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d106      	bne.n	80070b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d001      	beq.n	80070b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e000      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	40021000 	.word	0x40021000
 80070c4:	40007000 	.word	0x40007000
 80070c8:	42420060 	.word	0x42420060

080070cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e0d0      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070e0:	4b6a      	ldr	r3, [pc, #424]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d910      	bls.n	8007110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ee:	4b67      	ldr	r3, [pc, #412]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f023 0207 	bic.w	r2, r3, #7
 80070f6:	4965      	ldr	r1, [pc, #404]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070fe:	4b63      	ldr	r3, [pc, #396]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d001      	beq.n	8007110 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e0b8      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d020      	beq.n	800715e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007128:	4b59      	ldr	r3, [pc, #356]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	4a58      	ldr	r2, [pc, #352]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800712e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007132:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007140:	4b53      	ldr	r3, [pc, #332]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	4a52      	ldr	r2, [pc, #328]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007146:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800714a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800714c:	4b50      	ldr	r3, [pc, #320]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	494d      	ldr	r1, [pc, #308]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800715a:	4313      	orrs	r3, r2
 800715c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d040      	beq.n	80071ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d107      	bne.n	8007182 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007172:	4b47      	ldr	r3, [pc, #284]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d115      	bne.n	80071aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e07f      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2b02      	cmp	r3, #2
 8007188:	d107      	bne.n	800719a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800718a:	4b41      	ldr	r3, [pc, #260]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d109      	bne.n	80071aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e073      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800719a:	4b3d      	ldr	r3, [pc, #244]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e06b      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071aa:	4b39      	ldr	r3, [pc, #228]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f023 0203 	bic.w	r2, r3, #3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	4936      	ldr	r1, [pc, #216]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071bc:	f7fe fef6 	bl	8005fac <HAL_GetTick>
 80071c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071c2:	e00a      	b.n	80071da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071c4:	f7fe fef2 	bl	8005fac <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e053      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071da:	4b2d      	ldr	r3, [pc, #180]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f003 020c 	and.w	r2, r3, #12
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d1eb      	bne.n	80071c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071ec:	4b27      	ldr	r3, [pc, #156]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d210      	bcs.n	800721c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fa:	4b24      	ldr	r3, [pc, #144]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f023 0207 	bic.w	r2, r3, #7
 8007202:	4922      	ldr	r1, [pc, #136]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	4313      	orrs	r3, r2
 8007208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800720a:	4b20      	ldr	r3, [pc, #128]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d001      	beq.n	800721c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e032      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d008      	beq.n	800723a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007228:	4b19      	ldr	r3, [pc, #100]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	4916      	ldr	r1, [pc, #88]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007236:	4313      	orrs	r3, r2
 8007238:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0308 	and.w	r3, r3, #8
 8007242:	2b00      	cmp	r3, #0
 8007244:	d009      	beq.n	800725a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007246:	4b12      	ldr	r3, [pc, #72]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	490e      	ldr	r1, [pc, #56]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007256:	4313      	orrs	r3, r2
 8007258:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800725a:	f000 f821 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 800725e:	4601      	mov	r1, r0
 8007260:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	091b      	lsrs	r3, r3, #4
 8007266:	f003 030f 	and.w	r3, r3, #15
 800726a:	4a0a      	ldr	r2, [pc, #40]	; (8007294 <HAL_RCC_ClockConfig+0x1c8>)
 800726c:	5cd3      	ldrb	r3, [r2, r3]
 800726e:	fa21 f303 	lsr.w	r3, r1, r3
 8007272:	4a09      	ldr	r2, [pc, #36]	; (8007298 <HAL_RCC_ClockConfig+0x1cc>)
 8007274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007276:	4b09      	ldr	r3, [pc, #36]	; (800729c <HAL_RCC_ClockConfig+0x1d0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4618      	mov	r0, r3
 800727c:	f7fe fe54 	bl	8005f28 <HAL_InitTick>

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	40022000 	.word	0x40022000
 8007290:	40021000 	.word	0x40021000
 8007294:	080091fc 	.word	0x080091fc
 8007298:	20000010 	.word	0x20000010
 800729c:	20000014 	.word	0x20000014

080072a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072a0:	b490      	push	{r4, r7}
 80072a2:	b08a      	sub	sp, #40	; 0x28
 80072a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80072a6:	4b2a      	ldr	r3, [pc, #168]	; (8007350 <HAL_RCC_GetSysClockFreq+0xb0>)
 80072a8:	1d3c      	adds	r4, r7, #4
 80072aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80072b0:	4b28      	ldr	r3, [pc, #160]	; (8007354 <HAL_RCC_GetSysClockFreq+0xb4>)
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	61fb      	str	r3, [r7, #28]
 80072ba:	2300      	movs	r3, #0
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	2300      	movs	r3, #0
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
 80072c2:	2300      	movs	r3, #0
 80072c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80072ca:	4b23      	ldr	r3, [pc, #140]	; (8007358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	f003 030c 	and.w	r3, r3, #12
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	d002      	beq.n	80072e0 <HAL_RCC_GetSysClockFreq+0x40>
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d003      	beq.n	80072e6 <HAL_RCC_GetSysClockFreq+0x46>
 80072de:	e02d      	b.n	800733c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80072e0:	4b1e      	ldr	r3, [pc, #120]	; (800735c <HAL_RCC_GetSysClockFreq+0xbc>)
 80072e2:	623b      	str	r3, [r7, #32]
      break;
 80072e4:	e02d      	b.n	8007342 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	0c9b      	lsrs	r3, r3, #18
 80072ea:	f003 030f 	and.w	r3, r3, #15
 80072ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80072f2:	4413      	add	r3, r2
 80072f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80072f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d013      	beq.n	800732c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007304:	4b14      	ldr	r3, [pc, #80]	; (8007358 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	0c5b      	lsrs	r3, r3, #17
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007312:	4413      	add	r3, r2
 8007314:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007318:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	4a0f      	ldr	r2, [pc, #60]	; (800735c <HAL_RCC_GetSysClockFreq+0xbc>)
 800731e:	fb02 f203 	mul.w	r2, r2, r3
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	fbb2 f3f3 	udiv	r3, r2, r3
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
 800732a:	e004      	b.n	8007336 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	4a0c      	ldr	r2, [pc, #48]	; (8007360 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007330:	fb02 f303 	mul.w	r3, r2, r3
 8007334:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	623b      	str	r3, [r7, #32]
      break;
 800733a:	e002      	b.n	8007342 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800733c:	4b07      	ldr	r3, [pc, #28]	; (800735c <HAL_RCC_GetSysClockFreq+0xbc>)
 800733e:	623b      	str	r3, [r7, #32]
      break;
 8007340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007342:	6a3b      	ldr	r3, [r7, #32]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3728      	adds	r7, #40	; 0x28
 8007348:	46bd      	mov	sp, r7
 800734a:	bc90      	pop	{r4, r7}
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	080091e8 	.word	0x080091e8
 8007354:	080091f8 	.word	0x080091f8
 8007358:	40021000 	.word	0x40021000
 800735c:	007a1200 	.word	0x007a1200
 8007360:	003d0900 	.word	0x003d0900

08007364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007368:	4b02      	ldr	r3, [pc, #8]	; (8007374 <HAL_RCC_GetHCLKFreq+0x10>)
 800736a:	681b      	ldr	r3, [r3, #0]
}
 800736c:	4618      	mov	r0, r3
 800736e:	46bd      	mov	sp, r7
 8007370:	bc80      	pop	{r7}
 8007372:	4770      	bx	lr
 8007374:	20000010 	.word	0x20000010

08007378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800737c:	f7ff fff2 	bl	8007364 <HAL_RCC_GetHCLKFreq>
 8007380:	4601      	mov	r1, r0
 8007382:	4b05      	ldr	r3, [pc, #20]	; (8007398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	0a1b      	lsrs	r3, r3, #8
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	4a03      	ldr	r2, [pc, #12]	; (800739c <HAL_RCC_GetPCLK1Freq+0x24>)
 800738e:	5cd3      	ldrb	r3, [r2, r3]
 8007390:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007394:	4618      	mov	r0, r3
 8007396:	bd80      	pop	{r7, pc}
 8007398:	40021000 	.word	0x40021000
 800739c:	0800920c 	.word	0x0800920c

080073a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80073a4:	f7ff ffde 	bl	8007364 <HAL_RCC_GetHCLKFreq>
 80073a8:	4601      	mov	r1, r0
 80073aa:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	0adb      	lsrs	r3, r3, #11
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	4a03      	ldr	r2, [pc, #12]	; (80073c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073b6:	5cd3      	ldrb	r3, [r2, r3]
 80073b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80073bc:	4618      	mov	r0, r3
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	40021000 	.word	0x40021000
 80073c4:	0800920c 	.word	0x0800920c

080073c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80073d0:	4b0a      	ldr	r3, [pc, #40]	; (80073fc <RCC_Delay+0x34>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a0a      	ldr	r2, [pc, #40]	; (8007400 <RCC_Delay+0x38>)
 80073d6:	fba2 2303 	umull	r2, r3, r2, r3
 80073da:	0a5b      	lsrs	r3, r3, #9
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	fb02 f303 	mul.w	r3, r2, r3
 80073e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80073e4:	bf00      	nop
  }
  while (Delay --);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	1e5a      	subs	r2, r3, #1
 80073ea:	60fa      	str	r2, [r7, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1f9      	bne.n	80073e4 <RCC_Delay+0x1c>
}
 80073f0:	bf00      	nop
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20000010 	.word	0x20000010
 8007400:	10624dd3 	.word	0x10624dd3

08007404 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	613b      	str	r3, [r7, #16]
 8007410:	2300      	movs	r3, #0
 8007412:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	d07d      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007420:	2300      	movs	r3, #0
 8007422:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007424:	4b4f      	ldr	r3, [pc, #316]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10d      	bne.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007430:	4b4c      	ldr	r3, [pc, #304]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	4a4b      	ldr	r2, [pc, #300]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800743a:	61d3      	str	r3, [r2, #28]
 800743c:	4b49      	ldr	r3, [pc, #292]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007444:	60bb      	str	r3, [r7, #8]
 8007446:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007448:	2301      	movs	r3, #1
 800744a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800744c:	4b46      	ldr	r3, [pc, #280]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007454:	2b00      	cmp	r3, #0
 8007456:	d118      	bne.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007458:	4b43      	ldr	r3, [pc, #268]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a42      	ldr	r2, [pc, #264]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800745e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007462:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007464:	f7fe fda2 	bl	8005fac <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800746a:	e008      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800746c:	f7fe fd9e 	bl	8005fac <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b64      	cmp	r3, #100	; 0x64
 8007478:	d901      	bls.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e06d      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800747e:	4b3a      	ldr	r3, [pc, #232]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0f0      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800748a:	4b36      	ldr	r3, [pc, #216]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007492:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d02e      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d027      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074a8:	4b2e      	ldr	r3, [pc, #184]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074b2:	4b2e      	ldr	r3, [pc, #184]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80074b4:	2201      	movs	r2, #1
 80074b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074b8:	4b2c      	ldr	r3, [pc, #176]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80074be:	4a29      	ldr	r2, [pc, #164]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d014      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ce:	f7fe fd6d 	bl	8005fac <HAL_GetTick>
 80074d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074d4:	e00a      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074d6:	f7fe fd69 	bl	8005fac <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d901      	bls.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e036      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ec:	4b1d      	ldr	r3, [pc, #116]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0ee      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074f8:	4b1a      	ldr	r3, [pc, #104]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	4917      	ldr	r1, [pc, #92]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007506:	4313      	orrs	r3, r2
 8007508:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800750a:	7dfb      	ldrb	r3, [r7, #23]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d105      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007510:	4b14      	ldr	r3, [pc, #80]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007512:	69db      	ldr	r3, [r3, #28]
 8007514:	4a13      	ldr	r2, [pc, #76]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800751a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d008      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007528:	4b0e      	ldr	r3, [pc, #56]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	490b      	ldr	r1, [pc, #44]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007536:	4313      	orrs	r3, r2
 8007538:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	2b00      	cmp	r3, #0
 8007544:	d008      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007546:	4b07      	ldr	r3, [pc, #28]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	4904      	ldr	r1, [pc, #16]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007554:	4313      	orrs	r3, r2
 8007556:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40021000 	.word	0x40021000
 8007568:	40007000 	.word	0x40007000
 800756c:	42420440 	.word	0x42420440

08007570 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e01d      	b.n	80075be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d106      	bne.n	800759c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7fe faf2 	bl	8005b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	3304      	adds	r3, #4
 80075ac:	4619      	mov	r1, r3
 80075ae:	4610      	mov	r0, r2
 80075b0:	f000 fc0a 	bl	8007dc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b085      	sub	sp, #20
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68da      	ldr	r2, [r3, #12]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f042 0201 	orr.w	r2, r2, #1
 80075dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f003 0307 	and.w	r3, r3, #7
 80075e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b06      	cmp	r3, #6
 80075ee:	d007      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0201 	orr.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr

0800760c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e01d      	b.n	800765a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f815 	bl	8007662 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3304      	adds	r3, #4
 8007648:	4619      	mov	r1, r3
 800764a:	4610      	mov	r0, r2
 800764c:	f000 fbbc 	bl	8007dc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	bc80      	pop	{r7}
 8007672:	4770      	bx	lr

08007674 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2201      	movs	r2, #1
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fe1e 	bl	80082c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a10      	ldr	r2, [pc, #64]	; (80076d4 <HAL_TIM_PWM_Start+0x60>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d107      	bne.n	80076a6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f003 0307 	and.w	r3, r3, #7
 80076b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2b06      	cmp	r3, #6
 80076b6:	d007      	beq.n	80076c8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0201 	orr.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	40012c00 	.word	0x40012c00

080076d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e07f      	b.n	80077ec <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d106      	bne.n	8007706 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7fe fa75 	bl	8005bf0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2202      	movs	r2, #2
 800770a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	6812      	ldr	r2, [r2, #0]
 8007718:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800771c:	f023 0307 	bic.w	r3, r3, #7
 8007720:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3304      	adds	r3, #4
 800772a:	4619      	mov	r1, r3
 800772c:	4610      	mov	r0, r2
 800772e:	f000 fb4b 	bl	8007dc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800775a:	f023 0303 	bic.w	r3, r3, #3
 800775e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	021b      	lsls	r3, r3, #8
 800776a:	4313      	orrs	r3, r2
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	4313      	orrs	r3, r2
 8007770:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007778:	f023 030c 	bic.w	r3, r3, #12
 800777c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007784:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	021b      	lsls	r3, r3, #8
 8007794:	4313      	orrs	r3, r2
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	4313      	orrs	r3, r2
 800779a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	011a      	lsls	r2, r3, #4
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	031b      	lsls	r3, r3, #12
 80077a8:	4313      	orrs	r3, r2
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80077b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	4313      	orrs	r3, r2
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <HAL_TIM_Encoder_Start+0x16>
 8007804:	2b04      	cmp	r3, #4
 8007806:	d008      	beq.n	800781a <HAL_TIM_Encoder_Start+0x26>
 8007808:	e00f      	b.n	800782a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2201      	movs	r2, #1
 8007810:	2100      	movs	r1, #0
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fd58 	bl	80082c8 <TIM_CCxChannelCmd>
      break;
 8007818:	e016      	b.n	8007848 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2201      	movs	r2, #1
 8007820:	2104      	movs	r1, #4
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fd50 	bl	80082c8 <TIM_CCxChannelCmd>
      break;
 8007828:	e00e      	b.n	8007848 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2201      	movs	r2, #1
 8007830:	2100      	movs	r1, #0
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fd48 	bl	80082c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2201      	movs	r2, #1
 800783e:	2104      	movs	r1, #4
 8007840:	4618      	mov	r0, r3
 8007842:	f000 fd41 	bl	80082c8 <TIM_CCxChannelCmd>
      break;
 8007846:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f042 0201 	orr.w	r2, r2, #1
 8007856:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b082      	sub	sp, #8
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b02      	cmp	r3, #2
 8007876:	d122      	bne.n	80078be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b02      	cmp	r3, #2
 8007884:	d11b      	bne.n	80078be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f06f 0202 	mvn.w	r2, #2
 800788e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fa74 	bl	8007d92 <HAL_TIM_IC_CaptureCallback>
 80078aa:	e005      	b.n	80078b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fa67 	bl	8007d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fa76 	bl	8007da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d122      	bne.n	8007912 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d11b      	bne.n	8007912 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f06f 0204 	mvn.w	r2, #4
 80078e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fa4a 	bl	8007d92 <HAL_TIM_IC_CaptureCallback>
 80078fe:	e005      	b.n	800790c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fa3d 	bl	8007d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fa4c 	bl	8007da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f003 0308 	and.w	r3, r3, #8
 800791c:	2b08      	cmp	r3, #8
 800791e:	d122      	bne.n	8007966 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b08      	cmp	r3, #8
 800792c:	d11b      	bne.n	8007966 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f06f 0208 	mvn.w	r2, #8
 8007936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2204      	movs	r2, #4
 800793c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fa20 	bl	8007d92 <HAL_TIM_IC_CaptureCallback>
 8007952:	e005      	b.n	8007960 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fa13 	bl	8007d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fa22 	bl	8007da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	f003 0310 	and.w	r3, r3, #16
 8007970:	2b10      	cmp	r3, #16
 8007972:	d122      	bne.n	80079ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	f003 0310 	and.w	r3, r3, #16
 800797e:	2b10      	cmp	r3, #16
 8007980:	d11b      	bne.n	80079ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f06f 0210 	mvn.w	r2, #16
 800798a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2208      	movs	r2, #8
 8007990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f9f6 	bl	8007d92 <HAL_TIM_IC_CaptureCallback>
 80079a6:	e005      	b.n	80079b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f9e9 	bl	8007d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f9f8 	bl	8007da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d10e      	bne.n	80079e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d107      	bne.n	80079e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f06f 0201 	mvn.w	r2, #1
 80079de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f9c4 	bl	8007d6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f0:	2b80      	cmp	r3, #128	; 0x80
 80079f2:	d10e      	bne.n	8007a12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fe:	2b80      	cmp	r3, #128	; 0x80
 8007a00:	d107      	bne.n	8007a12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fccc 	bl	80083aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1c:	2b40      	cmp	r3, #64	; 0x40
 8007a1e:	d10e      	bne.n	8007a3e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2a:	2b40      	cmp	r3, #64	; 0x40
 8007a2c:	d107      	bne.n	8007a3e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f9bc 	bl	8007db6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d10e      	bne.n	8007a6a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f003 0320 	and.w	r3, r3, #32
 8007a56:	2b20      	cmp	r3, #32
 8007a58:	d107      	bne.n	8007a6a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f06f 0220 	mvn.w	r2, #32
 8007a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fc97 	bl	8008398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a6a:	bf00      	nop
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d101      	bne.n	8007a8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e0b4      	b.n	8007bf8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b0c      	cmp	r3, #12
 8007aa2:	f200 809f 	bhi.w	8007be4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007aa6:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aac:	08007ae1 	.word	0x08007ae1
 8007ab0:	08007be5 	.word	0x08007be5
 8007ab4:	08007be5 	.word	0x08007be5
 8007ab8:	08007be5 	.word	0x08007be5
 8007abc:	08007b21 	.word	0x08007b21
 8007ac0:	08007be5 	.word	0x08007be5
 8007ac4:	08007be5 	.word	0x08007be5
 8007ac8:	08007be5 	.word	0x08007be5
 8007acc:	08007b63 	.word	0x08007b63
 8007ad0:	08007be5 	.word	0x08007be5
 8007ad4:	08007be5 	.word	0x08007be5
 8007ad8:	08007be5 	.word	0x08007be5
 8007adc:	08007ba3 	.word	0x08007ba3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68b9      	ldr	r1, [r7, #8]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 f9d0 	bl	8007e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	699a      	ldr	r2, [r3, #24]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0208 	orr.w	r2, r2, #8
 8007afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f022 0204 	bic.w	r2, r2, #4
 8007b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6999      	ldr	r1, [r3, #24]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	691a      	ldr	r2, [r3, #16]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	619a      	str	r2, [r3, #24]
      break;
 8007b1e:	e062      	b.n	8007be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68b9      	ldr	r1, [r7, #8]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 fa16 	bl	8007f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	699a      	ldr	r2, [r3, #24]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699a      	ldr	r2, [r3, #24]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6999      	ldr	r1, [r3, #24]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	021a      	lsls	r2, r3, #8
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	619a      	str	r2, [r3, #24]
      break;
 8007b60:	e041      	b.n	8007be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68b9      	ldr	r1, [r7, #8]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fa5f 	bl	800802c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	69da      	ldr	r2, [r3, #28]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f042 0208 	orr.w	r2, r2, #8
 8007b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69da      	ldr	r2, [r3, #28]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 0204 	bic.w	r2, r2, #4
 8007b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69d9      	ldr	r1, [r3, #28]
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	61da      	str	r2, [r3, #28]
      break;
 8007ba0:	e021      	b.n	8007be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68b9      	ldr	r1, [r7, #8]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 faa9 	bl	8008100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69da      	ldr	r2, [r3, #28]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	69da      	ldr	r2, [r3, #28]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69d9      	ldr	r1, [r3, #28]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	021a      	lsls	r2, r3, #8
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	61da      	str	r2, [r3, #28]
      break;
 8007be2:	e000      	b.n	8007be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007be4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d101      	bne.n	8007c18 <HAL_TIM_ConfigClockSource+0x18>
 8007c14:	2302      	movs	r3, #2
 8007c16:	e0a6      	b.n	8007d66 <HAL_TIM_ConfigClockSource+0x166>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b40      	cmp	r3, #64	; 0x40
 8007c4e:	d067      	beq.n	8007d20 <HAL_TIM_ConfigClockSource+0x120>
 8007c50:	2b40      	cmp	r3, #64	; 0x40
 8007c52:	d80b      	bhi.n	8007c6c <HAL_TIM_ConfigClockSource+0x6c>
 8007c54:	2b10      	cmp	r3, #16
 8007c56:	d073      	beq.n	8007d40 <HAL_TIM_ConfigClockSource+0x140>
 8007c58:	2b10      	cmp	r3, #16
 8007c5a:	d802      	bhi.n	8007c62 <HAL_TIM_ConfigClockSource+0x62>
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d06f      	beq.n	8007d40 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007c60:	e078      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	d06c      	beq.n	8007d40 <HAL_TIM_ConfigClockSource+0x140>
 8007c66:	2b30      	cmp	r3, #48	; 0x30
 8007c68:	d06a      	beq.n	8007d40 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007c6a:	e073      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007c6c:	2b70      	cmp	r3, #112	; 0x70
 8007c6e:	d00d      	beq.n	8007c8c <HAL_TIM_ConfigClockSource+0x8c>
 8007c70:	2b70      	cmp	r3, #112	; 0x70
 8007c72:	d804      	bhi.n	8007c7e <HAL_TIM_ConfigClockSource+0x7e>
 8007c74:	2b50      	cmp	r3, #80	; 0x50
 8007c76:	d033      	beq.n	8007ce0 <HAL_TIM_ConfigClockSource+0xe0>
 8007c78:	2b60      	cmp	r3, #96	; 0x60
 8007c7a:	d041      	beq.n	8007d00 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007c7c:	e06a      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c82:	d066      	beq.n	8007d52 <HAL_TIM_ConfigClockSource+0x152>
 8007c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c88:	d017      	beq.n	8007cba <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007c8a:	e063      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6818      	ldr	r0, [r3, #0]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	6899      	ldr	r1, [r3, #8]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f000 faf5 	bl	800828a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007cae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	609a      	str	r2, [r3, #8]
      break;
 8007cb8:	e04c      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	6899      	ldr	r1, [r3, #8]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f000 fade 	bl	800828a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cdc:	609a      	str	r2, [r3, #8]
      break;
 8007cde:	e039      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6818      	ldr	r0, [r3, #0]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	6859      	ldr	r1, [r3, #4]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	461a      	mov	r2, r3
 8007cee:	f000 fa55 	bl	800819c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2150      	movs	r1, #80	; 0x50
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 faac 	bl	8008256 <TIM_ITRx_SetConfig>
      break;
 8007cfe:	e029      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6818      	ldr	r0, [r3, #0]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	6859      	ldr	r1, [r3, #4]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	f000 fa73 	bl	80081f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2160      	movs	r1, #96	; 0x60
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fa9c 	bl	8008256 <TIM_ITRx_SetConfig>
      break;
 8007d1e:	e019      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6818      	ldr	r0, [r3, #0]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	6859      	ldr	r1, [r3, #4]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f000 fa35 	bl	800819c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2140      	movs	r1, #64	; 0x40
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fa8c 	bl	8008256 <TIM_ITRx_SetConfig>
      break;
 8007d3e:	e009      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	f000 fa83 	bl	8008256 <TIM_ITRx_SetConfig>
      break;
 8007d50:	e000      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007d52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bc80      	pop	{r7}
 8007d7e:	4770      	bx	lr

08007d80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bc80      	pop	{r7}
 8007d90:	4770      	bx	lr

08007d92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bc80      	pop	{r7}
 8007da2:	4770      	bx	lr

08007da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bc80      	pop	{r7}
 8007db4:	4770      	bx	lr

08007db6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bc80      	pop	{r7}
 8007dc6:	4770      	bx	lr

08007dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a29      	ldr	r2, [pc, #164]	; (8007e80 <TIM_Base_SetConfig+0xb8>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d00b      	beq.n	8007df8 <TIM_Base_SetConfig+0x30>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de6:	d007      	beq.n	8007df8 <TIM_Base_SetConfig+0x30>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a26      	ldr	r2, [pc, #152]	; (8007e84 <TIM_Base_SetConfig+0xbc>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d003      	beq.n	8007df8 <TIM_Base_SetConfig+0x30>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a25      	ldr	r2, [pc, #148]	; (8007e88 <TIM_Base_SetConfig+0xc0>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d108      	bne.n	8007e0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a1c      	ldr	r2, [pc, #112]	; (8007e80 <TIM_Base_SetConfig+0xb8>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00b      	beq.n	8007e2a <TIM_Base_SetConfig+0x62>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e18:	d007      	beq.n	8007e2a <TIM_Base_SetConfig+0x62>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a19      	ldr	r2, [pc, #100]	; (8007e84 <TIM_Base_SetConfig+0xbc>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d003      	beq.n	8007e2a <TIM_Base_SetConfig+0x62>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a18      	ldr	r2, [pc, #96]	; (8007e88 <TIM_Base_SetConfig+0xc0>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d108      	bne.n	8007e3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a07      	ldr	r2, [pc, #28]	; (8007e80 <TIM_Base_SetConfig+0xb8>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d103      	bne.n	8007e70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	691a      	ldr	r2, [r3, #16]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	615a      	str	r2, [r3, #20]
}
 8007e76:	bf00      	nop
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bc80      	pop	{r7}
 8007e7e:	4770      	bx	lr
 8007e80:	40012c00 	.word	0x40012c00
 8007e84:	40000400 	.word	0x40000400
 8007e88:	40000800 	.word	0x40000800

08007e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	f023 0201 	bic.w	r2, r3, #1
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 0303 	bic.w	r3, r3, #3
 8007ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f023 0302 	bic.w	r3, r3, #2
 8007ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a1c      	ldr	r2, [pc, #112]	; (8007f54 <TIM_OC1_SetConfig+0xc8>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d10c      	bne.n	8007f02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f023 0308 	bic.w	r3, r3, #8
 8007eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f023 0304 	bic.w	r3, r3, #4
 8007f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a13      	ldr	r2, [pc, #76]	; (8007f54 <TIM_OC1_SetConfig+0xc8>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d111      	bne.n	8007f2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	621a      	str	r2, [r3, #32]
}
 8007f48:	bf00      	nop
 8007f4a:	371c      	adds	r7, #28
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bc80      	pop	{r7}
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	40012c00 	.word	0x40012c00

08007f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	f023 0210 	bic.w	r2, r3, #16
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	021b      	lsls	r3, r3, #8
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f023 0320 	bic.w	r3, r3, #32
 8007fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	011b      	lsls	r3, r3, #4
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a1d      	ldr	r2, [pc, #116]	; (8008028 <TIM_OC2_SetConfig+0xd0>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d10d      	bne.n	8007fd4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	011b      	lsls	r3, r3, #4
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a14      	ldr	r2, [pc, #80]	; (8008028 <TIM_OC2_SetConfig+0xd0>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d113      	bne.n	8008004 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	695b      	ldr	r3, [r3, #20]
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	4313      	orrs	r3, r2
 8008002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	621a      	str	r2, [r3, #32]
}
 800801e:	bf00      	nop
 8008020:	371c      	adds	r7, #28
 8008022:	46bd      	mov	sp, r7
 8008024:	bc80      	pop	{r7}
 8008026:	4770      	bx	lr
 8008028:	40012c00 	.word	0x40012c00

0800802c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800802c:	b480      	push	{r7}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 0303 	bic.w	r3, r3, #3
 8008062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	021b      	lsls	r3, r3, #8
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	4313      	orrs	r3, r2
 8008080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a1d      	ldr	r2, [pc, #116]	; (80080fc <TIM_OC3_SetConfig+0xd0>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d10d      	bne.n	80080a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	021b      	lsls	r3, r3, #8
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	4313      	orrs	r3, r2
 800809c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a14      	ldr	r2, [pc, #80]	; (80080fc <TIM_OC3_SetConfig+0xd0>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d113      	bne.n	80080d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	011b      	lsls	r3, r3, #4
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	621a      	str	r2, [r3, #32]
}
 80080f0:	bf00      	nop
 80080f2:	371c      	adds	r7, #28
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bc80      	pop	{r7}
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	40012c00 	.word	0x40012c00

08008100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800812e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	021b      	lsls	r3, r3, #8
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	4313      	orrs	r3, r2
 8008142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800814a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	031b      	lsls	r3, r3, #12
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	4313      	orrs	r3, r2
 8008156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a0f      	ldr	r2, [pc, #60]	; (8008198 <TIM_OC4_SetConfig+0x98>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d109      	bne.n	8008174 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	019b      	lsls	r3, r3, #6
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	4313      	orrs	r3, r2
 8008172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	621a      	str	r2, [r3, #32]
}
 800818e:	bf00      	nop
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	bc80      	pop	{r7}
 8008196:	4770      	bx	lr
 8008198:	40012c00 	.word	0x40012c00

0800819c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	f023 0201 	bic.w	r2, r3, #1
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	f023 030a 	bic.w	r3, r3, #10
 80081d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4313      	orrs	r3, r2
 80081e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	621a      	str	r2, [r3, #32]
}
 80081ee:	bf00      	nop
 80081f0:	371c      	adds	r7, #28
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bc80      	pop	{r7}
 80081f6:	4770      	bx	lr

080081f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	f023 0210 	bic.w	r2, r3, #16
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008222:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	031b      	lsls	r3, r3, #12
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008234:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	011b      	lsls	r3, r3, #4
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	621a      	str	r2, [r3, #32]
}
 800824c:	bf00      	nop
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	bc80      	pop	{r7}
 8008254:	4770      	bx	lr

08008256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008256:	b480      	push	{r7}
 8008258:	b085      	sub	sp, #20
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	f043 0307 	orr.w	r3, r3, #7
 8008278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	609a      	str	r2, [r3, #8]
}
 8008280:	bf00      	nop
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	bc80      	pop	{r7}
 8008288:	4770      	bx	lr

0800828a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800828a:	b480      	push	{r7}
 800828c:	b087      	sub	sp, #28
 800828e:	af00      	add	r7, sp, #0
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	607a      	str	r2, [r7, #4]
 8008296:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	021a      	lsls	r2, r3, #8
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	431a      	orrs	r2, r3
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	609a      	str	r2, [r3, #8]
}
 80082be:	bf00      	nop
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bc80      	pop	{r7}
 80082c6:	4770      	bx	lr

080082c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f003 031f 	and.w	r3, r3, #31
 80082da:	2201      	movs	r2, #1
 80082dc:	fa02 f303 	lsl.w	r3, r2, r3
 80082e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6a1a      	ldr	r2, [r3, #32]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	43db      	mvns	r3, r3
 80082ea:	401a      	ands	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6a1a      	ldr	r2, [r3, #32]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f003 031f 	and.w	r3, r3, #31
 80082fa:	6879      	ldr	r1, [r7, #4]
 80082fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008300:	431a      	orrs	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	621a      	str	r2, [r3, #32]
}
 8008306:	bf00      	nop
 8008308:	371c      	adds	r7, #28
 800830a:	46bd      	mov	sp, r7
 800830c:	bc80      	pop	{r7}
 800830e:	4770      	bx	lr

08008310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008320:	2b01      	cmp	r3, #1
 8008322:	d101      	bne.n	8008328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008324:	2302      	movs	r3, #2
 8008326:	e032      	b.n	800838e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800834e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	4313      	orrs	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008360:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	4313      	orrs	r3, r2
 800836a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr

08008398 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr

080083aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083b2:	bf00      	nop
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bc80      	pop	{r7}
 80083ba:	4770      	bx	lr

080083bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e03f      	b.n	800844e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d106      	bne.n	80083e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7fd fcfa 	bl	8005ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2224      	movs	r2, #36	; 0x24
 80083ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f9b1 	bl	8008768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	691a      	ldr	r2, [r3, #16]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	695a      	ldr	r2, [r3, #20]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008424:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68da      	ldr	r2, [r3, #12]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008434:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2220      	movs	r2, #32
 8008440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2220      	movs	r2, #32
 8008448:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b088      	sub	sp, #32
 800845a:	af02      	add	r7, sp, #8
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	603b      	str	r3, [r7, #0]
 8008462:	4613      	mov	r3, r2
 8008464:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b20      	cmp	r3, #32
 8008474:	f040 8083 	bne.w	800857e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d002      	beq.n	8008484 <HAL_UART_Transmit+0x2e>
 800847e:	88fb      	ldrh	r3, [r7, #6]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e07b      	b.n	8008580 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800848e:	2b01      	cmp	r3, #1
 8008490:	d101      	bne.n	8008496 <HAL_UART_Transmit+0x40>
 8008492:	2302      	movs	r3, #2
 8008494:	e074      	b.n	8008580 <HAL_UART_Transmit+0x12a>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2221      	movs	r2, #33	; 0x21
 80084a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80084ac:	f7fd fd7e 	bl	8005fac <HAL_GetTick>
 80084b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	88fa      	ldrh	r2, [r7, #6]
 80084b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	88fa      	ldrh	r2, [r7, #6]
 80084bc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80084be:	e042      	b.n	8008546 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	3b01      	subs	r3, #1
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d6:	d122      	bne.n	800851e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	2200      	movs	r2, #0
 80084e0:	2180      	movs	r1, #128	; 0x80
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 f8f6 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e046      	b.n	8008580 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008504:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d103      	bne.n	8008516 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	3302      	adds	r3, #2
 8008512:	60bb      	str	r3, [r7, #8]
 8008514:	e017      	b.n	8008546 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	3301      	adds	r3, #1
 800851a:	60bb      	str	r3, [r7, #8]
 800851c:	e013      	b.n	8008546 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2200      	movs	r2, #0
 8008526:	2180      	movs	r1, #128	; 0x80
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 f8d3 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e023      	b.n	8008580 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	1c5a      	adds	r2, r3, #1
 800853c:	60ba      	str	r2, [r7, #8]
 800853e:	781a      	ldrb	r2, [r3, #0]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800854a:	b29b      	uxth	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1b7      	bne.n	80084c0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	2200      	movs	r2, #0
 8008558:	2140      	movs	r1, #64	; 0x40
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 f8ba 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e00a      	b.n	8008580 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2220      	movs	r2, #32
 800856e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	e000      	b.n	8008580 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800857e:	2302      	movs	r3, #2
  }
}
 8008580:	4618      	mov	r0, r3
 8008582:	3718      	adds	r7, #24
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af02      	add	r7, sp, #8
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	603b      	str	r3, [r7, #0]
 8008594:	4613      	mov	r3, r2
 8008596:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008598:	2300      	movs	r3, #0
 800859a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b20      	cmp	r3, #32
 80085a6:	f040 8090 	bne.w	80086ca <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <HAL_UART_Receive+0x2e>
 80085b0:	88fb      	ldrh	r3, [r7, #6]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e088      	b.n	80086cc <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <HAL_UART_Receive+0x40>
 80085c4:	2302      	movs	r3, #2
 80085c6:	e081      	b.n	80086cc <HAL_UART_Receive+0x144>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2222      	movs	r2, #34	; 0x22
 80085da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80085de:	f7fd fce5 	bl	8005fac <HAL_GetTick>
 80085e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	88fa      	ldrh	r2, [r7, #6]
 80085e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	88fa      	ldrh	r2, [r7, #6]
 80085ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80085f0:	e05c      	b.n	80086ac <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	3b01      	subs	r3, #1
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008608:	d12b      	bne.n	8008662 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	2200      	movs	r2, #0
 8008612:	2120      	movs	r1, #32
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 f85d 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e053      	b.n	80086cc <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10c      	bne.n	800864a <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	b29b      	uxth	r3, r3
 8008638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800863c:	b29a      	uxth	r2, r3
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	3302      	adds	r3, #2
 8008646:	60bb      	str	r3, [r7, #8]
 8008648:	e030      	b.n	80086ac <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	b29b      	uxth	r3, r3
 8008652:	b2db      	uxtb	r3, r3
 8008654:	b29a      	uxth	r2, r3
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	3301      	adds	r3, #1
 800865e:	60bb      	str	r3, [r7, #8]
 8008660:	e024      	b.n	80086ac <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	2200      	movs	r2, #0
 800866a:	2120      	movs	r1, #32
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 f831 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e027      	b.n	80086cc <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d108      	bne.n	8008696 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6859      	ldr	r1, [r3, #4]
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	1c5a      	adds	r2, r3, #1
 800868e:	60ba      	str	r2, [r7, #8]
 8008690:	b2ca      	uxtb	r2, r1
 8008692:	701a      	strb	r2, [r3, #0]
 8008694:	e00a      	b.n	80086ac <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	b2da      	uxtb	r2, r3
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	1c59      	adds	r1, r3, #1
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80086a8:	b2d2      	uxtb	r2, r2
 80086aa:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d19d      	bne.n	80085f2 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2220      	movs	r2, #32
 80086ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	e000      	b.n	80086cc <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80086ca:	2302      	movs	r3, #2
  }
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	603b      	str	r3, [r7, #0]
 80086e0:	4613      	mov	r3, r2
 80086e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086e4:	e02c      	b.n	8008740 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ec:	d028      	beq.n	8008740 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d007      	beq.n	8008704 <UART_WaitOnFlagUntilTimeout+0x30>
 80086f4:	f7fd fc5a 	bl	8005fac <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	429a      	cmp	r2, r3
 8008702:	d21d      	bcs.n	8008740 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68da      	ldr	r2, [r3, #12]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008712:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	695a      	ldr	r2, [r3, #20]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 0201 	bic.w	r2, r2, #1
 8008722:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2220      	movs	r2, #32
 8008728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2220      	movs	r2, #32
 8008730:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e00f      	b.n	8008760 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	4013      	ands	r3, r2
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	429a      	cmp	r2, r3
 800874e:	bf0c      	ite	eq
 8008750:	2301      	moveq	r3, #1
 8008752:	2300      	movne	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	429a      	cmp	r2, r3
 800875c:	d0c3      	beq.n	80086e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	431a      	orrs	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	4313      	orrs	r3, r2
 8008796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80087a2:	f023 030c 	bic.w	r3, r3, #12
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	6812      	ldr	r2, [r2, #0]
 80087aa:	68f9      	ldr	r1, [r7, #12]
 80087ac:	430b      	orrs	r3, r1
 80087ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	699a      	ldr	r2, [r3, #24]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a52      	ldr	r2, [pc, #328]	; (8008914 <UART_SetConfig+0x1ac>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d14e      	bne.n	800886e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80087d0:	f7fe fde6 	bl	80073a0 <HAL_RCC_GetPCLK2Freq>
 80087d4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	009a      	lsls	r2, r3, #2
 80087e0:	441a      	add	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ec:	4a4a      	ldr	r2, [pc, #296]	; (8008918 <UART_SetConfig+0x1b0>)
 80087ee:	fba2 2303 	umull	r2, r3, r2, r3
 80087f2:	095b      	lsrs	r3, r3, #5
 80087f4:	0119      	lsls	r1, r3, #4
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	4613      	mov	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	009a      	lsls	r2, r3, #2
 8008800:	441a      	add	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	fbb2 f2f3 	udiv	r2, r2, r3
 800880c:	4b42      	ldr	r3, [pc, #264]	; (8008918 <UART_SetConfig+0x1b0>)
 800880e:	fba3 0302 	umull	r0, r3, r3, r2
 8008812:	095b      	lsrs	r3, r3, #5
 8008814:	2064      	movs	r0, #100	; 0x64
 8008816:	fb00 f303 	mul.w	r3, r0, r3
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	011b      	lsls	r3, r3, #4
 800881e:	3332      	adds	r3, #50	; 0x32
 8008820:	4a3d      	ldr	r2, [pc, #244]	; (8008918 <UART_SetConfig+0x1b0>)
 8008822:	fba2 2303 	umull	r2, r3, r2, r3
 8008826:	095b      	lsrs	r3, r3, #5
 8008828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800882c:	4419      	add	r1, r3
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	4613      	mov	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	009a      	lsls	r2, r3, #2
 8008838:	441a      	add	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	fbb2 f2f3 	udiv	r2, r2, r3
 8008844:	4b34      	ldr	r3, [pc, #208]	; (8008918 <UART_SetConfig+0x1b0>)
 8008846:	fba3 0302 	umull	r0, r3, r3, r2
 800884a:	095b      	lsrs	r3, r3, #5
 800884c:	2064      	movs	r0, #100	; 0x64
 800884e:	fb00 f303 	mul.w	r3, r0, r3
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	011b      	lsls	r3, r3, #4
 8008856:	3332      	adds	r3, #50	; 0x32
 8008858:	4a2f      	ldr	r2, [pc, #188]	; (8008918 <UART_SetConfig+0x1b0>)
 800885a:	fba2 2303 	umull	r2, r3, r2, r3
 800885e:	095b      	lsrs	r3, r3, #5
 8008860:	f003 020f 	and.w	r2, r3, #15
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	440a      	add	r2, r1
 800886a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800886c:	e04d      	b.n	800890a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800886e:	f7fe fd83 	bl	8007378 <HAL_RCC_GetPCLK1Freq>
 8008872:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	4613      	mov	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4413      	add	r3, r2
 800887c:	009a      	lsls	r2, r3, #2
 800887e:	441a      	add	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	fbb2 f3f3 	udiv	r3, r2, r3
 800888a:	4a23      	ldr	r2, [pc, #140]	; (8008918 <UART_SetConfig+0x1b0>)
 800888c:	fba2 2303 	umull	r2, r3, r2, r3
 8008890:	095b      	lsrs	r3, r3, #5
 8008892:	0119      	lsls	r1, r3, #4
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	4613      	mov	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	009a      	lsls	r2, r3, #2
 800889e:	441a      	add	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80088aa:	4b1b      	ldr	r3, [pc, #108]	; (8008918 <UART_SetConfig+0x1b0>)
 80088ac:	fba3 0302 	umull	r0, r3, r3, r2
 80088b0:	095b      	lsrs	r3, r3, #5
 80088b2:	2064      	movs	r0, #100	; 0x64
 80088b4:	fb00 f303 	mul.w	r3, r0, r3
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	011b      	lsls	r3, r3, #4
 80088bc:	3332      	adds	r3, #50	; 0x32
 80088be:	4a16      	ldr	r2, [pc, #88]	; (8008918 <UART_SetConfig+0x1b0>)
 80088c0:	fba2 2303 	umull	r2, r3, r2, r3
 80088c4:	095b      	lsrs	r3, r3, #5
 80088c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088ca:	4419      	add	r1, r3
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009a      	lsls	r2, r3, #2
 80088d6:	441a      	add	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	fbb2 f2f3 	udiv	r2, r2, r3
 80088e2:	4b0d      	ldr	r3, [pc, #52]	; (8008918 <UART_SetConfig+0x1b0>)
 80088e4:	fba3 0302 	umull	r0, r3, r3, r2
 80088e8:	095b      	lsrs	r3, r3, #5
 80088ea:	2064      	movs	r0, #100	; 0x64
 80088ec:	fb00 f303 	mul.w	r3, r0, r3
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	3332      	adds	r3, #50	; 0x32
 80088f6:	4a08      	ldr	r2, [pc, #32]	; (8008918 <UART_SetConfig+0x1b0>)
 80088f8:	fba2 2303 	umull	r2, r3, r2, r3
 80088fc:	095b      	lsrs	r3, r3, #5
 80088fe:	f003 020f 	and.w	r2, r3, #15
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	440a      	add	r2, r1
 8008908:	609a      	str	r2, [r3, #8]
}
 800890a:	bf00      	nop
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	40013800 	.word	0x40013800
 8008918:	51eb851f 	.word	0x51eb851f

0800891c <__errno>:
 800891c:	4b01      	ldr	r3, [pc, #4]	; (8008924 <__errno+0x8>)
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	2000001c 	.word	0x2000001c

08008928 <__libc_init_array>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	2500      	movs	r5, #0
 800892c:	4e0c      	ldr	r6, [pc, #48]	; (8008960 <__libc_init_array+0x38>)
 800892e:	4c0d      	ldr	r4, [pc, #52]	; (8008964 <__libc_init_array+0x3c>)
 8008930:	1ba4      	subs	r4, r4, r6
 8008932:	10a4      	asrs	r4, r4, #2
 8008934:	42a5      	cmp	r5, r4
 8008936:	d109      	bne.n	800894c <__libc_init_array+0x24>
 8008938:	f000 fc34 	bl	80091a4 <_init>
 800893c:	2500      	movs	r5, #0
 800893e:	4e0a      	ldr	r6, [pc, #40]	; (8008968 <__libc_init_array+0x40>)
 8008940:	4c0a      	ldr	r4, [pc, #40]	; (800896c <__libc_init_array+0x44>)
 8008942:	1ba4      	subs	r4, r4, r6
 8008944:	10a4      	asrs	r4, r4, #2
 8008946:	42a5      	cmp	r5, r4
 8008948:	d105      	bne.n	8008956 <__libc_init_array+0x2e>
 800894a:	bd70      	pop	{r4, r5, r6, pc}
 800894c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008950:	4798      	blx	r3
 8008952:	3501      	adds	r5, #1
 8008954:	e7ee      	b.n	8008934 <__libc_init_array+0xc>
 8008956:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800895a:	4798      	blx	r3
 800895c:	3501      	adds	r5, #1
 800895e:	e7f2      	b.n	8008946 <__libc_init_array+0x1e>
 8008960:	08009248 	.word	0x08009248
 8008964:	08009248 	.word	0x08009248
 8008968:	08009248 	.word	0x08009248
 800896c:	0800924c 	.word	0x0800924c

08008970 <memset>:
 8008970:	4603      	mov	r3, r0
 8008972:	4402      	add	r2, r0
 8008974:	4293      	cmp	r3, r2
 8008976:	d100      	bne.n	800897a <memset+0xa>
 8008978:	4770      	bx	lr
 800897a:	f803 1b01 	strb.w	r1, [r3], #1
 800897e:	e7f9      	b.n	8008974 <memset+0x4>

08008980 <siprintf>:
 8008980:	b40e      	push	{r1, r2, r3}
 8008982:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008986:	b500      	push	{lr}
 8008988:	b09c      	sub	sp, #112	; 0x70
 800898a:	ab1d      	add	r3, sp, #116	; 0x74
 800898c:	9002      	str	r0, [sp, #8]
 800898e:	9006      	str	r0, [sp, #24]
 8008990:	9107      	str	r1, [sp, #28]
 8008992:	9104      	str	r1, [sp, #16]
 8008994:	4808      	ldr	r0, [pc, #32]	; (80089b8 <siprintf+0x38>)
 8008996:	4909      	ldr	r1, [pc, #36]	; (80089bc <siprintf+0x3c>)
 8008998:	f853 2b04 	ldr.w	r2, [r3], #4
 800899c:	9105      	str	r1, [sp, #20]
 800899e:	6800      	ldr	r0, [r0, #0]
 80089a0:	a902      	add	r1, sp, #8
 80089a2:	9301      	str	r3, [sp, #4]
 80089a4:	f000 f866 	bl	8008a74 <_svfiprintf_r>
 80089a8:	2200      	movs	r2, #0
 80089aa:	9b02      	ldr	r3, [sp, #8]
 80089ac:	701a      	strb	r2, [r3, #0]
 80089ae:	b01c      	add	sp, #112	; 0x70
 80089b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089b4:	b003      	add	sp, #12
 80089b6:	4770      	bx	lr
 80089b8:	2000001c 	.word	0x2000001c
 80089bc:	ffff0208 	.word	0xffff0208

080089c0 <__ssputs_r>:
 80089c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	688e      	ldr	r6, [r1, #8]
 80089c6:	4682      	mov	sl, r0
 80089c8:	429e      	cmp	r6, r3
 80089ca:	460c      	mov	r4, r1
 80089cc:	4690      	mov	r8, r2
 80089ce:	4699      	mov	r9, r3
 80089d0:	d837      	bhi.n	8008a42 <__ssputs_r+0x82>
 80089d2:	898a      	ldrh	r2, [r1, #12]
 80089d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089d8:	d031      	beq.n	8008a3e <__ssputs_r+0x7e>
 80089da:	2302      	movs	r3, #2
 80089dc:	6825      	ldr	r5, [r4, #0]
 80089de:	6909      	ldr	r1, [r1, #16]
 80089e0:	1a6f      	subs	r7, r5, r1
 80089e2:	6965      	ldr	r5, [r4, #20]
 80089e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80089ec:	f109 0301 	add.w	r3, r9, #1
 80089f0:	443b      	add	r3, r7
 80089f2:	429d      	cmp	r5, r3
 80089f4:	bf38      	it	cc
 80089f6:	461d      	movcc	r5, r3
 80089f8:	0553      	lsls	r3, r2, #21
 80089fa:	d530      	bpl.n	8008a5e <__ssputs_r+0x9e>
 80089fc:	4629      	mov	r1, r5
 80089fe:	f000 fb37 	bl	8009070 <_malloc_r>
 8008a02:	4606      	mov	r6, r0
 8008a04:	b950      	cbnz	r0, 8008a1c <__ssputs_r+0x5c>
 8008a06:	230c      	movs	r3, #12
 8008a08:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0c:	f8ca 3000 	str.w	r3, [sl]
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a16:	81a3      	strh	r3, [r4, #12]
 8008a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a1c:	463a      	mov	r2, r7
 8008a1e:	6921      	ldr	r1, [r4, #16]
 8008a20:	f000 fab6 	bl	8008f90 <memcpy>
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a2e:	81a3      	strh	r3, [r4, #12]
 8008a30:	6126      	str	r6, [r4, #16]
 8008a32:	443e      	add	r6, r7
 8008a34:	6026      	str	r6, [r4, #0]
 8008a36:	464e      	mov	r6, r9
 8008a38:	6165      	str	r5, [r4, #20]
 8008a3a:	1bed      	subs	r5, r5, r7
 8008a3c:	60a5      	str	r5, [r4, #8]
 8008a3e:	454e      	cmp	r6, r9
 8008a40:	d900      	bls.n	8008a44 <__ssputs_r+0x84>
 8008a42:	464e      	mov	r6, r9
 8008a44:	4632      	mov	r2, r6
 8008a46:	4641      	mov	r1, r8
 8008a48:	6820      	ldr	r0, [r4, #0]
 8008a4a:	f000 faac 	bl	8008fa6 <memmove>
 8008a4e:	68a3      	ldr	r3, [r4, #8]
 8008a50:	2000      	movs	r0, #0
 8008a52:	1b9b      	subs	r3, r3, r6
 8008a54:	60a3      	str	r3, [r4, #8]
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	441e      	add	r6, r3
 8008a5a:	6026      	str	r6, [r4, #0]
 8008a5c:	e7dc      	b.n	8008a18 <__ssputs_r+0x58>
 8008a5e:	462a      	mov	r2, r5
 8008a60:	f000 fb60 	bl	8009124 <_realloc_r>
 8008a64:	4606      	mov	r6, r0
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d1e2      	bne.n	8008a30 <__ssputs_r+0x70>
 8008a6a:	6921      	ldr	r1, [r4, #16]
 8008a6c:	4650      	mov	r0, sl
 8008a6e:	f000 fab3 	bl	8008fd8 <_free_r>
 8008a72:	e7c8      	b.n	8008a06 <__ssputs_r+0x46>

08008a74 <_svfiprintf_r>:
 8008a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a78:	461d      	mov	r5, r3
 8008a7a:	898b      	ldrh	r3, [r1, #12]
 8008a7c:	b09d      	sub	sp, #116	; 0x74
 8008a7e:	061f      	lsls	r7, r3, #24
 8008a80:	4680      	mov	r8, r0
 8008a82:	460c      	mov	r4, r1
 8008a84:	4616      	mov	r6, r2
 8008a86:	d50f      	bpl.n	8008aa8 <_svfiprintf_r+0x34>
 8008a88:	690b      	ldr	r3, [r1, #16]
 8008a8a:	b96b      	cbnz	r3, 8008aa8 <_svfiprintf_r+0x34>
 8008a8c:	2140      	movs	r1, #64	; 0x40
 8008a8e:	f000 faef 	bl	8009070 <_malloc_r>
 8008a92:	6020      	str	r0, [r4, #0]
 8008a94:	6120      	str	r0, [r4, #16]
 8008a96:	b928      	cbnz	r0, 8008aa4 <_svfiprintf_r+0x30>
 8008a98:	230c      	movs	r3, #12
 8008a9a:	f8c8 3000 	str.w	r3, [r8]
 8008a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa2:	e0c8      	b.n	8008c36 <_svfiprintf_r+0x1c2>
 8008aa4:	2340      	movs	r3, #64	; 0x40
 8008aa6:	6163      	str	r3, [r4, #20]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8008aac:	2320      	movs	r3, #32
 8008aae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ab2:	2330      	movs	r3, #48	; 0x30
 8008ab4:	f04f 0b01 	mov.w	fp, #1
 8008ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008abc:	9503      	str	r5, [sp, #12]
 8008abe:	4637      	mov	r7, r6
 8008ac0:	463d      	mov	r5, r7
 8008ac2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ac6:	b10b      	cbz	r3, 8008acc <_svfiprintf_r+0x58>
 8008ac8:	2b25      	cmp	r3, #37	; 0x25
 8008aca:	d13e      	bne.n	8008b4a <_svfiprintf_r+0xd6>
 8008acc:	ebb7 0a06 	subs.w	sl, r7, r6
 8008ad0:	d00b      	beq.n	8008aea <_svfiprintf_r+0x76>
 8008ad2:	4653      	mov	r3, sl
 8008ad4:	4632      	mov	r2, r6
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	4640      	mov	r0, r8
 8008ada:	f7ff ff71 	bl	80089c0 <__ssputs_r>
 8008ade:	3001      	adds	r0, #1
 8008ae0:	f000 80a4 	beq.w	8008c2c <_svfiprintf_r+0x1b8>
 8008ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae6:	4453      	add	r3, sl
 8008ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8008aea:	783b      	ldrb	r3, [r7, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 809d 	beq.w	8008c2c <_svfiprintf_r+0x1b8>
 8008af2:	2300      	movs	r3, #0
 8008af4:	f04f 32ff 	mov.w	r2, #4294967295
 8008af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008afc:	9304      	str	r3, [sp, #16]
 8008afe:	9307      	str	r3, [sp, #28]
 8008b00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b04:	931a      	str	r3, [sp, #104]	; 0x68
 8008b06:	462f      	mov	r7, r5
 8008b08:	2205      	movs	r2, #5
 8008b0a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008b0e:	4850      	ldr	r0, [pc, #320]	; (8008c50 <_svfiprintf_r+0x1dc>)
 8008b10:	f000 fa30 	bl	8008f74 <memchr>
 8008b14:	9b04      	ldr	r3, [sp, #16]
 8008b16:	b9d0      	cbnz	r0, 8008b4e <_svfiprintf_r+0xda>
 8008b18:	06d9      	lsls	r1, r3, #27
 8008b1a:	bf44      	itt	mi
 8008b1c:	2220      	movmi	r2, #32
 8008b1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b22:	071a      	lsls	r2, r3, #28
 8008b24:	bf44      	itt	mi
 8008b26:	222b      	movmi	r2, #43	; 0x2b
 8008b28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b2c:	782a      	ldrb	r2, [r5, #0]
 8008b2e:	2a2a      	cmp	r2, #42	; 0x2a
 8008b30:	d015      	beq.n	8008b5e <_svfiprintf_r+0xea>
 8008b32:	462f      	mov	r7, r5
 8008b34:	2000      	movs	r0, #0
 8008b36:	250a      	movs	r5, #10
 8008b38:	9a07      	ldr	r2, [sp, #28]
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b40:	3b30      	subs	r3, #48	; 0x30
 8008b42:	2b09      	cmp	r3, #9
 8008b44:	d94d      	bls.n	8008be2 <_svfiprintf_r+0x16e>
 8008b46:	b1b8      	cbz	r0, 8008b78 <_svfiprintf_r+0x104>
 8008b48:	e00f      	b.n	8008b6a <_svfiprintf_r+0xf6>
 8008b4a:	462f      	mov	r7, r5
 8008b4c:	e7b8      	b.n	8008ac0 <_svfiprintf_r+0x4c>
 8008b4e:	4a40      	ldr	r2, [pc, #256]	; (8008c50 <_svfiprintf_r+0x1dc>)
 8008b50:	463d      	mov	r5, r7
 8008b52:	1a80      	subs	r0, r0, r2
 8008b54:	fa0b f000 	lsl.w	r0, fp, r0
 8008b58:	4318      	orrs	r0, r3
 8008b5a:	9004      	str	r0, [sp, #16]
 8008b5c:	e7d3      	b.n	8008b06 <_svfiprintf_r+0x92>
 8008b5e:	9a03      	ldr	r2, [sp, #12]
 8008b60:	1d11      	adds	r1, r2, #4
 8008b62:	6812      	ldr	r2, [r2, #0]
 8008b64:	9103      	str	r1, [sp, #12]
 8008b66:	2a00      	cmp	r2, #0
 8008b68:	db01      	blt.n	8008b6e <_svfiprintf_r+0xfa>
 8008b6a:	9207      	str	r2, [sp, #28]
 8008b6c:	e004      	b.n	8008b78 <_svfiprintf_r+0x104>
 8008b6e:	4252      	negs	r2, r2
 8008b70:	f043 0302 	orr.w	r3, r3, #2
 8008b74:	9207      	str	r2, [sp, #28]
 8008b76:	9304      	str	r3, [sp, #16]
 8008b78:	783b      	ldrb	r3, [r7, #0]
 8008b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b7c:	d10c      	bne.n	8008b98 <_svfiprintf_r+0x124>
 8008b7e:	787b      	ldrb	r3, [r7, #1]
 8008b80:	2b2a      	cmp	r3, #42	; 0x2a
 8008b82:	d133      	bne.n	8008bec <_svfiprintf_r+0x178>
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	3702      	adds	r7, #2
 8008b88:	1d1a      	adds	r2, r3, #4
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	9203      	str	r2, [sp, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	bfb8      	it	lt
 8008b92:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b96:	9305      	str	r3, [sp, #20]
 8008b98:	4d2e      	ldr	r5, [pc, #184]	; (8008c54 <_svfiprintf_r+0x1e0>)
 8008b9a:	2203      	movs	r2, #3
 8008b9c:	7839      	ldrb	r1, [r7, #0]
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	f000 f9e8 	bl	8008f74 <memchr>
 8008ba4:	b138      	cbz	r0, 8008bb6 <_svfiprintf_r+0x142>
 8008ba6:	2340      	movs	r3, #64	; 0x40
 8008ba8:	1b40      	subs	r0, r0, r5
 8008baa:	fa03 f000 	lsl.w	r0, r3, r0
 8008bae:	9b04      	ldr	r3, [sp, #16]
 8008bb0:	3701      	adds	r7, #1
 8008bb2:	4303      	orrs	r3, r0
 8008bb4:	9304      	str	r3, [sp, #16]
 8008bb6:	7839      	ldrb	r1, [r7, #0]
 8008bb8:	2206      	movs	r2, #6
 8008bba:	4827      	ldr	r0, [pc, #156]	; (8008c58 <_svfiprintf_r+0x1e4>)
 8008bbc:	1c7e      	adds	r6, r7, #1
 8008bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bc2:	f000 f9d7 	bl	8008f74 <memchr>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d038      	beq.n	8008c3c <_svfiprintf_r+0x1c8>
 8008bca:	4b24      	ldr	r3, [pc, #144]	; (8008c5c <_svfiprintf_r+0x1e8>)
 8008bcc:	bb13      	cbnz	r3, 8008c14 <_svfiprintf_r+0x1a0>
 8008bce:	9b03      	ldr	r3, [sp, #12]
 8008bd0:	3307      	adds	r3, #7
 8008bd2:	f023 0307 	bic.w	r3, r3, #7
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	9303      	str	r3, [sp, #12]
 8008bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bdc:	444b      	add	r3, r9
 8008bde:	9309      	str	r3, [sp, #36]	; 0x24
 8008be0:	e76d      	b.n	8008abe <_svfiprintf_r+0x4a>
 8008be2:	fb05 3202 	mla	r2, r5, r2, r3
 8008be6:	2001      	movs	r0, #1
 8008be8:	460f      	mov	r7, r1
 8008bea:	e7a6      	b.n	8008b3a <_svfiprintf_r+0xc6>
 8008bec:	2300      	movs	r3, #0
 8008bee:	250a      	movs	r5, #10
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	3701      	adds	r7, #1
 8008bf4:	9305      	str	r3, [sp, #20]
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bfc:	3a30      	subs	r2, #48	; 0x30
 8008bfe:	2a09      	cmp	r2, #9
 8008c00:	d903      	bls.n	8008c0a <_svfiprintf_r+0x196>
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0c8      	beq.n	8008b98 <_svfiprintf_r+0x124>
 8008c06:	9105      	str	r1, [sp, #20]
 8008c08:	e7c6      	b.n	8008b98 <_svfiprintf_r+0x124>
 8008c0a:	fb05 2101 	mla	r1, r5, r1, r2
 8008c0e:	2301      	movs	r3, #1
 8008c10:	4607      	mov	r7, r0
 8008c12:	e7f0      	b.n	8008bf6 <_svfiprintf_r+0x182>
 8008c14:	ab03      	add	r3, sp, #12
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	4622      	mov	r2, r4
 8008c1a:	4b11      	ldr	r3, [pc, #68]	; (8008c60 <_svfiprintf_r+0x1ec>)
 8008c1c:	a904      	add	r1, sp, #16
 8008c1e:	4640      	mov	r0, r8
 8008c20:	f3af 8000 	nop.w
 8008c24:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008c28:	4681      	mov	r9, r0
 8008c2a:	d1d6      	bne.n	8008bda <_svfiprintf_r+0x166>
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	065b      	lsls	r3, r3, #25
 8008c30:	f53f af35 	bmi.w	8008a9e <_svfiprintf_r+0x2a>
 8008c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c36:	b01d      	add	sp, #116	; 0x74
 8008c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c3c:	ab03      	add	r3, sp, #12
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	4622      	mov	r2, r4
 8008c42:	4b07      	ldr	r3, [pc, #28]	; (8008c60 <_svfiprintf_r+0x1ec>)
 8008c44:	a904      	add	r1, sp, #16
 8008c46:	4640      	mov	r0, r8
 8008c48:	f000 f882 	bl	8008d50 <_printf_i>
 8008c4c:	e7ea      	b.n	8008c24 <_svfiprintf_r+0x1b0>
 8008c4e:	bf00      	nop
 8008c50:	08009214 	.word	0x08009214
 8008c54:	0800921a 	.word	0x0800921a
 8008c58:	0800921e 	.word	0x0800921e
 8008c5c:	00000000 	.word	0x00000000
 8008c60:	080089c1 	.word	0x080089c1

08008c64 <_printf_common>:
 8008c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c68:	4691      	mov	r9, r2
 8008c6a:	461f      	mov	r7, r3
 8008c6c:	688a      	ldr	r2, [r1, #8]
 8008c6e:	690b      	ldr	r3, [r1, #16]
 8008c70:	4606      	mov	r6, r0
 8008c72:	4293      	cmp	r3, r2
 8008c74:	bfb8      	it	lt
 8008c76:	4613      	movlt	r3, r2
 8008c78:	f8c9 3000 	str.w	r3, [r9]
 8008c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c80:	460c      	mov	r4, r1
 8008c82:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c86:	b112      	cbz	r2, 8008c8e <_printf_common+0x2a>
 8008c88:	3301      	adds	r3, #1
 8008c8a:	f8c9 3000 	str.w	r3, [r9]
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	0699      	lsls	r1, r3, #26
 8008c92:	bf42      	ittt	mi
 8008c94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008c98:	3302      	addmi	r3, #2
 8008c9a:	f8c9 3000 	strmi.w	r3, [r9]
 8008c9e:	6825      	ldr	r5, [r4, #0]
 8008ca0:	f015 0506 	ands.w	r5, r5, #6
 8008ca4:	d107      	bne.n	8008cb6 <_printf_common+0x52>
 8008ca6:	f104 0a19 	add.w	sl, r4, #25
 8008caa:	68e3      	ldr	r3, [r4, #12]
 8008cac:	f8d9 2000 	ldr.w	r2, [r9]
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	42ab      	cmp	r3, r5
 8008cb4:	dc29      	bgt.n	8008d0a <_printf_common+0xa6>
 8008cb6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008cba:	6822      	ldr	r2, [r4, #0]
 8008cbc:	3300      	adds	r3, #0
 8008cbe:	bf18      	it	ne
 8008cc0:	2301      	movne	r3, #1
 8008cc2:	0692      	lsls	r2, r2, #26
 8008cc4:	d42e      	bmi.n	8008d24 <_printf_common+0xc0>
 8008cc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cca:	4639      	mov	r1, r7
 8008ccc:	4630      	mov	r0, r6
 8008cce:	47c0      	blx	r8
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	d021      	beq.n	8008d18 <_printf_common+0xb4>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	68e5      	ldr	r5, [r4, #12]
 8008cd8:	f003 0306 	and.w	r3, r3, #6
 8008cdc:	2b04      	cmp	r3, #4
 8008cde:	bf18      	it	ne
 8008ce0:	2500      	movne	r5, #0
 8008ce2:	f8d9 2000 	ldr.w	r2, [r9]
 8008ce6:	f04f 0900 	mov.w	r9, #0
 8008cea:	bf08      	it	eq
 8008cec:	1aad      	subeq	r5, r5, r2
 8008cee:	68a3      	ldr	r3, [r4, #8]
 8008cf0:	6922      	ldr	r2, [r4, #16]
 8008cf2:	bf08      	it	eq
 8008cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	bfc4      	itt	gt
 8008cfc:	1a9b      	subgt	r3, r3, r2
 8008cfe:	18ed      	addgt	r5, r5, r3
 8008d00:	341a      	adds	r4, #26
 8008d02:	454d      	cmp	r5, r9
 8008d04:	d11a      	bne.n	8008d3c <_printf_common+0xd8>
 8008d06:	2000      	movs	r0, #0
 8008d08:	e008      	b.n	8008d1c <_printf_common+0xb8>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4652      	mov	r2, sl
 8008d0e:	4639      	mov	r1, r7
 8008d10:	4630      	mov	r0, r6
 8008d12:	47c0      	blx	r8
 8008d14:	3001      	adds	r0, #1
 8008d16:	d103      	bne.n	8008d20 <_printf_common+0xbc>
 8008d18:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d20:	3501      	adds	r5, #1
 8008d22:	e7c2      	b.n	8008caa <_printf_common+0x46>
 8008d24:	2030      	movs	r0, #48	; 0x30
 8008d26:	18e1      	adds	r1, r4, r3
 8008d28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d32:	4422      	add	r2, r4
 8008d34:	3302      	adds	r3, #2
 8008d36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d3a:	e7c4      	b.n	8008cc6 <_printf_common+0x62>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	4622      	mov	r2, r4
 8008d40:	4639      	mov	r1, r7
 8008d42:	4630      	mov	r0, r6
 8008d44:	47c0      	blx	r8
 8008d46:	3001      	adds	r0, #1
 8008d48:	d0e6      	beq.n	8008d18 <_printf_common+0xb4>
 8008d4a:	f109 0901 	add.w	r9, r9, #1
 8008d4e:	e7d8      	b.n	8008d02 <_printf_common+0x9e>

08008d50 <_printf_i>:
 8008d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d54:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008d58:	460c      	mov	r4, r1
 8008d5a:	7e09      	ldrb	r1, [r1, #24]
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	296e      	cmp	r1, #110	; 0x6e
 8008d60:	4617      	mov	r7, r2
 8008d62:	4606      	mov	r6, r0
 8008d64:	4698      	mov	r8, r3
 8008d66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d68:	f000 80b3 	beq.w	8008ed2 <_printf_i+0x182>
 8008d6c:	d822      	bhi.n	8008db4 <_printf_i+0x64>
 8008d6e:	2963      	cmp	r1, #99	; 0x63
 8008d70:	d036      	beq.n	8008de0 <_printf_i+0x90>
 8008d72:	d80a      	bhi.n	8008d8a <_printf_i+0x3a>
 8008d74:	2900      	cmp	r1, #0
 8008d76:	f000 80b9 	beq.w	8008eec <_printf_i+0x19c>
 8008d7a:	2958      	cmp	r1, #88	; 0x58
 8008d7c:	f000 8083 	beq.w	8008e86 <_printf_i+0x136>
 8008d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d84:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008d88:	e032      	b.n	8008df0 <_printf_i+0xa0>
 8008d8a:	2964      	cmp	r1, #100	; 0x64
 8008d8c:	d001      	beq.n	8008d92 <_printf_i+0x42>
 8008d8e:	2969      	cmp	r1, #105	; 0x69
 8008d90:	d1f6      	bne.n	8008d80 <_printf_i+0x30>
 8008d92:	6820      	ldr	r0, [r4, #0]
 8008d94:	6813      	ldr	r3, [r2, #0]
 8008d96:	0605      	lsls	r5, r0, #24
 8008d98:	f103 0104 	add.w	r1, r3, #4
 8008d9c:	d52a      	bpl.n	8008df4 <_printf_i+0xa4>
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6011      	str	r1, [r2, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	da03      	bge.n	8008dae <_printf_i+0x5e>
 8008da6:	222d      	movs	r2, #45	; 0x2d
 8008da8:	425b      	negs	r3, r3
 8008daa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008dae:	486f      	ldr	r0, [pc, #444]	; (8008f6c <_printf_i+0x21c>)
 8008db0:	220a      	movs	r2, #10
 8008db2:	e039      	b.n	8008e28 <_printf_i+0xd8>
 8008db4:	2973      	cmp	r1, #115	; 0x73
 8008db6:	f000 809d 	beq.w	8008ef4 <_printf_i+0x1a4>
 8008dba:	d808      	bhi.n	8008dce <_printf_i+0x7e>
 8008dbc:	296f      	cmp	r1, #111	; 0x6f
 8008dbe:	d020      	beq.n	8008e02 <_printf_i+0xb2>
 8008dc0:	2970      	cmp	r1, #112	; 0x70
 8008dc2:	d1dd      	bne.n	8008d80 <_printf_i+0x30>
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	f043 0320 	orr.w	r3, r3, #32
 8008dca:	6023      	str	r3, [r4, #0]
 8008dcc:	e003      	b.n	8008dd6 <_printf_i+0x86>
 8008dce:	2975      	cmp	r1, #117	; 0x75
 8008dd0:	d017      	beq.n	8008e02 <_printf_i+0xb2>
 8008dd2:	2978      	cmp	r1, #120	; 0x78
 8008dd4:	d1d4      	bne.n	8008d80 <_printf_i+0x30>
 8008dd6:	2378      	movs	r3, #120	; 0x78
 8008dd8:	4865      	ldr	r0, [pc, #404]	; (8008f70 <_printf_i+0x220>)
 8008dda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dde:	e055      	b.n	8008e8c <_printf_i+0x13c>
 8008de0:	6813      	ldr	r3, [r2, #0]
 8008de2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008de6:	1d19      	adds	r1, r3, #4
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6011      	str	r1, [r2, #0]
 8008dec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008df0:	2301      	movs	r3, #1
 8008df2:	e08c      	b.n	8008f0e <_printf_i+0x1be>
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008dfa:	6011      	str	r1, [r2, #0]
 8008dfc:	bf18      	it	ne
 8008dfe:	b21b      	sxthne	r3, r3
 8008e00:	e7cf      	b.n	8008da2 <_printf_i+0x52>
 8008e02:	6813      	ldr	r3, [r2, #0]
 8008e04:	6825      	ldr	r5, [r4, #0]
 8008e06:	1d18      	adds	r0, r3, #4
 8008e08:	6010      	str	r0, [r2, #0]
 8008e0a:	0628      	lsls	r0, r5, #24
 8008e0c:	d501      	bpl.n	8008e12 <_printf_i+0xc2>
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	e002      	b.n	8008e18 <_printf_i+0xc8>
 8008e12:	0668      	lsls	r0, r5, #25
 8008e14:	d5fb      	bpl.n	8008e0e <_printf_i+0xbe>
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	296f      	cmp	r1, #111	; 0x6f
 8008e1a:	bf14      	ite	ne
 8008e1c:	220a      	movne	r2, #10
 8008e1e:	2208      	moveq	r2, #8
 8008e20:	4852      	ldr	r0, [pc, #328]	; (8008f6c <_printf_i+0x21c>)
 8008e22:	2100      	movs	r1, #0
 8008e24:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e28:	6865      	ldr	r5, [r4, #4]
 8008e2a:	2d00      	cmp	r5, #0
 8008e2c:	60a5      	str	r5, [r4, #8]
 8008e2e:	f2c0 8095 	blt.w	8008f5c <_printf_i+0x20c>
 8008e32:	6821      	ldr	r1, [r4, #0]
 8008e34:	f021 0104 	bic.w	r1, r1, #4
 8008e38:	6021      	str	r1, [r4, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d13d      	bne.n	8008eba <_printf_i+0x16a>
 8008e3e:	2d00      	cmp	r5, #0
 8008e40:	f040 808e 	bne.w	8008f60 <_printf_i+0x210>
 8008e44:	4665      	mov	r5, ip
 8008e46:	2a08      	cmp	r2, #8
 8008e48:	d10b      	bne.n	8008e62 <_printf_i+0x112>
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	07db      	lsls	r3, r3, #31
 8008e4e:	d508      	bpl.n	8008e62 <_printf_i+0x112>
 8008e50:	6923      	ldr	r3, [r4, #16]
 8008e52:	6862      	ldr	r2, [r4, #4]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	bfde      	ittt	le
 8008e58:	2330      	movle	r3, #48	; 0x30
 8008e5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e62:	ebac 0305 	sub.w	r3, ip, r5
 8008e66:	6123      	str	r3, [r4, #16]
 8008e68:	f8cd 8000 	str.w	r8, [sp]
 8008e6c:	463b      	mov	r3, r7
 8008e6e:	aa03      	add	r2, sp, #12
 8008e70:	4621      	mov	r1, r4
 8008e72:	4630      	mov	r0, r6
 8008e74:	f7ff fef6 	bl	8008c64 <_printf_common>
 8008e78:	3001      	adds	r0, #1
 8008e7a:	d14d      	bne.n	8008f18 <_printf_i+0x1c8>
 8008e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e80:	b005      	add	sp, #20
 8008e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e86:	4839      	ldr	r0, [pc, #228]	; (8008f6c <_printf_i+0x21c>)
 8008e88:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008e8c:	6813      	ldr	r3, [r2, #0]
 8008e8e:	6821      	ldr	r1, [r4, #0]
 8008e90:	1d1d      	adds	r5, r3, #4
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6015      	str	r5, [r2, #0]
 8008e96:	060a      	lsls	r2, r1, #24
 8008e98:	d50b      	bpl.n	8008eb2 <_printf_i+0x162>
 8008e9a:	07ca      	lsls	r2, r1, #31
 8008e9c:	bf44      	itt	mi
 8008e9e:	f041 0120 	orrmi.w	r1, r1, #32
 8008ea2:	6021      	strmi	r1, [r4, #0]
 8008ea4:	b91b      	cbnz	r3, 8008eae <_printf_i+0x15e>
 8008ea6:	6822      	ldr	r2, [r4, #0]
 8008ea8:	f022 0220 	bic.w	r2, r2, #32
 8008eac:	6022      	str	r2, [r4, #0]
 8008eae:	2210      	movs	r2, #16
 8008eb0:	e7b7      	b.n	8008e22 <_printf_i+0xd2>
 8008eb2:	064d      	lsls	r5, r1, #25
 8008eb4:	bf48      	it	mi
 8008eb6:	b29b      	uxthmi	r3, r3
 8008eb8:	e7ef      	b.n	8008e9a <_printf_i+0x14a>
 8008eba:	4665      	mov	r5, ip
 8008ebc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ec0:	fb02 3311 	mls	r3, r2, r1, r3
 8008ec4:	5cc3      	ldrb	r3, [r0, r3]
 8008ec6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008eca:	460b      	mov	r3, r1
 8008ecc:	2900      	cmp	r1, #0
 8008ece:	d1f5      	bne.n	8008ebc <_printf_i+0x16c>
 8008ed0:	e7b9      	b.n	8008e46 <_printf_i+0xf6>
 8008ed2:	6813      	ldr	r3, [r2, #0]
 8008ed4:	6825      	ldr	r5, [r4, #0]
 8008ed6:	1d18      	adds	r0, r3, #4
 8008ed8:	6961      	ldr	r1, [r4, #20]
 8008eda:	6010      	str	r0, [r2, #0]
 8008edc:	0628      	lsls	r0, r5, #24
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	d501      	bpl.n	8008ee6 <_printf_i+0x196>
 8008ee2:	6019      	str	r1, [r3, #0]
 8008ee4:	e002      	b.n	8008eec <_printf_i+0x19c>
 8008ee6:	066a      	lsls	r2, r5, #25
 8008ee8:	d5fb      	bpl.n	8008ee2 <_printf_i+0x192>
 8008eea:	8019      	strh	r1, [r3, #0]
 8008eec:	2300      	movs	r3, #0
 8008eee:	4665      	mov	r5, ip
 8008ef0:	6123      	str	r3, [r4, #16]
 8008ef2:	e7b9      	b.n	8008e68 <_printf_i+0x118>
 8008ef4:	6813      	ldr	r3, [r2, #0]
 8008ef6:	1d19      	adds	r1, r3, #4
 8008ef8:	6011      	str	r1, [r2, #0]
 8008efa:	681d      	ldr	r5, [r3, #0]
 8008efc:	6862      	ldr	r2, [r4, #4]
 8008efe:	2100      	movs	r1, #0
 8008f00:	4628      	mov	r0, r5
 8008f02:	f000 f837 	bl	8008f74 <memchr>
 8008f06:	b108      	cbz	r0, 8008f0c <_printf_i+0x1bc>
 8008f08:	1b40      	subs	r0, r0, r5
 8008f0a:	6060      	str	r0, [r4, #4]
 8008f0c:	6863      	ldr	r3, [r4, #4]
 8008f0e:	6123      	str	r3, [r4, #16]
 8008f10:	2300      	movs	r3, #0
 8008f12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f16:	e7a7      	b.n	8008e68 <_printf_i+0x118>
 8008f18:	6923      	ldr	r3, [r4, #16]
 8008f1a:	462a      	mov	r2, r5
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	4630      	mov	r0, r6
 8008f20:	47c0      	blx	r8
 8008f22:	3001      	adds	r0, #1
 8008f24:	d0aa      	beq.n	8008e7c <_printf_i+0x12c>
 8008f26:	6823      	ldr	r3, [r4, #0]
 8008f28:	079b      	lsls	r3, r3, #30
 8008f2a:	d413      	bmi.n	8008f54 <_printf_i+0x204>
 8008f2c:	68e0      	ldr	r0, [r4, #12]
 8008f2e:	9b03      	ldr	r3, [sp, #12]
 8008f30:	4298      	cmp	r0, r3
 8008f32:	bfb8      	it	lt
 8008f34:	4618      	movlt	r0, r3
 8008f36:	e7a3      	b.n	8008e80 <_printf_i+0x130>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	464a      	mov	r2, r9
 8008f3c:	4639      	mov	r1, r7
 8008f3e:	4630      	mov	r0, r6
 8008f40:	47c0      	blx	r8
 8008f42:	3001      	adds	r0, #1
 8008f44:	d09a      	beq.n	8008e7c <_printf_i+0x12c>
 8008f46:	3501      	adds	r5, #1
 8008f48:	68e3      	ldr	r3, [r4, #12]
 8008f4a:	9a03      	ldr	r2, [sp, #12]
 8008f4c:	1a9b      	subs	r3, r3, r2
 8008f4e:	42ab      	cmp	r3, r5
 8008f50:	dcf2      	bgt.n	8008f38 <_printf_i+0x1e8>
 8008f52:	e7eb      	b.n	8008f2c <_printf_i+0x1dc>
 8008f54:	2500      	movs	r5, #0
 8008f56:	f104 0919 	add.w	r9, r4, #25
 8008f5a:	e7f5      	b.n	8008f48 <_printf_i+0x1f8>
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1ac      	bne.n	8008eba <_printf_i+0x16a>
 8008f60:	7803      	ldrb	r3, [r0, #0]
 8008f62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f6a:	e76c      	b.n	8008e46 <_printf_i+0xf6>
 8008f6c:	08009225 	.word	0x08009225
 8008f70:	08009236 	.word	0x08009236

08008f74 <memchr>:
 8008f74:	b510      	push	{r4, lr}
 8008f76:	b2c9      	uxtb	r1, r1
 8008f78:	4402      	add	r2, r0
 8008f7a:	4290      	cmp	r0, r2
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	d101      	bne.n	8008f84 <memchr+0x10>
 8008f80:	2300      	movs	r3, #0
 8008f82:	e003      	b.n	8008f8c <memchr+0x18>
 8008f84:	781c      	ldrb	r4, [r3, #0]
 8008f86:	3001      	adds	r0, #1
 8008f88:	428c      	cmp	r4, r1
 8008f8a:	d1f6      	bne.n	8008f7a <memchr+0x6>
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	bd10      	pop	{r4, pc}

08008f90 <memcpy>:
 8008f90:	b510      	push	{r4, lr}
 8008f92:	1e43      	subs	r3, r0, #1
 8008f94:	440a      	add	r2, r1
 8008f96:	4291      	cmp	r1, r2
 8008f98:	d100      	bne.n	8008f9c <memcpy+0xc>
 8008f9a:	bd10      	pop	{r4, pc}
 8008f9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fa4:	e7f7      	b.n	8008f96 <memcpy+0x6>

08008fa6 <memmove>:
 8008fa6:	4288      	cmp	r0, r1
 8008fa8:	b510      	push	{r4, lr}
 8008faa:	eb01 0302 	add.w	r3, r1, r2
 8008fae:	d807      	bhi.n	8008fc0 <memmove+0x1a>
 8008fb0:	1e42      	subs	r2, r0, #1
 8008fb2:	4299      	cmp	r1, r3
 8008fb4:	d00a      	beq.n	8008fcc <memmove+0x26>
 8008fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fba:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008fbe:	e7f8      	b.n	8008fb2 <memmove+0xc>
 8008fc0:	4283      	cmp	r3, r0
 8008fc2:	d9f5      	bls.n	8008fb0 <memmove+0xa>
 8008fc4:	1881      	adds	r1, r0, r2
 8008fc6:	1ad2      	subs	r2, r2, r3
 8008fc8:	42d3      	cmn	r3, r2
 8008fca:	d100      	bne.n	8008fce <memmove+0x28>
 8008fcc:	bd10      	pop	{r4, pc}
 8008fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fd2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008fd6:	e7f7      	b.n	8008fc8 <memmove+0x22>

08008fd8 <_free_r>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	4605      	mov	r5, r0
 8008fdc:	2900      	cmp	r1, #0
 8008fde:	d043      	beq.n	8009068 <_free_r+0x90>
 8008fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fe4:	1f0c      	subs	r4, r1, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	bfb8      	it	lt
 8008fea:	18e4      	addlt	r4, r4, r3
 8008fec:	f000 f8d0 	bl	8009190 <__malloc_lock>
 8008ff0:	4a1e      	ldr	r2, [pc, #120]	; (800906c <_free_r+0x94>)
 8008ff2:	6813      	ldr	r3, [r2, #0]
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	b933      	cbnz	r3, 8009006 <_free_r+0x2e>
 8008ff8:	6063      	str	r3, [r4, #4]
 8008ffa:	6014      	str	r4, [r2, #0]
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009002:	f000 b8c6 	b.w	8009192 <__malloc_unlock>
 8009006:	42a3      	cmp	r3, r4
 8009008:	d90b      	bls.n	8009022 <_free_r+0x4a>
 800900a:	6821      	ldr	r1, [r4, #0]
 800900c:	1862      	adds	r2, r4, r1
 800900e:	4293      	cmp	r3, r2
 8009010:	bf01      	itttt	eq
 8009012:	681a      	ldreq	r2, [r3, #0]
 8009014:	685b      	ldreq	r3, [r3, #4]
 8009016:	1852      	addeq	r2, r2, r1
 8009018:	6022      	streq	r2, [r4, #0]
 800901a:	6063      	str	r3, [r4, #4]
 800901c:	6004      	str	r4, [r0, #0]
 800901e:	e7ed      	b.n	8008ffc <_free_r+0x24>
 8009020:	4613      	mov	r3, r2
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	b10a      	cbz	r2, 800902a <_free_r+0x52>
 8009026:	42a2      	cmp	r2, r4
 8009028:	d9fa      	bls.n	8009020 <_free_r+0x48>
 800902a:	6819      	ldr	r1, [r3, #0]
 800902c:	1858      	adds	r0, r3, r1
 800902e:	42a0      	cmp	r0, r4
 8009030:	d10b      	bne.n	800904a <_free_r+0x72>
 8009032:	6820      	ldr	r0, [r4, #0]
 8009034:	4401      	add	r1, r0
 8009036:	1858      	adds	r0, r3, r1
 8009038:	4282      	cmp	r2, r0
 800903a:	6019      	str	r1, [r3, #0]
 800903c:	d1de      	bne.n	8008ffc <_free_r+0x24>
 800903e:	6810      	ldr	r0, [r2, #0]
 8009040:	6852      	ldr	r2, [r2, #4]
 8009042:	4401      	add	r1, r0
 8009044:	6019      	str	r1, [r3, #0]
 8009046:	605a      	str	r2, [r3, #4]
 8009048:	e7d8      	b.n	8008ffc <_free_r+0x24>
 800904a:	d902      	bls.n	8009052 <_free_r+0x7a>
 800904c:	230c      	movs	r3, #12
 800904e:	602b      	str	r3, [r5, #0]
 8009050:	e7d4      	b.n	8008ffc <_free_r+0x24>
 8009052:	6820      	ldr	r0, [r4, #0]
 8009054:	1821      	adds	r1, r4, r0
 8009056:	428a      	cmp	r2, r1
 8009058:	bf01      	itttt	eq
 800905a:	6811      	ldreq	r1, [r2, #0]
 800905c:	6852      	ldreq	r2, [r2, #4]
 800905e:	1809      	addeq	r1, r1, r0
 8009060:	6021      	streq	r1, [r4, #0]
 8009062:	6062      	str	r2, [r4, #4]
 8009064:	605c      	str	r4, [r3, #4]
 8009066:	e7c9      	b.n	8008ffc <_free_r+0x24>
 8009068:	bd38      	pop	{r3, r4, r5, pc}
 800906a:	bf00      	nop
 800906c:	200000b4 	.word	0x200000b4

08009070 <_malloc_r>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	1ccd      	adds	r5, r1, #3
 8009074:	f025 0503 	bic.w	r5, r5, #3
 8009078:	3508      	adds	r5, #8
 800907a:	2d0c      	cmp	r5, #12
 800907c:	bf38      	it	cc
 800907e:	250c      	movcc	r5, #12
 8009080:	2d00      	cmp	r5, #0
 8009082:	4606      	mov	r6, r0
 8009084:	db01      	blt.n	800908a <_malloc_r+0x1a>
 8009086:	42a9      	cmp	r1, r5
 8009088:	d903      	bls.n	8009092 <_malloc_r+0x22>
 800908a:	230c      	movs	r3, #12
 800908c:	6033      	str	r3, [r6, #0]
 800908e:	2000      	movs	r0, #0
 8009090:	bd70      	pop	{r4, r5, r6, pc}
 8009092:	f000 f87d 	bl	8009190 <__malloc_lock>
 8009096:	4a21      	ldr	r2, [pc, #132]	; (800911c <_malloc_r+0xac>)
 8009098:	6814      	ldr	r4, [r2, #0]
 800909a:	4621      	mov	r1, r4
 800909c:	b991      	cbnz	r1, 80090c4 <_malloc_r+0x54>
 800909e:	4c20      	ldr	r4, [pc, #128]	; (8009120 <_malloc_r+0xb0>)
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	b91b      	cbnz	r3, 80090ac <_malloc_r+0x3c>
 80090a4:	4630      	mov	r0, r6
 80090a6:	f000 f863 	bl	8009170 <_sbrk_r>
 80090aa:	6020      	str	r0, [r4, #0]
 80090ac:	4629      	mov	r1, r5
 80090ae:	4630      	mov	r0, r6
 80090b0:	f000 f85e 	bl	8009170 <_sbrk_r>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d124      	bne.n	8009102 <_malloc_r+0x92>
 80090b8:	230c      	movs	r3, #12
 80090ba:	4630      	mov	r0, r6
 80090bc:	6033      	str	r3, [r6, #0]
 80090be:	f000 f868 	bl	8009192 <__malloc_unlock>
 80090c2:	e7e4      	b.n	800908e <_malloc_r+0x1e>
 80090c4:	680b      	ldr	r3, [r1, #0]
 80090c6:	1b5b      	subs	r3, r3, r5
 80090c8:	d418      	bmi.n	80090fc <_malloc_r+0x8c>
 80090ca:	2b0b      	cmp	r3, #11
 80090cc:	d90f      	bls.n	80090ee <_malloc_r+0x7e>
 80090ce:	600b      	str	r3, [r1, #0]
 80090d0:	18cc      	adds	r4, r1, r3
 80090d2:	50cd      	str	r5, [r1, r3]
 80090d4:	4630      	mov	r0, r6
 80090d6:	f000 f85c 	bl	8009192 <__malloc_unlock>
 80090da:	f104 000b 	add.w	r0, r4, #11
 80090de:	1d23      	adds	r3, r4, #4
 80090e0:	f020 0007 	bic.w	r0, r0, #7
 80090e4:	1ac3      	subs	r3, r0, r3
 80090e6:	d0d3      	beq.n	8009090 <_malloc_r+0x20>
 80090e8:	425a      	negs	r2, r3
 80090ea:	50e2      	str	r2, [r4, r3]
 80090ec:	e7d0      	b.n	8009090 <_malloc_r+0x20>
 80090ee:	684b      	ldr	r3, [r1, #4]
 80090f0:	428c      	cmp	r4, r1
 80090f2:	bf16      	itet	ne
 80090f4:	6063      	strne	r3, [r4, #4]
 80090f6:	6013      	streq	r3, [r2, #0]
 80090f8:	460c      	movne	r4, r1
 80090fa:	e7eb      	b.n	80090d4 <_malloc_r+0x64>
 80090fc:	460c      	mov	r4, r1
 80090fe:	6849      	ldr	r1, [r1, #4]
 8009100:	e7cc      	b.n	800909c <_malloc_r+0x2c>
 8009102:	1cc4      	adds	r4, r0, #3
 8009104:	f024 0403 	bic.w	r4, r4, #3
 8009108:	42a0      	cmp	r0, r4
 800910a:	d005      	beq.n	8009118 <_malloc_r+0xa8>
 800910c:	1a21      	subs	r1, r4, r0
 800910e:	4630      	mov	r0, r6
 8009110:	f000 f82e 	bl	8009170 <_sbrk_r>
 8009114:	3001      	adds	r0, #1
 8009116:	d0cf      	beq.n	80090b8 <_malloc_r+0x48>
 8009118:	6025      	str	r5, [r4, #0]
 800911a:	e7db      	b.n	80090d4 <_malloc_r+0x64>
 800911c:	200000b4 	.word	0x200000b4
 8009120:	200000b8 	.word	0x200000b8

08009124 <_realloc_r>:
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009126:	4607      	mov	r7, r0
 8009128:	4614      	mov	r4, r2
 800912a:	460e      	mov	r6, r1
 800912c:	b921      	cbnz	r1, 8009138 <_realloc_r+0x14>
 800912e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009132:	4611      	mov	r1, r2
 8009134:	f7ff bf9c 	b.w	8009070 <_malloc_r>
 8009138:	b922      	cbnz	r2, 8009144 <_realloc_r+0x20>
 800913a:	f7ff ff4d 	bl	8008fd8 <_free_r>
 800913e:	4625      	mov	r5, r4
 8009140:	4628      	mov	r0, r5
 8009142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009144:	f000 f826 	bl	8009194 <_malloc_usable_size_r>
 8009148:	42a0      	cmp	r0, r4
 800914a:	d20f      	bcs.n	800916c <_realloc_r+0x48>
 800914c:	4621      	mov	r1, r4
 800914e:	4638      	mov	r0, r7
 8009150:	f7ff ff8e 	bl	8009070 <_malloc_r>
 8009154:	4605      	mov	r5, r0
 8009156:	2800      	cmp	r0, #0
 8009158:	d0f2      	beq.n	8009140 <_realloc_r+0x1c>
 800915a:	4631      	mov	r1, r6
 800915c:	4622      	mov	r2, r4
 800915e:	f7ff ff17 	bl	8008f90 <memcpy>
 8009162:	4631      	mov	r1, r6
 8009164:	4638      	mov	r0, r7
 8009166:	f7ff ff37 	bl	8008fd8 <_free_r>
 800916a:	e7e9      	b.n	8009140 <_realloc_r+0x1c>
 800916c:	4635      	mov	r5, r6
 800916e:	e7e7      	b.n	8009140 <_realloc_r+0x1c>

08009170 <_sbrk_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	2300      	movs	r3, #0
 8009174:	4c05      	ldr	r4, [pc, #20]	; (800918c <_sbrk_r+0x1c>)
 8009176:	4605      	mov	r5, r0
 8009178:	4608      	mov	r0, r1
 800917a:	6023      	str	r3, [r4, #0]
 800917c:	f7fc fb24 	bl	80057c8 <_sbrk>
 8009180:	1c43      	adds	r3, r0, #1
 8009182:	d102      	bne.n	800918a <_sbrk_r+0x1a>
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	b103      	cbz	r3, 800918a <_sbrk_r+0x1a>
 8009188:	602b      	str	r3, [r5, #0]
 800918a:	bd38      	pop	{r3, r4, r5, pc}
 800918c:	200002ec 	.word	0x200002ec

08009190 <__malloc_lock>:
 8009190:	4770      	bx	lr

08009192 <__malloc_unlock>:
 8009192:	4770      	bx	lr

08009194 <_malloc_usable_size_r>:
 8009194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009198:	1f18      	subs	r0, r3, #4
 800919a:	2b00      	cmp	r3, #0
 800919c:	bfbc      	itt	lt
 800919e:	580b      	ldrlt	r3, [r1, r0]
 80091a0:	18c0      	addlt	r0, r0, r3
 80091a2:	4770      	bx	lr

080091a4 <_init>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	bf00      	nop
 80091a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091aa:	bc08      	pop	{r3}
 80091ac:	469e      	mov	lr, r3
 80091ae:	4770      	bx	lr

080091b0 <_fini>:
 80091b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b2:	bf00      	nop
 80091b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b6:	bc08      	pop	{r3}
 80091b8:	469e      	mov	lr, r3
 80091ba:	4770      	bx	lr
