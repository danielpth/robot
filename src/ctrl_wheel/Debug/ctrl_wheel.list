
ctrl_wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fa4  08006fa4  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08006fa4  08006fa4  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fa4  08006fa4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fa4  08006fa4  00016fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fa8  08006fa8  00016fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08006fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c0  2000017c  08007128  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  2000143c  08007128  0002143c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c73  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003dc0  00000000  00000000  00038e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001410  00000000  00000000  0003cbd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001208  00000000  00000000  0003dfe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018f80  00000000  00000000  0003f1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013e4a  00000000  00000000  00058170  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c2a8  00000000  00000000  0006bfba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8262  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d4  00000000  00000000  000e82e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006f18 	.word	0x08006f18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08006f18 	.word	0x08006f18

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 fd97 	bl	8000cbc <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 f9da 	bl	800054c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000198:	2301      	movs	r3, #1
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f000 fe5f 	bl	8000e6c <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 f9ca 	bl	800054c <Error_Handler>
  }

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	200003bc 	.word	0x200003bc
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a28      	ldr	r2, [pc, #160]	; (8000284 <HAL_ADC_MspInit+0xbc>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d149      	bne.n	800027c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b27      	ldr	r3, [pc, #156]	; (8000288 <HAL_ADC_MspInit+0xc0>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a26      	ldr	r2, [pc, #152]	; (8000288 <HAL_ADC_MspInit+0xc0>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b24      	ldr	r3, [pc, #144]	; (8000288 <HAL_ADC_MspInit+0xc0>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b21      	ldr	r3, [pc, #132]	; (8000288 <HAL_ADC_MspInit+0xc0>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a20      	ldr	r2, [pc, #128]	; (8000288 <HAL_ADC_MspInit+0xc0>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <HAL_ADC_MspInit+0xc0>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = Motor1_VCC_Pin|Motor2_VCC_Pin|Motor1_Current_Pin|Motor2_Current_Pin 
 8000218:	233e      	movs	r3, #62	; 0x3e
 800021a:	613b      	str	r3, [r7, #16]
                          |Battery_Vdd_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4819      	ldr	r0, [pc, #100]	; (800028c <HAL_ADC_MspInit+0xc4>)
 8000228:	f001 f9dc 	bl	80015e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800022c:	4b18      	ldr	r3, [pc, #96]	; (8000290 <HAL_ADC_MspInit+0xc8>)
 800022e:	4a19      	ldr	r2, [pc, #100]	; (8000294 <HAL_ADC_MspInit+0xcc>)
 8000230:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000232:	4b17      	ldr	r3, [pc, #92]	; (8000290 <HAL_ADC_MspInit+0xc8>)
 8000234:	2200      	movs	r2, #0
 8000236:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000238:	4b15      	ldr	r3, [pc, #84]	; (8000290 <HAL_ADC_MspInit+0xc8>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800023e:	4b14      	ldr	r3, [pc, #80]	; (8000290 <HAL_ADC_MspInit+0xc8>)
 8000240:	2280      	movs	r2, #128	; 0x80
 8000242:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <HAL_ADC_MspInit+0xc8>)
 8000246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800024a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800024c:	4b10      	ldr	r3, [pc, #64]	; (8000290 <HAL_ADC_MspInit+0xc8>)
 800024e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000252:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000254:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <HAL_ADC_MspInit+0xc8>)
 8000256:	2200      	movs	r2, #0
 8000258:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800025a:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <HAL_ADC_MspInit+0xc8>)
 800025c:	2200      	movs	r2, #0
 800025e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000260:	480b      	ldr	r0, [pc, #44]	; (8000290 <HAL_ADC_MspInit+0xc8>)
 8000262:	f001 f85f 	bl	8001324 <HAL_DMA_Init>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800026c:	f000 f96e 	bl	800054c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4a07      	ldr	r2, [pc, #28]	; (8000290 <HAL_ADC_MspInit+0xc8>)
 8000274:	621a      	str	r2, [r3, #32]
 8000276:	4a06      	ldr	r2, [pc, #24]	; (8000290 <HAL_ADC_MspInit+0xc8>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800027c:	bf00      	nop
 800027e:	3720      	adds	r7, #32
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40012400 	.word	0x40012400
 8000288:	40021000 	.word	0x40021000
 800028c:	40010800 	.word	0x40010800
 8000290:	200003ec 	.word	0x200003ec
 8000294:	40020008 	.word	0x40020008

08000298 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <MX_CRC_Init+0x20>)
 800029e:	4a07      	ldr	r2, [pc, #28]	; (80002bc <MX_CRC_Init+0x24>)
 80002a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80002a2:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_CRC_Init+0x20>)
 80002a4:	f001 f821 	bl	80012ea <HAL_CRC_Init>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80002ae:	f000 f94d 	bl	800054c <Error_Handler>
  }

}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000430 	.word	0x20000430
 80002bc:	40023000 	.word	0x40023000

080002c0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a09      	ldr	r2, [pc, #36]	; (80002f4 <HAL_CRC_MspInit+0x34>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d10b      	bne.n	80002ea <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <HAL_CRC_MspInit+0x38>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a08      	ldr	r2, [pc, #32]	; (80002f8 <HAL_CRC_MspInit+0x38>)
 80002d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <HAL_CRC_MspInit+0x38>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80002ea:	bf00      	nop
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	40023000 	.word	0x40023000
 80002f8:	40021000 	.word	0x40021000

080002fc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <MX_DMA_Init+0x38>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <MX_DMA_Init+0x38>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6153      	str	r3, [r2, #20]
 800030e:	4b09      	ldr	r3, [pc, #36]	; (8000334 <MX_DMA_Init+0x38>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800031a:	2200      	movs	r2, #0
 800031c:	2100      	movs	r1, #0
 800031e:	200b      	movs	r0, #11
 8000320:	f000 ffad 	bl	800127e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000324:	200b      	movs	r0, #11
 8000326:	f000 ffc6 	bl	80012b6 <HAL_NVIC_EnableIRQ>

}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40021000 	.word	0x40021000

08000338 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	4b40      	ldr	r3, [pc, #256]	; (8000450 <MX_GPIO_Init+0x118>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a3f      	ldr	r2, [pc, #252]	; (8000450 <MX_GPIO_Init+0x118>)
 8000352:	f043 0310 	orr.w	r3, r3, #16
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b3d      	ldr	r3, [pc, #244]	; (8000450 <MX_GPIO_Init+0x118>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0310 	and.w	r3, r3, #16
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000364:	4b3a      	ldr	r3, [pc, #232]	; (8000450 <MX_GPIO_Init+0x118>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a39      	ldr	r2, [pc, #228]	; (8000450 <MX_GPIO_Init+0x118>)
 800036a:	f043 0320 	orr.w	r3, r3, #32
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b37      	ldr	r3, [pc, #220]	; (8000450 <MX_GPIO_Init+0x118>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0320 	and.w	r3, r3, #32
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	4b34      	ldr	r3, [pc, #208]	; (8000450 <MX_GPIO_Init+0x118>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a33      	ldr	r2, [pc, #204]	; (8000450 <MX_GPIO_Init+0x118>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b31      	ldr	r3, [pc, #196]	; (8000450 <MX_GPIO_Init+0x118>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000394:	4b2e      	ldr	r3, [pc, #184]	; (8000450 <MX_GPIO_Init+0x118>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a2d      	ldr	r2, [pc, #180]	; (8000450 <MX_GPIO_Init+0x118>)
 800039a:	f043 0308 	orr.w	r3, r3, #8
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <MX_GPIO_Init+0x118>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0308 	and.w	r3, r3, #8
 80003a8:	603b      	str	r3, [r7, #0]
 80003aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b2:	4828      	ldr	r0, [pc, #160]	; (8000454 <MX_GPIO_Init+0x11c>)
 80003b4:	f001 fa70 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor1_INA_Pin|Motor1_INB_Pin|Motor2_INA_Pin|Motor2_INB_Pin, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80003be:	4826      	ldr	r0, [pc, #152]	; (8000458 <MX_GPIO_Init+0x120>)
 80003c0:	f001 fa6a 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ca:	2301      	movs	r3, #1
 80003cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d2:	2302      	movs	r3, #2
 80003d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	481d      	ldr	r0, [pc, #116]	; (8000454 <MX_GPIO_Init+0x11c>)
 80003de:	f001 f901 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 PA13 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14;
 80003e2:	f246 1301 	movw	r3, #24833	; 0x6101
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e8:	2303      	movs	r3, #3
 80003ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	481a      	ldr	r0, [pc, #104]	; (800045c <MX_GPIO_Init+0x124>)
 80003f4:	f001 f8f6 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB15 PB4 PB5 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5 
 80003f8:	f248 3331 	movw	r3, #33585	; 0x8331
 80003fc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003fe:	2303      	movs	r3, #3
 8000400:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	4619      	mov	r1, r3
 8000408:	4813      	ldr	r0, [pc, #76]	; (8000458 <MX_GPIO_Init+0x120>)
 800040a:	f001 f8eb 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor1_EN_Pin|BOOT1_Pin|Motor2_EN_Pin;
 800040e:	f244 0306 	movw	r3, #16390	; 0x4006
 8000412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	4619      	mov	r1, r3
 8000422:	480d      	ldr	r0, [pc, #52]	; (8000458 <MX_GPIO_Init+0x120>)
 8000424:	f001 f8de 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor1_INA_Pin|Motor1_INB_Pin|Motor2_INA_Pin|Motor2_INB_Pin;
 8000428:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800042c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042e:	2301      	movs	r3, #1
 8000430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000436:	2302      	movs	r3, #2
 8000438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043a:	f107 0310 	add.w	r3, r7, #16
 800043e:	4619      	mov	r1, r3
 8000440:	4805      	ldr	r0, [pc, #20]	; (8000458 <MX_GPIO_Init+0x120>)
 8000442:	f001 f8cf 	bl	80015e4 <HAL_GPIO_Init>

}
 8000446:	bf00      	nop
 8000448:	3720      	adds	r7, #32
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000
 8000454:	40011000 	.word	0x40011000
 8000458:	40010c00 	.word	0x40010c00
 800045c:	40010800 	.word	0x40010800

08000460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000464:	f000 fbc8 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000468:	f000 f813 	bl	8000492 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800046c:	f7ff ff64 	bl	8000338 <MX_GPIO_Init>
  MX_DMA_Init();
 8000470:	f7ff ff44 	bl	80002fc <MX_DMA_Init>
  MX_TIM3_Init();
 8000474:	f000 f994 	bl	80007a0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000478:	f000 f912 	bl	80006a0 <MX_TIM2_Init>
  MX_TIM4_Init();
 800047c:	f000 f9e4 	bl	8000848 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000480:	f7ff fe64 	bl	800014c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000484:	f006 f8b2 	bl	80065ec <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000488:	f000 fb1a 	bl	8000ac0 <MX_USART1_UART_Init>
  MX_CRC_Init();
 800048c:	f7ff ff04 	bl	8000298 <MX_CRC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000490:	e7fe      	b.n	8000490 <main+0x30>

08000492 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b094      	sub	sp, #80	; 0x50
 8000496:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800049c:	2228      	movs	r2, #40	; 0x28
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f006 fd31 	bl	8006f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004c2:	2301      	movs	r3, #1
 80004c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d0:	2301      	movs	r3, #1
 80004d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d4:	2302      	movs	r3, #2
 80004d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 f8cf 	bl	800268c <HAL_RCC_OscConfig>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004f4:	f000 f82a 	bl	800054c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f8:	230f      	movs	r3, #15
 80004fa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fc:	2302      	movs	r3, #2
 80004fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000508:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2102      	movs	r1, #2
 8000514:	4618      	mov	r0, r3
 8000516:	f002 fb39 	bl	8002b8c <HAL_RCC_ClockConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000520:	f000 f814 	bl	800054c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000524:	2312      	movs	r3, #18
 8000526:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000528:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800052c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	4618      	mov	r0, r3
 8000536:	f002 fcc5 	bl	8002ec4 <HAL_RCCEx_PeriphCLKConfig>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000540:	f000 f804 	bl	800054c <Error_Handler>
  }
}
 8000544:	bf00      	nop
 8000546:	3750      	adds	r7, #80	; 0x50
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <HAL_MspInit+0x5c>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <HAL_MspInit+0x5c>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_MspInit+0x5c>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <HAL_MspInit+0x5c>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <HAL_MspInit+0x5c>)
 800057c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000580:	61d3      	str	r3, [r2, #28]
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <HAL_MspInit+0x5c>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_MspInit+0x60>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <HAL_MspInit+0x60>)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010000 	.word	0x40010000

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <HardFault_Handler+0x4>

080005ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <MemManage_Handler+0x4>

080005d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <BusFault_Handler+0x4>

080005da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005de:	e7fe      	b.n	80005de <UsageFault_Handler+0x4>

080005e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000608:	f000 fb3c 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}

08000610 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <DMA1_Channel1_IRQHandler+0x10>)
 8000616:	f000 fedf 	bl	80013d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200003ec 	.word	0x200003ec

08000624 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800062a:	f001 fa54 	bl	8001ad6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200011d0 	.word	0x200011d0

08000638 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <SystemInit+0x5c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <SystemInit+0x5c>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <SystemInit+0x5c>)
 800064a:	685a      	ldr	r2, [r3, #4]
 800064c:	4911      	ldr	r1, [pc, #68]	; (8000694 <SystemInit+0x5c>)
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <SystemInit+0x60>)
 8000650:	4013      	ands	r3, r2
 8000652:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <SystemInit+0x5c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <SystemInit+0x5c>)
 800065a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800065e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000662:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <SystemInit+0x5c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <SystemInit+0x5c>)
 800066a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800066e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <SystemInit+0x5c>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <SystemInit+0x5c>)
 8000676:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800067a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <SystemInit+0x5c>)
 800067e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000682:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <SystemInit+0x64>)
 8000686:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800068a:	609a      	str	r2, [r3, #8]
#endif 
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	40021000 	.word	0x40021000
 8000698:	f8ff0000 	.word	0xf8ff0000
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08e      	sub	sp, #56	; 0x38
 80006a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
 80006cc:	615a      	str	r2, [r3, #20]
 80006ce:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80006d0:	4b32      	ldr	r3, [pc, #200]	; (800079c <MX_TIM2_Init+0xfc>)
 80006d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006d8:	4b30      	ldr	r3, [pc, #192]	; (800079c <MX_TIM2_Init+0xfc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <MX_TIM2_Init+0xfc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80006e4:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MX_TIM2_Init+0xfc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ea:	4b2c      	ldr	r3, [pc, #176]	; (800079c <MX_TIM2_Init+0xfc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f0:	4b2a      	ldr	r3, [pc, #168]	; (800079c <MX_TIM2_Init+0xfc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006f6:	4829      	ldr	r0, [pc, #164]	; (800079c <MX_TIM2_Init+0xfc>)
 80006f8:	f002 fc9a 	bl	8003030 <HAL_TIM_Base_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000702:	f7ff ff23 	bl	800054c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800070c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000710:	4619      	mov	r1, r3
 8000712:	4822      	ldr	r0, [pc, #136]	; (800079c <MX_TIM2_Init+0xfc>)
 8000714:	f002 fe40 	bl	8003398 <HAL_TIM_ConfigClockSource>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800071e:	f7ff ff15 	bl	800054c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000722:	481e      	ldr	r0, [pc, #120]	; (800079c <MX_TIM2_Init+0xfc>)
 8000724:	f002 fcaf 	bl	8003086 <HAL_TIM_PWM_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800072e:	f7ff ff0d 	bl	800054c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4619      	mov	r1, r3
 8000740:	4816      	ldr	r0, [pc, #88]	; (800079c <MX_TIM2_Init+0xfc>)
 8000742:	f003 f961 	bl	8003a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800074c:	f7ff fefe 	bl	800054c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000750:	2360      	movs	r3, #96	; 0x60
 8000752:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	4619      	mov	r1, r3
 8000766:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_TIM2_Init+0xfc>)
 8000768:	f002 fd50 	bl	800320c <HAL_TIM_PWM_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000772:	f7ff feeb 	bl	800054c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2204      	movs	r2, #4
 800077a:	4619      	mov	r1, r3
 800077c:	4807      	ldr	r0, [pc, #28]	; (800079c <MX_TIM2_Init+0xfc>)
 800077e:	f002 fd45 	bl	800320c <HAL_TIM_PWM_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000788:	f7ff fee0 	bl	800054c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <MX_TIM2_Init+0xfc>)
 800078e:	f000 f937 	bl	8000a00 <HAL_TIM_MspPostInit>

}
 8000792:	bf00      	nop
 8000794:	3738      	adds	r7, #56	; 0x38
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200004b8 	.word	0x200004b8

080007a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2224      	movs	r2, #36	; 0x24
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 fbaa 	bl	8006f08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80007bc:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_TIM3_Init+0xa0>)
 80007be:	4a21      	ldr	r2, [pc, #132]	; (8000844 <MX_TIM3_Init+0xa4>)
 80007c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007c2:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_TIM3_Init+0xa0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_TIM3_Init+0xa0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_TIM3_Init+0xa0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_TIM3_Init+0xa0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_TIM3_Init+0xa0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007e8:	2301      	movs	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007f8:	2301      	movs	r3, #1
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	480d      	ldr	r0, [pc, #52]	; (8000840 <MX_TIM3_Init+0xa0>)
 800080c:	f002 fc6f 	bl	80030ee <HAL_TIM_Encoder_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000816:	f7ff fe99 	bl	800054c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_TIM3_Init+0xa0>)
 8000828:	f003 f8ee 	bl	8003a08 <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000832:	f7ff fe8b 	bl	800054c <Error_Handler>
  }

}
 8000836:	bf00      	nop
 8000838:	3730      	adds	r7, #48	; 0x30
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000478 	.word	0x20000478
 8000844:	40000400 	.word	0x40000400

08000848 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	2224      	movs	r2, #36	; 0x24
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f006 fb56 	bl	8006f08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8000864:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <MX_TIM4_Init+0xa0>)
 8000866:	4a21      	ldr	r2, [pc, #132]	; (80008ec <MX_TIM4_Init+0xa4>)
 8000868:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800086a:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <MX_TIM4_Init+0xa0>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_TIM4_Init+0xa0>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_TIM4_Init+0xa0>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_TIM4_Init+0xa0>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_TIM4_Init+0xa0>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000888:	2301      	movs	r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000890:	2301      	movs	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008a0:	2301      	movs	r3, #1
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	4619      	mov	r1, r3
 80008b2:	480d      	ldr	r0, [pc, #52]	; (80008e8 <MX_TIM4_Init+0xa0>)
 80008b4:	f002 fc1b 	bl	80030ee <HAL_TIM_Encoder_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80008be:	f7ff fe45 	bl	800054c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <MX_TIM4_Init+0xa0>)
 80008d0:	f003 f89a 	bl	8003a08 <HAL_TIMEx_MasterConfigSynchronization>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80008da:	f7ff fe37 	bl	800054c <Error_Handler>
  }

}
 80008de:	bf00      	nop
 80008e0:	3730      	adds	r7, #48	; 0x30
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000438 	.word	0x20000438
 80008ec:	40000800 	.word	0x40000800

080008f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000900:	d10b      	bne.n	800091a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_TIM_Base_MspInit+0x34>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a07      	ldr	r2, [pc, #28]	; (8000924 <HAL_TIM_Base_MspInit+0x34>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_TIM_Base_MspInit+0x34>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800091a:	bf00      	nop
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0318 	add.w	r3, r7, #24
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a2a      	ldr	r2, [pc, #168]	; (80009ec <HAL_TIM_Encoder_MspInit+0xc4>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d124      	bne.n	8000992 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000948:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	4a28      	ldr	r2, [pc, #160]	; (80009f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	61d3      	str	r3, [r2, #28]
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000956:	69db      	ldr	r3, [r3, #28]
 8000958:	f003 0302 	and.w	r3, r3, #2
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a22      	ldr	r2, [pc, #136]	; (80009f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = Motor1_EncoderA_Pin|Motor1_EncoderB_Pin;
 8000978:	23c0      	movs	r3, #192	; 0xc0
 800097a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0318 	add.w	r3, r7, #24
 8000988:	4619      	mov	r1, r3
 800098a:	481a      	ldr	r0, [pc, #104]	; (80009f4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800098c:	f000 fe2a 	bl	80015e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000990:	e028      	b.n	80009e4 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(tim_encoderHandle->Instance==TIM4)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a18      	ldr	r2, [pc, #96]	; (80009f8 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d123      	bne.n	80009e4 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800099e:	69db      	ldr	r3, [r3, #28]
 80009a0:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	61d3      	str	r3, [r2, #28]
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 80009aa:	69db      	ldr	r3, [r3, #28]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 80009ba:	f043 0308 	orr.w	r3, r3, #8
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0308 	and.w	r3, r3, #8
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor2_EncoderA_Pin|Motor2_EncoderB_Pin;
 80009cc:	23c0      	movs	r3, #192	; 0xc0
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 0318 	add.w	r3, r7, #24
 80009dc:	4619      	mov	r1, r3
 80009de:	4807      	ldr	r0, [pc, #28]	; (80009fc <HAL_TIM_Encoder_MspInit+0xd4>)
 80009e0:	f000 fe00 	bl	80015e4 <HAL_GPIO_Init>
}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	; 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40000400 	.word	0x40000400
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010800 	.word	0x40010800
 80009f8:	40000800 	.word	0x40000800
 80009fc:	40010c00 	.word	0x40010c00

08000a00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a1e:	d142      	bne.n	8000aa6 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <HAL_TIM_MspPostInit+0xb0>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a22      	ldr	r2, [pc, #136]	; (8000ab0 <HAL_TIM_MspPostInit+0xb0>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <HAL_TIM_MspPostInit+0xb0>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <HAL_TIM_MspPostInit+0xb0>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a1c      	ldr	r2, [pc, #112]	; (8000ab0 <HAL_TIM_MspPostInit+0xb0>)
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <HAL_TIM_MspPostInit+0xb0>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0308 	and.w	r3, r3, #8
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = Motor1_PWM_Pin;
 8000a50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Motor1_PWM_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4813      	ldr	r0, [pc, #76]	; (8000ab4 <HAL_TIM_MspPostInit+0xb4>)
 8000a66:	f000 fdbd 	bl	80015e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor2_PWM_Pin;
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Motor2_PWM_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <HAL_TIM_MspPostInit+0xb8>)
 8000a7e:	f000 fdb1 	bl	80015e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_TIM_MspPostInit+0xbc>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
 8000a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
 8000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa0:	4a06      	ldr	r2, [pc, #24]	; (8000abc <HAL_TIM_MspPostInit+0xbc>)
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010800 	.word	0x40010800
 8000ab8:	40010c00 	.word	0x40010c00
 8000abc:	40010000 	.word	0x40010000

08000ac0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_USART1_UART_Init+0x50>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000af8:	f002 ffca 	bl	8003a90 <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b02:	f7ff fd23 	bl	800054c <Error_Handler>
  }

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200004f8 	.word	0x200004f8
 8000b10:	40013800 	.word	0x40013800

08000b14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <HAL_UART_MspInit+0x8c>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d131      	bne.n	8000b98 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_UART_MspInit+0x90>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a1a      	ldr	r2, [pc, #104]	; (8000ba4 <HAL_UART_MspInit+0x90>)
 8000b3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_UART_MspInit+0x90>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_UART_MspInit+0x90>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <HAL_UART_MspInit+0x90>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_UART_MspInit+0x90>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4619      	mov	r1, r3
 8000b78:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <HAL_UART_MspInit+0x94>)
 8000b7a:	f000 fd33 	bl	80015e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4619      	mov	r1, r3
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_UART_MspInit+0x94>)
 8000b94:	f000 fd26 	bl	80015e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40013800 	.word	0x40013800
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010800 	.word	0x40010800

08000bac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bae:	e003      	b.n	8000bb8 <LoopCopyDataInit>

08000bb0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bb2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bb4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bb6:	3104      	adds	r1, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bb8:	480a      	ldr	r0, [pc, #40]	; (8000be4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bbc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bbe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bc0:	d3f6      	bcc.n	8000bb0 <CopyDataInit>
  ldr r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bc4:	e002      	b.n	8000bcc <LoopFillZerobss>

08000bc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bc8:	f842 3b04 	str.w	r3, [r2], #4

08000bcc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bce:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bd0:	d3f9      	bcc.n	8000bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bd2:	f7ff fd31 	bl	8000638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f006 f973 	bl	8006ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bda:	f7ff fc41 	bl	8000460 <main>
  bx lr
 8000bde:	4770      	bx	lr
  ldr r3, =_sidata
 8000be0:	08006fac 	.word	0x08006fac
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000be8:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 8000bec:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8000bf0:	2000143c 	.word	0x2000143c

08000bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_2_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_Init+0x28>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_Init+0x28>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 fb2d 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fca0 	bl	8000558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40022000 	.word	0x40022000

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 fb45 	bl	80012d2 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 fb0d 	bl	800127e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000538 	.word	0x20000538

08000ca8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <HAL_GetTick+0x10>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	20000538 	.word	0x20000538

08000cbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e0be      	b.n	8000e5c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d109      	bne.n	8000d00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff fa64 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 f9ab 	bl	800105c <ADC_ConversionStop_Disable>
 8000d06:	4603      	mov	r3, r0
 8000d08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0e:	f003 0310 	and.w	r3, r3, #16
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8099 	bne.w	8000e4a <HAL_ADC_Init+0x18e>
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f040 8095 	bne.w	8000e4a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d28:	f023 0302 	bic.w	r3, r3, #2
 8000d2c:	f043 0202 	orr.w	r2, r3, #2
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	7b1b      	ldrb	r3, [r3, #12]
 8000d42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d54:	d003      	beq.n	8000d5e <HAL_ADC_Init+0xa2>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d102      	bne.n	8000d64 <HAL_ADC_Init+0xa8>
 8000d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d62:	e000      	b.n	8000d66 <HAL_ADC_Init+0xaa>
 8000d64:	2300      	movs	r3, #0
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7d1b      	ldrb	r3, [r3, #20]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d119      	bne.n	8000da8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7b1b      	ldrb	r3, [r3, #12]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d109      	bne.n	8000d90 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	3b01      	subs	r3, #1
 8000d82:	035a      	lsls	r2, r3, #13
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	e00b      	b.n	8000da8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d94:	f043 0220 	orr.w	r2, r3, #32
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da0:	f043 0201 	orr.w	r2, r3, #1
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <HAL_ADC_Init+0x1a8>)
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	6812      	ldr	r2, [r2, #0]
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dd8:	d003      	beq.n	8000de2 <HAL_ADC_Init+0x126>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d104      	bne.n	8000dec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	051b      	lsls	r3, r3, #20
 8000dea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_ADC_Init+0x1ac>)
 8000e08:	4013      	ands	r3, r2
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d10b      	bne.n	8000e28 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1a:	f023 0303 	bic.w	r3, r3, #3
 8000e1e:	f043 0201 	orr.w	r2, r3, #1
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e26:	e018      	b.n	8000e5a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2c:	f023 0312 	bic.w	r3, r3, #18
 8000e30:	f043 0210 	orr.w	r2, r3, #16
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3c:	f043 0201 	orr.w	r2, r3, #1
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e48:	e007      	b.n	8000e5a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4e:	f043 0210 	orr.w	r2, r3, #16
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	ffe1f7fd 	.word	0xffe1f7fd
 8000e68:	ff1f0efe 	.word	0xff1f0efe

08000e6c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d101      	bne.n	8000e8c <HAL_ADC_ConfigChannel+0x20>
 8000e88:	2302      	movs	r3, #2
 8000e8a:	e0dc      	b.n	8001046 <HAL_ADC_ConfigChannel+0x1da>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b06      	cmp	r3, #6
 8000e9a:	d81c      	bhi.n	8000ed6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	3b05      	subs	r3, #5
 8000eae:	221f      	movs	r2, #31
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	4019      	ands	r1, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3b05      	subs	r3, #5
 8000ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	635a      	str	r2, [r3, #52]	; 0x34
 8000ed4:	e03c      	b.n	8000f50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b0c      	cmp	r3, #12
 8000edc:	d81c      	bhi.n	8000f18 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	3b23      	subs	r3, #35	; 0x23
 8000ef0:	221f      	movs	r2, #31
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	4019      	ands	r1, r3
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	3b23      	subs	r3, #35	; 0x23
 8000f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	631a      	str	r2, [r3, #48]	; 0x30
 8000f16:	e01b      	b.n	8000f50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	3b41      	subs	r3, #65	; 0x41
 8000f2a:	221f      	movs	r2, #31
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	4019      	ands	r1, r3
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	3b41      	subs	r3, #65	; 0x41
 8000f44:	fa00 f203 	lsl.w	r2, r0, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b09      	cmp	r3, #9
 8000f56:	d91c      	bls.n	8000f92 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68d9      	ldr	r1, [r3, #12]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4613      	mov	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	3b1e      	subs	r3, #30
 8000f6a:	2207      	movs	r2, #7
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	4019      	ands	r1, r3
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	6898      	ldr	r0, [r3, #8]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	3b1e      	subs	r3, #30
 8000f84:	fa00 f203 	lsl.w	r2, r0, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	e019      	b.n	8000fc6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6919      	ldr	r1, [r3, #16]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	2207      	movs	r2, #7
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	4019      	ands	r1, r3
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	6898      	ldr	r0, [r3, #8]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	fa00 f203 	lsl.w	r2, r0, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b10      	cmp	r3, #16
 8000fcc:	d003      	beq.n	8000fd6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fd2:	2b11      	cmp	r3, #17
 8000fd4:	d132      	bne.n	800103c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <HAL_ADC_ConfigChannel+0x1e4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d125      	bne.n	800102c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d126      	bne.n	800103c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ffc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b10      	cmp	r3, #16
 8001004:	d11a      	bne.n	800103c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_ADC_ConfigChannel+0x1e8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a13      	ldr	r2, [pc, #76]	; (8001058 <HAL_ADC_ConfigChannel+0x1ec>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	0c9a      	lsrs	r2, r3, #18
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800101c:	e002      	b.n	8001024 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	3b01      	subs	r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1f9      	bne.n	800101e <HAL_ADC_ConfigChannel+0x1b2>
 800102a:	e007      	b.n	800103c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	f043 0220 	orr.w	r2, r3, #32
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	40012400 	.word	0x40012400
 8001054:	20000000 	.word	0x20000000
 8001058:	431bde83 	.word	0x431bde83

0800105c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b01      	cmp	r3, #1
 8001074:	d127      	bne.n	80010c6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001086:	f7ff fe0f 	bl	8000ca8 <HAL_GetTick>
 800108a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800108c:	e014      	b.n	80010b8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800108e:	f7ff fe0b 	bl	8000ca8 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d90d      	bls.n	80010b8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	f043 0210 	orr.w	r2, r3, #16
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ac:	f043 0201 	orr.w	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e007      	b.n	80010c8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d0e3      	beq.n	800108e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4906      	ldr	r1, [pc, #24]	; (8001168 <__NVIC_EnableIRQ+0x34>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff90 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff2d 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff42 	bl	8001118 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff90 	bl	80011c0 <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5f 	bl	800116c <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff35 	bl	8001134 <__NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffa2 	bl	8001224 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e00e      	b.n	800131a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	795b      	ldrb	r3, [r3, #5]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d105      	bne.n	8001312 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7fe ffd7 	bl	80002c0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e043      	b.n	80013c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <HAL_DMA_Init+0xa8>)
 8001342:	4413      	add	r3, r2
 8001344:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <HAL_DMA_Init+0xac>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	009a      	lsls	r2, r3, #2
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <HAL_DMA_Init+0xb0>)
 8001356:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2202      	movs	r2, #2
 800135c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800136e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001372:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800137c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001388:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001394:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	bffdfff8 	.word	0xbffdfff8
 80013d0:	cccccccd 	.word	0xcccccccd
 80013d4:	40020000 	.word	0x40020000

080013d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	2204      	movs	r2, #4
 80013f6:	409a      	lsls	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d04f      	beq.n	80014a0 <HAL_DMA_IRQHandler+0xc8>
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	2b00      	cmp	r3, #0
 8001408:	d04a      	beq.n	80014a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0320 	and.w	r3, r3, #32
 8001414:	2b00      	cmp	r3, #0
 8001416:	d107      	bne.n	8001428 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0204 	bic.w	r2, r2, #4
 8001426:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a66      	ldr	r2, [pc, #408]	; (80015c8 <HAL_DMA_IRQHandler+0x1f0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d029      	beq.n	8001486 <HAL_DMA_IRQHandler+0xae>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a65      	ldr	r2, [pc, #404]	; (80015cc <HAL_DMA_IRQHandler+0x1f4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d022      	beq.n	8001482 <HAL_DMA_IRQHandler+0xaa>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a63      	ldr	r2, [pc, #396]	; (80015d0 <HAL_DMA_IRQHandler+0x1f8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d01a      	beq.n	800147c <HAL_DMA_IRQHandler+0xa4>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a62      	ldr	r2, [pc, #392]	; (80015d4 <HAL_DMA_IRQHandler+0x1fc>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d012      	beq.n	8001476 <HAL_DMA_IRQHandler+0x9e>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a60      	ldr	r2, [pc, #384]	; (80015d8 <HAL_DMA_IRQHandler+0x200>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d00a      	beq.n	8001470 <HAL_DMA_IRQHandler+0x98>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a5f      	ldr	r2, [pc, #380]	; (80015dc <HAL_DMA_IRQHandler+0x204>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d102      	bne.n	800146a <HAL_DMA_IRQHandler+0x92>
 8001464:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001468:	e00e      	b.n	8001488 <HAL_DMA_IRQHandler+0xb0>
 800146a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800146e:	e00b      	b.n	8001488 <HAL_DMA_IRQHandler+0xb0>
 8001470:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001474:	e008      	b.n	8001488 <HAL_DMA_IRQHandler+0xb0>
 8001476:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800147a:	e005      	b.n	8001488 <HAL_DMA_IRQHandler+0xb0>
 800147c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001480:	e002      	b.n	8001488 <HAL_DMA_IRQHandler+0xb0>
 8001482:	2340      	movs	r3, #64	; 0x40
 8001484:	e000      	b.n	8001488 <HAL_DMA_IRQHandler+0xb0>
 8001486:	2304      	movs	r3, #4
 8001488:	4a55      	ldr	r2, [pc, #340]	; (80015e0 <HAL_DMA_IRQHandler+0x208>)
 800148a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 8094 	beq.w	80015be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800149e:	e08e      	b.n	80015be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	2202      	movs	r2, #2
 80014a6:	409a      	lsls	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d056      	beq.n	800155e <HAL_DMA_IRQHandler+0x186>
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d051      	beq.n	800155e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d10b      	bne.n	80014e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 020a 	bic.w	r2, r2, #10
 80014d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a38      	ldr	r2, [pc, #224]	; (80015c8 <HAL_DMA_IRQHandler+0x1f0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d029      	beq.n	800153e <HAL_DMA_IRQHandler+0x166>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a37      	ldr	r2, [pc, #220]	; (80015cc <HAL_DMA_IRQHandler+0x1f4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d022      	beq.n	800153a <HAL_DMA_IRQHandler+0x162>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a35      	ldr	r2, [pc, #212]	; (80015d0 <HAL_DMA_IRQHandler+0x1f8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d01a      	beq.n	8001534 <HAL_DMA_IRQHandler+0x15c>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a34      	ldr	r2, [pc, #208]	; (80015d4 <HAL_DMA_IRQHandler+0x1fc>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d012      	beq.n	800152e <HAL_DMA_IRQHandler+0x156>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a32      	ldr	r2, [pc, #200]	; (80015d8 <HAL_DMA_IRQHandler+0x200>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d00a      	beq.n	8001528 <HAL_DMA_IRQHandler+0x150>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a31      	ldr	r2, [pc, #196]	; (80015dc <HAL_DMA_IRQHandler+0x204>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d102      	bne.n	8001522 <HAL_DMA_IRQHandler+0x14a>
 800151c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001520:	e00e      	b.n	8001540 <HAL_DMA_IRQHandler+0x168>
 8001522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001526:	e00b      	b.n	8001540 <HAL_DMA_IRQHandler+0x168>
 8001528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800152c:	e008      	b.n	8001540 <HAL_DMA_IRQHandler+0x168>
 800152e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001532:	e005      	b.n	8001540 <HAL_DMA_IRQHandler+0x168>
 8001534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001538:	e002      	b.n	8001540 <HAL_DMA_IRQHandler+0x168>
 800153a:	2320      	movs	r3, #32
 800153c:	e000      	b.n	8001540 <HAL_DMA_IRQHandler+0x168>
 800153e:	2302      	movs	r3, #2
 8001540:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <HAL_DMA_IRQHandler+0x208>)
 8001542:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	d034      	beq.n	80015be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800155c:	e02f      	b.n	80015be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	2208      	movs	r2, #8
 8001564:	409a      	lsls	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d028      	beq.n	80015c0 <HAL_DMA_IRQHandler+0x1e8>
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	2b00      	cmp	r3, #0
 8001576:	d023      	beq.n	80015c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 020e 	bic.w	r2, r2, #14
 8001586:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f202 	lsl.w	r2, r1, r2
 8001596:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d004      	beq.n	80015c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	4798      	blx	r3
    }
  }
  return;
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
}
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40020008 	.word	0x40020008
 80015cc:	4002001c 	.word	0x4002001c
 80015d0:	40020030 	.word	0x40020030
 80015d4:	40020044 	.word	0x40020044
 80015d8:	40020058 	.word	0x40020058
 80015dc:	4002006c 	.word	0x4002006c
 80015e0:	40020000 	.word	0x40020000

080015e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b08b      	sub	sp, #44	; 0x2c
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f6:	e127      	b.n	8001848 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015f8:	2201      	movs	r2, #1
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	429a      	cmp	r2, r3
 8001612:	f040 8116 	bne.w	8001842 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b12      	cmp	r3, #18
 800161c:	d034      	beq.n	8001688 <HAL_GPIO_Init+0xa4>
 800161e:	2b12      	cmp	r3, #18
 8001620:	d80d      	bhi.n	800163e <HAL_GPIO_Init+0x5a>
 8001622:	2b02      	cmp	r3, #2
 8001624:	d02b      	beq.n	800167e <HAL_GPIO_Init+0x9a>
 8001626:	2b02      	cmp	r3, #2
 8001628:	d804      	bhi.n	8001634 <HAL_GPIO_Init+0x50>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d031      	beq.n	8001692 <HAL_GPIO_Init+0xae>
 800162e:	2b01      	cmp	r3, #1
 8001630:	d01c      	beq.n	800166c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001632:	e048      	b.n	80016c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001634:	2b03      	cmp	r3, #3
 8001636:	d043      	beq.n	80016c0 <HAL_GPIO_Init+0xdc>
 8001638:	2b11      	cmp	r3, #17
 800163a:	d01b      	beq.n	8001674 <HAL_GPIO_Init+0x90>
          break;
 800163c:	e043      	b.n	80016c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800163e:	4a89      	ldr	r2, [pc, #548]	; (8001864 <HAL_GPIO_Init+0x280>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d026      	beq.n	8001692 <HAL_GPIO_Init+0xae>
 8001644:	4a87      	ldr	r2, [pc, #540]	; (8001864 <HAL_GPIO_Init+0x280>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d806      	bhi.n	8001658 <HAL_GPIO_Init+0x74>
 800164a:	4a87      	ldr	r2, [pc, #540]	; (8001868 <HAL_GPIO_Init+0x284>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d020      	beq.n	8001692 <HAL_GPIO_Init+0xae>
 8001650:	4a86      	ldr	r2, [pc, #536]	; (800186c <HAL_GPIO_Init+0x288>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d01d      	beq.n	8001692 <HAL_GPIO_Init+0xae>
          break;
 8001656:	e036      	b.n	80016c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001658:	4a85      	ldr	r2, [pc, #532]	; (8001870 <HAL_GPIO_Init+0x28c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d019      	beq.n	8001692 <HAL_GPIO_Init+0xae>
 800165e:	4a85      	ldr	r2, [pc, #532]	; (8001874 <HAL_GPIO_Init+0x290>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d016      	beq.n	8001692 <HAL_GPIO_Init+0xae>
 8001664:	4a84      	ldr	r2, [pc, #528]	; (8001878 <HAL_GPIO_Init+0x294>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d013      	beq.n	8001692 <HAL_GPIO_Init+0xae>
          break;
 800166a:	e02c      	b.n	80016c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	623b      	str	r3, [r7, #32]
          break;
 8001672:	e028      	b.n	80016c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	3304      	adds	r3, #4
 800167a:	623b      	str	r3, [r7, #32]
          break;
 800167c:	e023      	b.n	80016c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	3308      	adds	r3, #8
 8001684:	623b      	str	r3, [r7, #32]
          break;
 8001686:	e01e      	b.n	80016c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	330c      	adds	r3, #12
 800168e:	623b      	str	r3, [r7, #32]
          break;
 8001690:	e019      	b.n	80016c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d102      	bne.n	80016a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800169a:	2304      	movs	r3, #4
 800169c:	623b      	str	r3, [r7, #32]
          break;
 800169e:	e012      	b.n	80016c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d105      	bne.n	80016b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a8:	2308      	movs	r3, #8
 80016aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	611a      	str	r2, [r3, #16]
          break;
 80016b2:	e008      	b.n	80016c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b4:	2308      	movs	r3, #8
 80016b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	615a      	str	r2, [r3, #20]
          break;
 80016be:	e002      	b.n	80016c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
          break;
 80016c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2bff      	cmp	r3, #255	; 0xff
 80016ca:	d801      	bhi.n	80016d0 <HAL_GPIO_Init+0xec>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	e001      	b.n	80016d4 <HAL_GPIO_Init+0xf0>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3304      	adds	r3, #4
 80016d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2bff      	cmp	r3, #255	; 0xff
 80016da:	d802      	bhi.n	80016e2 <HAL_GPIO_Init+0xfe>
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_Init+0x104>
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	3b08      	subs	r3, #8
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	210f      	movs	r1, #15
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	401a      	ands	r2, r3
 80016fa:	6a39      	ldr	r1, [r7, #32]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	431a      	orrs	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 8096 	beq.w	8001842 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001716:	4b59      	ldr	r3, [pc, #356]	; (800187c <HAL_GPIO_Init+0x298>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	4a58      	ldr	r2, [pc, #352]	; (800187c <HAL_GPIO_Init+0x298>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6193      	str	r3, [r2, #24]
 8001722:	4b56      	ldr	r3, [pc, #344]	; (800187c <HAL_GPIO_Init+0x298>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800172e:	4a54      	ldr	r2, [pc, #336]	; (8001880 <HAL_GPIO_Init+0x29c>)
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	4013      	ands	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4b      	ldr	r2, [pc, #300]	; (8001884 <HAL_GPIO_Init+0x2a0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_GPIO_Init+0x19e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4a      	ldr	r2, [pc, #296]	; (8001888 <HAL_GPIO_Init+0x2a4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00d      	beq.n	800177e <HAL_GPIO_Init+0x19a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a49      	ldr	r2, [pc, #292]	; (800188c <HAL_GPIO_Init+0x2a8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d007      	beq.n	800177a <HAL_GPIO_Init+0x196>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a48      	ldr	r2, [pc, #288]	; (8001890 <HAL_GPIO_Init+0x2ac>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_GPIO_Init+0x192>
 8001772:	2303      	movs	r3, #3
 8001774:	e006      	b.n	8001784 <HAL_GPIO_Init+0x1a0>
 8001776:	2304      	movs	r3, #4
 8001778:	e004      	b.n	8001784 <HAL_GPIO_Init+0x1a0>
 800177a:	2302      	movs	r3, #2
 800177c:	e002      	b.n	8001784 <HAL_GPIO_Init+0x1a0>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <HAL_GPIO_Init+0x1a0>
 8001782:	2300      	movs	r3, #0
 8001784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001786:	f002 0203 	and.w	r2, r2, #3
 800178a:	0092      	lsls	r2, r2, #2
 800178c:	4093      	lsls	r3, r2
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	4313      	orrs	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001794:	493a      	ldr	r1, [pc, #232]	; (8001880 <HAL_GPIO_Init+0x29c>)
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	3302      	adds	r3, #2
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d006      	beq.n	80017bc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017ae:	4b39      	ldr	r3, [pc, #228]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4938      	ldr	r1, [pc, #224]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
 80017ba:	e006      	b.n	80017ca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017bc:	4b35      	ldr	r3, [pc, #212]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	4933      	ldr	r1, [pc, #204]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017d6:	4b2f      	ldr	r3, [pc, #188]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	492e      	ldr	r1, [pc, #184]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
 80017e2:	e006      	b.n	80017f2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017e4:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	4929      	ldr	r1, [pc, #164]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017fe:	4b25      	ldr	r3, [pc, #148]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	4924      	ldr	r1, [pc, #144]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
 800180a:	e006      	b.n	800181a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	43db      	mvns	r3, r3
 8001814:	491f      	ldr	r1, [pc, #124]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 8001816:	4013      	ands	r3, r2
 8001818:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	491a      	ldr	r1, [pc, #104]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	60cb      	str	r3, [r1, #12]
 8001832:	e006      	b.n	8001842 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	43db      	mvns	r3, r3
 800183c:	4915      	ldr	r1, [pc, #84]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 800183e:	4013      	ands	r3, r2
 8001840:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	3301      	adds	r3, #1
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	fa22 f303 	lsr.w	r3, r2, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	f47f aed0 	bne.w	80015f8 <HAL_GPIO_Init+0x14>
  }
}
 8001858:	bf00      	nop
 800185a:	372c      	adds	r7, #44	; 0x2c
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	10210000 	.word	0x10210000
 8001868:	10110000 	.word	0x10110000
 800186c:	10120000 	.word	0x10120000
 8001870:	10310000 	.word	0x10310000
 8001874:	10320000 	.word	0x10320000
 8001878:	10220000 	.word	0x10220000
 800187c:	40021000 	.word	0x40021000
 8001880:	40010000 	.word	0x40010000
 8001884:	40010800 	.word	0x40010800
 8001888:	40010c00 	.word	0x40010c00
 800188c:	40011000 	.word	0x40011000
 8001890:	40011400 	.word	0x40011400
 8001894:	40010400 	.word	0x40010400

08001898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	807b      	strh	r3, [r7, #2]
 80018a4:	4613      	mov	r3, r2
 80018a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a8:	787b      	ldrb	r3, [r7, #1]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ae:	887a      	ldrh	r2, [r7, #2]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018b4:	e003      	b.n	80018be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018b6:	887b      	ldrh	r3, [r7, #2]
 80018b8:	041a      	lsls	r2, r3, #16
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	611a      	str	r2, [r3, #16]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ca:	b08b      	sub	sp, #44	; 0x2c
 80018cc:	af06      	add	r7, sp, #24
 80018ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0d3      	b.n	8001a82 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d106      	bne.n	80018f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f005 f848 	bl	8006984 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2203      	movs	r2, #3
 80018f8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f002 fa14 	bl	8003d2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	687e      	ldr	r6, [r7, #4]
 800190e:	466d      	mov	r5, sp
 8001910:	f106 0410 	add.w	r4, r6, #16
 8001914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001918:	6823      	ldr	r3, [r4, #0]
 800191a:	602b      	str	r3, [r5, #0]
 800191c:	1d33      	adds	r3, r6, #4
 800191e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001920:	6838      	ldr	r0, [r7, #0]
 8001922:	f002 f9dd 	bl	8003ce0 <USB_CoreInit>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0a4      	b.n	8001a82 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fa11 	bl	8003d66 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	e035      	b.n	80019b6 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	015b      	lsls	r3, r3, #5
 8001950:	4413      	add	r3, r2
 8001952:	3329      	adds	r3, #41	; 0x29
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	015b      	lsls	r3, r3, #5
 800195e:	4413      	add	r3, r2
 8001960:	3328      	adds	r3, #40	; 0x28
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	b291      	uxth	r1, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	015b      	lsls	r3, r3, #5
 8001970:	4413      	add	r3, r2
 8001972:	3336      	adds	r3, #54	; 0x36
 8001974:	460a      	mov	r2, r1
 8001976:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	015b      	lsls	r3, r3, #5
 800197e:	4413      	add	r3, r2
 8001980:	332b      	adds	r3, #43	; 0x2b
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	015b      	lsls	r3, r3, #5
 800198c:	4413      	add	r3, r2
 800198e:	3338      	adds	r3, #56	; 0x38
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	015b      	lsls	r3, r3, #5
 800199a:	4413      	add	r3, r2
 800199c:	333c      	adds	r3, #60	; 0x3c
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	3302      	adds	r3, #2
 80019a8:	015b      	lsls	r3, r3, #5
 80019aa:	4413      	add	r3, r2
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	3301      	adds	r3, #1
 80019b4:	73fb      	strb	r3, [r7, #15]
 80019b6:	7bfa      	ldrb	r2, [r7, #15]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d3c4      	bcc.n	800194a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]
 80019c4:	e031      	b.n	8001a2a <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	015b      	lsls	r3, r3, #5
 80019cc:	4413      	add	r3, r2
 80019ce:	f203 1329 	addw	r3, r3, #297	; 0x129
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	015b      	lsls	r3, r3, #5
 80019dc:	4413      	add	r3, r2
 80019de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019e2:	7bfa      	ldrb	r2, [r7, #15]
 80019e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	015b      	lsls	r3, r3, #5
 80019ec:	4413      	add	r3, r2
 80019ee:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	015b      	lsls	r3, r3, #5
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	015b      	lsls	r3, r3, #5
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	330a      	adds	r3, #10
 8001a1c:	015b      	lsls	r3, r3, #5
 8001a1e:	4413      	add	r3, r2
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	3301      	adds	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d3c8      	bcc.n	80019c6 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	687e      	ldr	r6, [r7, #4]
 8001a3c:	466d      	mov	r5, sp
 8001a3e:	f106 0410 	add.w	r4, r6, #16
 8001a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	602b      	str	r3, [r5, #0]
 8001a4a:	1d33      	adds	r3, r6, #4
 8001a4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a4e:	6838      	ldr	r0, [r7, #0]
 8001a50:	f002 f995 	bl	8003d7e <USB_DevInit>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00d      	b.n	8001a82 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 f9d3 	bl	8004e26 <USB_DevDisconnect>

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_PCD_Start+0x16>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e016      	b.n	8001ace <HAL_PCD_Start+0x44>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f005 f9d1 	bl	8006e52 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 f9ac 	bl	8004e12 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 f91e 	bl	8003d00 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 f9a9 	bl	8004e3a <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001af2:	d102      	bne.n	8001afa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 faf3 	bl	80020e0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 f99b 	bl	8004e3a <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b0e:	d112      	bne.n	8001b36 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b22:	b292      	uxth	r2, r2
 8001b24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f004 ffa0 	bl	8006a6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b2e:	2100      	movs	r1, #0
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f8de 	bl	8001cf2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 f97d 	bl	8004e3a <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b4a:	d10b      	bne.n	8001b64 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b5e:	b292      	uxth	r2, r2
 8001b60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 f966 	bl	8004e3a <USB_ReadInterrupts>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b78:	d10b      	bne.n	8001b92 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b8c:	b292      	uxth	r2, r2
 8001b8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 f94f 	bl	8004e3a <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba6:	d126      	bne.n	8001bf6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0204 	bic.w	r2, r2, #4
 8001bba:	b292      	uxth	r2, r2
 8001bbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0208 	bic.w	r2, r2, #8
 8001bd2:	b292      	uxth	r2, r2
 8001bd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f004 ff81 	bl	8006ae0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bf0:	b292      	uxth	r2, r2
 8001bf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 f91d 	bl	8004e3a <USB_ReadInterrupts>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c0a:	d13d      	bne.n	8001c88 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0208 	orr.w	r2, r2, #8
 8001c1e:	b292      	uxth	r2, r2
 8001c20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c36:	b292      	uxth	r2, r2
 8001c38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0204 	orr.w	r2, r2, #4
 8001c4e:	b292      	uxth	r2, r2
 8001c50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 f8ee 	bl	8004e3a <USB_ReadInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c68:	d10b      	bne.n	8001c82 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c7c:	b292      	uxth	r2, r2
 8001c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f004 ff12 	bl	8006aac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 f8d4 	bl	8004e3a <USB_ReadInterrupts>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c9c:	d10e      	bne.n	8001cbc <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cb0:	b292      	uxth	r2, r2
 8001cb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f004 fecb 	bl	8006a52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f003 f8ba 	bl	8004e3a <USB_ReadInterrupts>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd0:	d10b      	bne.n	8001cea <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ce4:	b292      	uxth	r2, r2
 8001ce6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_PCD_SetAddress+0x1a>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e013      	b.n	8001d34 <HAL_PCD_SetAddress+0x42>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	78fa      	ldrb	r2, [r7, #3]
 8001d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 f861 	bl	8004dec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	70fb      	strb	r3, [r7, #3]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	803b      	strh	r3, [r7, #0]
 8001d52:	4613      	mov	r3, r2
 8001d54:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	da0b      	bge.n	8001d7a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	015b      	lsls	r3, r3, #5
 8001d6a:	3328      	adds	r3, #40	; 0x28
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	705a      	strb	r2, [r3, #1]
 8001d78:	e00b      	b.n	8001d92 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	015b      	lsls	r3, r3, #5
 8001d82:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d9e:	883a      	ldrh	r2, [r7, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	78ba      	ldrb	r2, [r7, #2]
 8001da8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	785b      	ldrb	r3, [r3, #1]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dbc:	78bb      	ldrb	r3, [r7, #2]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d102      	bne.n	8001dc8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_PCD_EP_Open+0x9a>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e00e      	b.n	8001df4 <HAL_PCD_EP_Open+0xb8>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68f9      	ldr	r1, [r7, #12]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f001 ffef 	bl	8003dc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001df2:	7afb      	ldrb	r3, [r7, #11]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	da0b      	bge.n	8001e28 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	015b      	lsls	r3, r3, #5
 8001e18:	3328      	adds	r3, #40	; 0x28
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2201      	movs	r2, #1
 8001e24:	705a      	strb	r2, [r3, #1]
 8001e26:	e00b      	b.n	8001e40 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	015b      	lsls	r3, r3, #5
 8001e30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_PCD_EP_Close+0x5e>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e00e      	b.n	8001e78 <HAL_PCD_EP_Close+0x7c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68f9      	ldr	r1, [r7, #12]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f002 fa9b 	bl	80043a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e90:	7afb      	ldrb	r3, [r7, #11]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	015b      	lsls	r3, r3, #5
 8001e98:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eba:	7afb      	ldrb	r3, [r7, #11]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ec6:	7afb      	ldrb	r3, [r7, #11]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d106      	bne.n	8001ede <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6979      	ldr	r1, [r7, #20]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f002 fbfa 	bl	80046d0 <USB_EPStartXfer>
 8001edc:	e005      	b.n	8001eea <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6979      	ldr	r1, [r7, #20]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 fbf3 	bl	80046d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	330a      	adds	r3, #10
 8001f0a:	015b      	lsls	r3, r3, #5
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3304      	adds	r3, #4
 8001f10:	681b      	ldr	r3, [r3, #0]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2c:	7afb      	ldrb	r3, [r7, #11]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	015b      	lsls	r3, r3, #5
 8001f34:	3328      	adds	r3, #40	; 0x28
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4413      	add	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2201      	movs	r2, #1
 8001f52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f54:	7afb      	ldrb	r3, [r7, #11]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f60:	7afb      	ldrb	r3, [r7, #11]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6979      	ldr	r1, [r7, #20]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 fbad 	bl	80046d0 <USB_EPStartXfer>
 8001f76:	e005      	b.n	8001f84 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6979      	ldr	r1, [r7, #20]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 fba6 	bl	80046d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b084      	sub	sp, #16
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	f003 0207 	and.w	r2, r3, #7
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d901      	bls.n	8001fac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e046      	b.n	800203a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	da0b      	bge.n	8001fcc <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	015b      	lsls	r3, r3, #5
 8001fbc:	3328      	adds	r3, #40	; 0x28
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	705a      	strb	r2, [r3, #1]
 8001fca:	e009      	b.n	8001fe0 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	015b      	lsls	r3, r3, #5
 8001fd0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_PCD_EP_SetStall+0x72>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e01c      	b.n	800203a <HAL_PCD_EP_SetStall+0xac>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68f9      	ldr	r1, [r7, #12]
 800200e:	4618      	mov	r0, r3
 8002010:	f002 fe16 	bl	8004c40 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	2b00      	cmp	r3, #0
 800201c:	d108      	bne.n	8002030 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002028:	4619      	mov	r1, r3
 800202a:	4610      	mov	r0, r2
 800202c:	f002 ff14 	bl	8004e58 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	f003 020f 	and.w	r2, r3, #15
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d901      	bls.n	8002060 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e03a      	b.n	80020d6 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002064:	2b00      	cmp	r3, #0
 8002066:	da0b      	bge.n	8002080 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	015b      	lsls	r3, r3, #5
 8002070:	3328      	adds	r3, #40	; 0x28
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	705a      	strb	r2, [r3, #1]
 800207e:	e00b      	b.n	8002098 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	015b      	lsls	r3, r3, #5
 8002088:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_PCD_EP_ClrStall+0x76>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e00e      	b.n	80020d6 <HAL_PCD_EP_ClrStall+0x94>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68f9      	ldr	r1, [r7, #12]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f002 fdfc 	bl	8004cc4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020e8:	e282      	b.n	80025f0 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020f2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80020f4:	8afb      	ldrh	r3, [r7, #22]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80020fe:	7d7b      	ldrb	r3, [r7, #21]
 8002100:	2b00      	cmp	r3, #0
 8002102:	f040 8142 	bne.w	800238a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002106:	8afb      	ldrh	r3, [r7, #22]
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	2b00      	cmp	r3, #0
 800210e:	d151      	bne.n	80021b4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800211c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002120:	b29c      	uxth	r4, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800212a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800212e:	b29b      	uxth	r3, r3
 8002130:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3328      	adds	r3, #40	; 0x28
 8002136:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002140:	b29b      	uxth	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	3302      	adds	r3, #2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	441a      	add	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002172:	2100      	movs	r1, #0
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f004 fc55 	bl	8006a24 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8234 	beq.w	80025f0 <PCD_EP_ISR_Handler+0x510>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b00      	cmp	r3, #0
 800218e:	f040 822f 	bne.w	80025f0 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	b292      	uxth	r2, r2
 80021a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021b2:	e21d      	b.n	80025f0 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021ba:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80021c4:	8a7b      	ldrh	r3, [r7, #18]
 80021c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d033      	beq.n	8002236 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	3306      	adds	r3, #6
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800220c:	b29b      	uxth	r3, r3
 800220e:	f002 fe72 	bl	8004ef6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	b29a      	uxth	r2, r3
 800221a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800221e:	4013      	ands	r3, r2
 8002220:	b29c      	uxth	r4, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800222a:	b292      	uxth	r2, r2
 800222c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f004 fbce 	bl	80069d0 <HAL_PCD_SetupStageCallback>
 8002234:	e1dc      	b.n	80025f0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002236:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f280 81d8 	bge.w	80025f0 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29a      	uxth	r2, r3
 8002248:	f640 738f 	movw	r3, #3983	; 0xf8f
 800224c:	4013      	ands	r3, r2
 800224e:	b29c      	uxth	r4, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002258:	b292      	uxth	r2, r2
 800225a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002264:	b29b      	uxth	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4413      	add	r3, r2
 8002270:	3306      	adds	r3, #6
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d019      	beq.n	80022c4 <PCD_EP_ISR_Handler+0x1e4>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d015      	beq.n	80022c4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6959      	ldr	r1, [r3, #20]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f002 fe24 	bl	8004ef6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	441a      	add	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022bc:	2100      	movs	r1, #0
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f004 fb98 	bl	80069f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	461c      	mov	r4, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	441c      	add	r4, r3
 80022d6:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80022da:	461c      	mov	r4, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10e      	bne.n	8002302 <PCD_EP_ISR_Handler+0x222>
 80022e4:	8823      	ldrh	r3, [r4, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	8023      	strh	r3, [r4, #0]
 80022f0:	8823      	ldrh	r3, [r4, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	8023      	strh	r3, [r4, #0]
 8002300:	e02d      	b.n	800235e <PCD_EP_ISR_Handler+0x27e>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b3e      	cmp	r3, #62	; 0x3e
 8002308:	d812      	bhi.n	8002330 <PCD_EP_ISR_Handler+0x250>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	085b      	lsrs	r3, r3, #1
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <PCD_EP_ISR_Handler+0x244>
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	3301      	adds	r3, #1
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	b29b      	uxth	r3, r3
 8002328:	029b      	lsls	r3, r3, #10
 800232a:	b29b      	uxth	r3, r3
 800232c:	8023      	strh	r3, [r4, #0]
 800232e:	e016      	b.n	800235e <PCD_EP_ISR_Handler+0x27e>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	2b00      	cmp	r3, #0
 8002342:	d102      	bne.n	800234a <PCD_EP_ISR_Handler+0x26a>
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	3b01      	subs	r3, #1
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	b29b      	uxth	r3, r3
 800234e:	029b      	lsls	r3, r3, #10
 8002350:	b29b      	uxth	r3, r3
 8002352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800235a:	b29b      	uxth	r3, r3
 800235c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800236a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236e:	b29c      	uxth	r4, r3
 8002370:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002374:	b29c      	uxth	r4, r3
 8002376:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800237a:	b29c      	uxth	r4, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4ba2      	ldr	r3, [pc, #648]	; (800260c <PCD_EP_ISR_Handler+0x52c>)
 8002382:	4323      	orrs	r3, r4
 8002384:	b29b      	uxth	r3, r3
 8002386:	8013      	strh	r3, [r2, #0]
 8002388:	e132      	b.n	80025f0 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	7d7b      	ldrb	r3, [r7, #21]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800239a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f280 80d1 	bge.w	8002546 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	7d7b      	ldrb	r3, [r7, #21]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023b8:	4013      	ands	r3, r2
 80023ba:	b29c      	uxth	r4, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	7d7b      	ldrb	r3, [r7, #21]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80023cc:	b292      	uxth	r2, r2
 80023ce:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80023d0:	7d7b      	ldrb	r3, [r7, #21]
 80023d2:	015b      	lsls	r3, r3, #5
 80023d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	7b1b      	ldrb	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d121      	bne.n	800242a <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4413      	add	r3, r2
 80023fa:	3306      	adds	r3, #6
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	4413      	add	r3, r2
 8002404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800240e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002410:	8bfb      	ldrh	r3, [r7, #30]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d072      	beq.n	80024fc <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6959      	ldr	r1, [r3, #20]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	88da      	ldrh	r2, [r3, #6]
 8002422:	8bfb      	ldrh	r3, [r7, #30]
 8002424:	f002 fd67 	bl	8004ef6 <USB_ReadPMA>
 8002428:	e068      	b.n	80024fc <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d021      	beq.n	8002488 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244c:	b29b      	uxth	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4413      	add	r3, r2
 8002458:	3302      	adds	r3, #2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800246c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800246e:	8bfb      	ldrh	r3, [r7, #30]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d02a      	beq.n	80024ca <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6959      	ldr	r1, [r3, #20]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	891a      	ldrh	r2, [r3, #8]
 8002480:	8bfb      	ldrh	r3, [r7, #30]
 8002482:	f002 fd38 	bl	8004ef6 <USB_ReadPMA>
 8002486:	e020      	b.n	80024ca <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002490:	b29b      	uxth	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	3306      	adds	r3, #6
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80024b2:	8bfb      	ldrh	r3, [r7, #30]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6959      	ldr	r1, [r3, #20]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	895a      	ldrh	r2, [r3, #10]
 80024c4:	8bfb      	ldrh	r3, [r7, #30]
 80024c6:	f002 fd16 	bl	8004ef6 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e4:	b29c      	uxth	r4, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	441a      	add	r2, r3
 80024f4:	4b46      	ldr	r3, [pc, #280]	; (8002610 <PCD_EP_ISR_Handler+0x530>)
 80024f6:	4323      	orrs	r3, r4
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	69da      	ldr	r2, [r3, #28]
 8002500:	8bfb      	ldrh	r3, [r7, #30]
 8002502:	441a      	add	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	8bfb      	ldrh	r3, [r7, #30]
 800250e:	441a      	add	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <PCD_EP_ISR_Handler+0x446>
 800251c:	8bfa      	ldrh	r2, [r7, #30]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	429a      	cmp	r2, r3
 8002524:	d206      	bcs.n	8002534 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	4619      	mov	r1, r3
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f004 fa61 	bl	80069f4 <HAL_PCD_DataOutStageCallback>
 8002532:	e008      	b.n	8002546 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	7819      	ldrb	r1, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff fc9d 	bl	8001e80 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002546:	8a7b      	ldrh	r3, [r7, #18]
 8002548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254c:	2b00      	cmp	r3, #0
 800254e:	d04f      	beq.n	80025f0 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002550:	7d7b      	ldrb	r3, [r7, #21]
 8002552:	015b      	lsls	r3, r3, #5
 8002554:	3328      	adds	r3, #40	; 0x28
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	7d7b      	ldrb	r3, [r7, #21]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002574:	b29c      	uxth	r4, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	7d7b      	ldrb	r3, [r7, #21]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	441a      	add	r2, r3
 8002582:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800258a:	b29b      	uxth	r3, r3
 800258c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002596:	b29b      	uxth	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	3302      	adds	r3, #2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	441a      	add	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	4619      	mov	r1, r3
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f004 fa24 	bl	8006a24 <HAL_PCD_DataInStageCallback>
 80025dc:	e008      	b.n	80025f0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	7819      	ldrb	r1, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff fc96 	bl	8001f1c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	b21b      	sxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f6ff ad74 	blt.w	80020ea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3724      	adds	r7, #36	; 0x24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}
 800260c:	ffff8080 	.word	0xffff8080
 8002610:	ffff80c0 	.word	0xffff80c0

08002614 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	817b      	strh	r3, [r7, #10]
 8002622:	4613      	mov	r3, r2
 8002624:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002626:	897b      	ldrh	r3, [r7, #10]
 8002628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002632:	897b      	ldrh	r3, [r7, #10]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	015b      	lsls	r3, r3, #5
 800263a:	3328      	adds	r3, #40	; 0x28
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	e006      	b.n	8002652 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002644:	897b      	ldrh	r3, [r7, #10]
 8002646:	015b      	lsls	r3, r3, #5
 8002648:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002652:	893b      	ldrh	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d107      	bne.n	8002668 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2200      	movs	r2, #0
 800265c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	b29a      	uxth	r2, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	80da      	strh	r2, [r3, #6]
 8002666:	e00b      	b.n	8002680 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2201      	movs	r2, #1
 800266c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	b29a      	uxth	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	0c1b      	lsrs	r3, r3, #16
 800267a:	b29a      	uxth	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e26c      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8087 	beq.w	80027ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026ac:	4b92      	ldr	r3, [pc, #584]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d00c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026b8:	4b8f      	ldr	r3, [pc, #572]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d112      	bne.n	80026ea <HAL_RCC_OscConfig+0x5e>
 80026c4:	4b8c      	ldr	r3, [pc, #560]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d0:	d10b      	bne.n	80026ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d2:	4b89      	ldr	r3, [pc, #548]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d06c      	beq.n	80027b8 <HAL_RCC_OscConfig+0x12c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d168      	bne.n	80027b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e246      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x76>
 80026f4:	4b80      	ldr	r3, [pc, #512]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a7f      	ldr	r2, [pc, #508]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	e02e      	b.n	8002760 <HAL_RCC_OscConfig+0xd4>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x98>
 800270a:	4b7b      	ldr	r3, [pc, #492]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a7a      	ldr	r2, [pc, #488]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b78      	ldr	r3, [pc, #480]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a77      	ldr	r2, [pc, #476]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800271c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e01d      	b.n	8002760 <HAL_RCC_OscConfig+0xd4>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0xbc>
 800272e:	4b72      	ldr	r3, [pc, #456]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a71      	ldr	r2, [pc, #452]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b6f      	ldr	r3, [pc, #444]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a6e      	ldr	r2, [pc, #440]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e00b      	b.n	8002760 <HAL_RCC_OscConfig+0xd4>
 8002748:	4b6b      	ldr	r3, [pc, #428]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a6a      	ldr	r2, [pc, #424]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800274e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b68      	ldr	r3, [pc, #416]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a67      	ldr	r2, [pc, #412]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800275a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d013      	beq.n	8002790 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fa9e 	bl	8000ca8 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002770:	f7fe fa9a 	bl	8000ca8 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	; 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e1fa      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b5d      	ldr	r3, [pc, #372]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0xe4>
 800278e:	e014      	b.n	80027ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7fe fa8a 	bl	8000ca8 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002798:	f7fe fa86 	bl	8000ca8 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	; 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e1e6      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	4b53      	ldr	r3, [pc, #332]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x10c>
 80027b6:	e000      	b.n	80027ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d063      	beq.n	800288e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027c6:	4b4c      	ldr	r3, [pc, #304]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027d2:	4b49      	ldr	r3, [pc, #292]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d11c      	bne.n	8002818 <HAL_RCC_OscConfig+0x18c>
 80027de:	4b46      	ldr	r3, [pc, #280]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d116      	bne.n	8002818 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	4b43      	ldr	r3, [pc, #268]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_RCC_OscConfig+0x176>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d001      	beq.n	8002802 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e1ba      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002802:	4b3d      	ldr	r3, [pc, #244]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4939      	ldr	r1, [pc, #228]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	e03a      	b.n	800288e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d020      	beq.n	8002862 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe fa3f 	bl	8000ca8 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282e:	f7fe fa3b 	bl	8000ca8 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e19b      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002840:	4b2d      	ldr	r3, [pc, #180]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284c:	4b2a      	ldr	r3, [pc, #168]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4927      	ldr	r1, [pc, #156]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]
 8002860:	e015      	b.n	800288e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe fa1e 	bl	8000ca8 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002870:	f7fe fa1a 	bl	8000ca8 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e17a      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d03a      	beq.n	8002910 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d019      	beq.n	80028d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a2:	4b17      	ldr	r3, [pc, #92]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a8:	f7fe f9fe 	bl	8000ca8 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b0:	f7fe f9fa 	bl	8000ca8 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e15a      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028ce:	2001      	movs	r0, #1
 80028d0:	f000 fada 	bl	8002e88 <RCC_Delay>
 80028d4:	e01c      	b.n	8002910 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028dc:	f7fe f9e4 	bl	8000ca8 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e2:	e00f      	b.n	8002904 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e4:	f7fe f9e0 	bl	8000ca8 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d908      	bls.n	8002904 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e140      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000
 80028fc:	42420000 	.word	0x42420000
 8002900:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002904:	4b9e      	ldr	r3, [pc, #632]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1e9      	bne.n	80028e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80a6 	beq.w	8002a6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002922:	4b97      	ldr	r3, [pc, #604]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10d      	bne.n	800294a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	4b94      	ldr	r3, [pc, #592]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4a93      	ldr	r2, [pc, #588]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002938:	61d3      	str	r3, [r2, #28]
 800293a:	4b91      	ldr	r3, [pc, #580]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002946:	2301      	movs	r3, #1
 8002948:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294a:	4b8e      	ldr	r3, [pc, #568]	; (8002b84 <HAL_RCC_OscConfig+0x4f8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d118      	bne.n	8002988 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002956:	4b8b      	ldr	r3, [pc, #556]	; (8002b84 <HAL_RCC_OscConfig+0x4f8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a8a      	ldr	r2, [pc, #552]	; (8002b84 <HAL_RCC_OscConfig+0x4f8>)
 800295c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002962:	f7fe f9a1 	bl	8000ca8 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296a:	f7fe f99d 	bl	8000ca8 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b64      	cmp	r3, #100	; 0x64
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e0fd      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	4b81      	ldr	r3, [pc, #516]	; (8002b84 <HAL_RCC_OscConfig+0x4f8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d106      	bne.n	800299e <HAL_RCC_OscConfig+0x312>
 8002990:	4b7b      	ldr	r3, [pc, #492]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	4a7a      	ldr	r2, [pc, #488]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6213      	str	r3, [r2, #32]
 800299c:	e02d      	b.n	80029fa <HAL_RCC_OscConfig+0x36e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x334>
 80029a6:	4b76      	ldr	r3, [pc, #472]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	4a75      	ldr	r2, [pc, #468]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	6213      	str	r3, [r2, #32]
 80029b2:	4b73      	ldr	r3, [pc, #460]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	4a72      	ldr	r2, [pc, #456]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	f023 0304 	bic.w	r3, r3, #4
 80029bc:	6213      	str	r3, [r2, #32]
 80029be:	e01c      	b.n	80029fa <HAL_RCC_OscConfig+0x36e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d10c      	bne.n	80029e2 <HAL_RCC_OscConfig+0x356>
 80029c8:	4b6d      	ldr	r3, [pc, #436]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	4a6c      	ldr	r2, [pc, #432]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	6213      	str	r3, [r2, #32]
 80029d4:	4b6a      	ldr	r3, [pc, #424]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	4a69      	ldr	r2, [pc, #420]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6213      	str	r3, [r2, #32]
 80029e0:	e00b      	b.n	80029fa <HAL_RCC_OscConfig+0x36e>
 80029e2:	4b67      	ldr	r3, [pc, #412]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	4a66      	ldr	r2, [pc, #408]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	6213      	str	r3, [r2, #32]
 80029ee:	4b64      	ldr	r3, [pc, #400]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	4a63      	ldr	r2, [pc, #396]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 80029f4:	f023 0304 	bic.w	r3, r3, #4
 80029f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d015      	beq.n	8002a2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a02:	f7fe f951 	bl	8000ca8 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fe f94d 	bl	8000ca8 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e0ab      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a20:	4b57      	ldr	r3, [pc, #348]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ee      	beq.n	8002a0a <HAL_RCC_OscConfig+0x37e>
 8002a2c:	e014      	b.n	8002a58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2e:	f7fe f93b 	bl	8000ca8 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a34:	e00a      	b.n	8002a4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a36:	f7fe f937 	bl	8000ca8 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e095      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a4c:	4b4c      	ldr	r3, [pc, #304]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1ee      	bne.n	8002a36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d105      	bne.n	8002a6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5e:	4b48      	ldr	r3, [pc, #288]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4a47      	ldr	r2, [pc, #284]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8081 	beq.w	8002b76 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a74:	4b42      	ldr	r3, [pc, #264]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 030c 	and.w	r3, r3, #12
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d061      	beq.n	8002b44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d146      	bne.n	8002b16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a88:	4b3f      	ldr	r3, [pc, #252]	; (8002b88 <HAL_RCC_OscConfig+0x4fc>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8e:	f7fe f90b 	bl	8000ca8 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a96:	f7fe f907 	bl	8000ca8 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e067      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa8:	4b35      	ldr	r3, [pc, #212]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f0      	bne.n	8002a96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abc:	d108      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002abe:	4b30      	ldr	r3, [pc, #192]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	492d      	ldr	r1, [pc, #180]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad0:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a19      	ldr	r1, [r3, #32]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	4927      	ldr	r1, [pc, #156]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae8:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <HAL_RCC_OscConfig+0x4fc>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7fe f8db 	bl	8000ca8 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af6:	f7fe f8d7 	bl	8000ca8 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e037      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b08:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x46a>
 8002b14:	e02f      	b.n	8002b76 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b16:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_RCC_OscConfig+0x4fc>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe f8c4 	bl	8000ca8 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe f8c0 	bl	8000ca8 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e020      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b36:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x498>
 8002b42:	e018      	b.n	8002b76 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e013      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_RCC_OscConfig+0x4f4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d106      	bne.n	8002b72 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d001      	beq.n	8002b76 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40007000 	.word	0x40007000
 8002b88:	42420060 	.word	0x42420060

08002b8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0d0      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b6a      	ldr	r3, [pc, #424]	; (8002d4c <HAL_RCC_ClockConfig+0x1c0>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d910      	bls.n	8002bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b67      	ldr	r3, [pc, #412]	; (8002d4c <HAL_RCC_ClockConfig+0x1c0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 0207 	bic.w	r2, r3, #7
 8002bb6:	4965      	ldr	r1, [pc, #404]	; (8002d4c <HAL_RCC_ClockConfig+0x1c0>)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b63      	ldr	r3, [pc, #396]	; (8002d4c <HAL_RCC_ClockConfig+0x1c0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0b8      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d020      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002be8:	4b59      	ldr	r3, [pc, #356]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a58      	ldr	r2, [pc, #352]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bf2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c00:	4b53      	ldr	r3, [pc, #332]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4a52      	ldr	r2, [pc, #328]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c0c:	4b50      	ldr	r3, [pc, #320]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	494d      	ldr	r1, [pc, #308]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d040      	beq.n	8002cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d115      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e07f      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d107      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4a:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e073      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5a:	4b3d      	ldr	r3, [pc, #244]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e06b      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c6a:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f023 0203 	bic.w	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4936      	ldr	r1, [pc, #216]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c7c:	f7fe f814 	bl	8000ca8 <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	e00a      	b.n	8002c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c84:	f7fe f810 	bl	8000ca8 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e053      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 020c 	and.w	r2, r3, #12
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d1eb      	bne.n	8002c84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cac:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <HAL_RCC_ClockConfig+0x1c0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d210      	bcs.n	8002cdc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 0207 	bic.w	r2, r3, #7
 8002cc2:	4922      	ldr	r1, [pc, #136]	; (8002d4c <HAL_RCC_ClockConfig+0x1c0>)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <HAL_RCC_ClockConfig+0x1c0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e032      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce8:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4916      	ldr	r1, [pc, #88]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d009      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d06:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	490e      	ldr	r1, [pc, #56]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d1a:	f000 f821 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 8002d1e:	4601      	mov	r1, r0
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2c:	5cd3      	ldrb	r3, [r2, r3]
 8002d2e:	fa21 f303 	lsr.w	r3, r1, r3
 8002d32:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <HAL_RCC_ClockConfig+0x1cc>)
 8002d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_RCC_ClockConfig+0x1d0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd ff72 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40022000 	.word	0x40022000
 8002d50:	40021000 	.word	0x40021000
 8002d54:	08006f8c 	.word	0x08006f8c
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	20000004 	.word	0x20000004

08002d60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d60:	b490      	push	{r4, r7}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d66:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d68:	1d3c      	adds	r4, r7, #4
 8002d6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d70:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d8a:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d002      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x40>
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0x46>
 8002d9e:	e02d      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002da0:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002da2:	623b      	str	r3, [r7, #32]
      break;
 8002da4:	e02d      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	0c9b      	lsrs	r3, r3, #18
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002db2:	4413      	add	r3, r2
 8002db4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002db8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d013      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dc4:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	0c5b      	lsrs	r3, r3, #17
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002dd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	4a0f      	ldr	r2, [pc, #60]	; (8002e1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dde:	fb02 f203 	mul.w	r2, r2, r3
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dea:	e004      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	4a0c      	ldr	r2, [pc, #48]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002df0:	fb02 f303 	mul.w	r3, r2, r3
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	623b      	str	r3, [r7, #32]
      break;
 8002dfa:	e002      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dfc:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dfe:	623b      	str	r3, [r7, #32]
      break;
 8002e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e02:	6a3b      	ldr	r3, [r7, #32]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3728      	adds	r7, #40	; 0x28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc90      	pop	{r4, r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	08006f30 	.word	0x08006f30
 8002e14:	08006f40 	.word	0x08006f40
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	007a1200 	.word	0x007a1200
 8002e20:	003d0900 	.word	0x003d0900

08002e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e28:	4b02      	ldr	r3, [pc, #8]	; (8002e34 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr
 8002e34:	20000000 	.word	0x20000000

08002e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e3c:	f7ff fff2 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e40:	4601      	mov	r1, r0
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	4a03      	ldr	r2, [pc, #12]	; (8002e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e4e:	5cd3      	ldrb	r3, [r2, r3]
 8002e50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	08006f9c 	.word	0x08006f9c

08002e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e64:	f7ff ffde 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e68:	4601      	mov	r1, r0
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	0adb      	lsrs	r3, r3, #11
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	4a03      	ldr	r2, [pc, #12]	; (8002e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e76:	5cd3      	ldrb	r3, [r2, r3]
 8002e78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000
 8002e84:	08006f9c 	.word	0x08006f9c

08002e88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <RCC_Delay+0x34>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <RCC_Delay+0x38>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	0a5b      	lsrs	r3, r3, #9
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ea4:	bf00      	nop
  }
  while (Delay --);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1e5a      	subs	r2, r3, #1
 8002eaa:	60fa      	str	r2, [r7, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f9      	bne.n	8002ea4 <RCC_Delay+0x1c>
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	10624dd3 	.word	0x10624dd3

08002ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d07d      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee4:	4b4f      	ldr	r3, [pc, #316]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10d      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef0:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	4a4b      	ldr	r2, [pc, #300]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efa:	61d3      	str	r3, [r2, #28]
 8002efc:	4b49      	ldr	r3, [pc, #292]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	4b46      	ldr	r3, [pc, #280]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d118      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f18:	4b43      	ldr	r3, [pc, #268]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a42      	ldr	r2, [pc, #264]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f24:	f7fd fec0 	bl	8000ca8 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2a:	e008      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7fd febc 	bl	8000ca8 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e06d      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f4a:	4b36      	ldr	r3, [pc, #216]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d02e      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d027      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f68:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f72:	4b2e      	ldr	r3, [pc, #184]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f78:	4b2c      	ldr	r3, [pc, #176]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f7e:	4a29      	ldr	r2, [pc, #164]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d014      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fd fe8b 	bl	8000ca8 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fd fe87 	bl	8000ca8 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e036      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ee      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4917      	ldr	r1, [pc, #92]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	4a13      	ldr	r2, [pc, #76]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	490b      	ldr	r1, [pc, #44]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4904      	ldr	r1, [pc, #16]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000
 8003028:	40007000 	.word	0x40007000
 800302c:	42420440 	.word	0x42420440

08003030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e01d      	b.n	800307e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fd fc4a 	bl	80008f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f000 fa4a 	bl	8003508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e01d      	b.n	80030d4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f815 	bl	80030dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	4619      	mov	r1, r3
 80030c4:	4610      	mov	r0, r2
 80030c6:	f000 fa1f 	bl	8003508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr

080030ee <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b086      	sub	sp, #24
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e07f      	b.n	8003202 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fd fc06 	bl	8000928 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003132:	f023 0307 	bic.w	r3, r3, #7
 8003136:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3304      	adds	r3, #4
 8003140:	4619      	mov	r1, r3
 8003142:	4610      	mov	r0, r2
 8003144:	f000 f9e0 	bl	8003508 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003170:	f023 0303 	bic.w	r3, r3, #3
 8003174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	4313      	orrs	r3, r2
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800318e:	f023 030c 	bic.w	r3, r3, #12
 8003192:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800319a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800319e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	4313      	orrs	r3, r2
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	011a      	lsls	r2, r3, #4
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	031b      	lsls	r3, r3, #12
 80031be:	4313      	orrs	r3, r2
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80031cc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	4313      	orrs	r3, r2
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003222:	2302      	movs	r3, #2
 8003224:	e0b4      	b.n	8003390 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2202      	movs	r2, #2
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b0c      	cmp	r3, #12
 800323a:	f200 809f 	bhi.w	800337c <HAL_TIM_PWM_ConfigChannel+0x170>
 800323e:	a201      	add	r2, pc, #4	; (adr r2, 8003244 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003244:	08003279 	.word	0x08003279
 8003248:	0800337d 	.word	0x0800337d
 800324c:	0800337d 	.word	0x0800337d
 8003250:	0800337d 	.word	0x0800337d
 8003254:	080032b9 	.word	0x080032b9
 8003258:	0800337d 	.word	0x0800337d
 800325c:	0800337d 	.word	0x0800337d
 8003260:	0800337d 	.word	0x0800337d
 8003264:	080032fb 	.word	0x080032fb
 8003268:	0800337d 	.word	0x0800337d
 800326c:	0800337d 	.word	0x0800337d
 8003270:	0800337d 	.word	0x0800337d
 8003274:	0800333b 	.word	0x0800333b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68b9      	ldr	r1, [r7, #8]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f9a4 	bl	80035cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0208 	orr.w	r2, r2, #8
 8003292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0204 	bic.w	r2, r2, #4
 80032a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6999      	ldr	r1, [r3, #24]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	619a      	str	r2, [r3, #24]
      break;
 80032b6:	e062      	b.n	800337e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f9ea 	bl	8003698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6999      	ldr	r1, [r3, #24]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	021a      	lsls	r2, r3, #8
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	619a      	str	r2, [r3, #24]
      break;
 80032f8:	e041      	b.n	800337e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fa33 	bl	800376c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0208 	orr.w	r2, r2, #8
 8003314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69da      	ldr	r2, [r3, #28]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0204 	bic.w	r2, r2, #4
 8003324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69d9      	ldr	r1, [r3, #28]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	61da      	str	r2, [r3, #28]
      break;
 8003338:	e021      	b.n	800337e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68b9      	ldr	r1, [r7, #8]
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fa7d 	bl	8003840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69d9      	ldr	r1, [r3, #28]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	021a      	lsls	r2, r3, #8
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	61da      	str	r2, [r3, #28]
      break;
 800337a:	e000      	b.n	800337e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800337c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_TIM_ConfigClockSource+0x18>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e0a6      	b.n	80034fe <HAL_TIM_ConfigClockSource+0x166>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b40      	cmp	r3, #64	; 0x40
 80033e6:	d067      	beq.n	80034b8 <HAL_TIM_ConfigClockSource+0x120>
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d80b      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x6c>
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d073      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x140>
 80033f0:	2b10      	cmp	r3, #16
 80033f2:	d802      	bhi.n	80033fa <HAL_TIM_ConfigClockSource+0x62>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d06f      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80033f8:	e078      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d06c      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x140>
 80033fe:	2b30      	cmp	r3, #48	; 0x30
 8003400:	d06a      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003402:	e073      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003404:	2b70      	cmp	r3, #112	; 0x70
 8003406:	d00d      	beq.n	8003424 <HAL_TIM_ConfigClockSource+0x8c>
 8003408:	2b70      	cmp	r3, #112	; 0x70
 800340a:	d804      	bhi.n	8003416 <HAL_TIM_ConfigClockSource+0x7e>
 800340c:	2b50      	cmp	r3, #80	; 0x50
 800340e:	d033      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0xe0>
 8003410:	2b60      	cmp	r3, #96	; 0x60
 8003412:	d041      	beq.n	8003498 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003414:	e06a      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341a:	d066      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x152>
 800341c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003420:	d017      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003422:	e063      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	6899      	ldr	r1, [r3, #8]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f000 fac9 	bl	80039ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003446:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	609a      	str	r2, [r3, #8]
      break;
 8003450:	e04c      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6899      	ldr	r1, [r3, #8]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f000 fab2 	bl	80039ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003474:	609a      	str	r2, [r3, #8]
      break;
 8003476:	e039      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	461a      	mov	r2, r3
 8003486:	f000 fa29 	bl	80038dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2150      	movs	r1, #80	; 0x50
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fa80 	bl	8003996 <TIM_ITRx_SetConfig>
      break;
 8003496:	e029      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f000 fa47 	bl	8003938 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2160      	movs	r1, #96	; 0x60
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fa70 	bl	8003996 <TIM_ITRx_SetConfig>
      break;
 80034b6:	e019      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	461a      	mov	r2, r3
 80034c6:	f000 fa09 	bl	80038dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2140      	movs	r1, #64	; 0x40
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fa60 	bl	8003996 <TIM_ITRx_SetConfig>
      break;
 80034d6:	e009      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f000 fa57 	bl	8003996 <TIM_ITRx_SetConfig>
      break;
 80034e8:	e000      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
      break;
 80034ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a29      	ldr	r2, [pc, #164]	; (80035c0 <TIM_Base_SetConfig+0xb8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00b      	beq.n	8003538 <TIM_Base_SetConfig+0x30>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003526:	d007      	beq.n	8003538 <TIM_Base_SetConfig+0x30>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <TIM_Base_SetConfig+0xbc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_Base_SetConfig+0x30>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <TIM_Base_SetConfig+0xc0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d108      	bne.n	800354a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <TIM_Base_SetConfig+0xb8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00b      	beq.n	800356a <TIM_Base_SetConfig+0x62>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003558:	d007      	beq.n	800356a <TIM_Base_SetConfig+0x62>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a19      	ldr	r2, [pc, #100]	; (80035c4 <TIM_Base_SetConfig+0xbc>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_Base_SetConfig+0x62>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a18      	ldr	r2, [pc, #96]	; (80035c8 <TIM_Base_SetConfig+0xc0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d108      	bne.n	800357c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a07      	ldr	r2, [pc, #28]	; (80035c0 <TIM_Base_SetConfig+0xb8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d103      	bne.n	80035b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	615a      	str	r2, [r3, #20]
}
 80035b6:	bf00      	nop
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40000800 	.word	0x40000800

080035cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f023 0201 	bic.w	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0303 	bic.w	r3, r3, #3
 8003602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f023 0302 	bic.w	r3, r3, #2
 8003614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <TIM_OC1_SetConfig+0xc8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d10c      	bne.n	8003642 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f023 0308 	bic.w	r3, r3, #8
 800362e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a13      	ldr	r2, [pc, #76]	; (8003694 <TIM_OC1_SetConfig+0xc8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d111      	bne.n	800366e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	621a      	str	r2, [r3, #32]
}
 8003688:	bf00      	nop
 800368a:	371c      	adds	r7, #28
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40012c00 	.word	0x40012c00

08003698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	f023 0210 	bic.w	r2, r3, #16
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f023 0320 	bic.w	r3, r3, #32
 80036e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <TIM_OC2_SetConfig+0xd0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d10d      	bne.n	8003714 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003712:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a14      	ldr	r2, [pc, #80]	; (8003768 <TIM_OC2_SetConfig+0xd0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d113      	bne.n	8003744 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003722:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800372a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	40012c00 	.word	0x40012c00

0800376c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0303 	bic.w	r3, r3, #3
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a1d      	ldr	r2, [pc, #116]	; (800383c <TIM_OC3_SetConfig+0xd0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d10d      	bne.n	80037e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a14      	ldr	r2, [pc, #80]	; (800383c <TIM_OC3_SetConfig+0xd0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d113      	bne.n	8003816 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	621a      	str	r2, [r3, #32]
}
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40012c00 	.word	0x40012c00

08003840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800386e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800388a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	031b      	lsls	r3, r3, #12
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a0f      	ldr	r2, [pc, #60]	; (80038d8 <TIM_OC4_SetConfig+0x98>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d109      	bne.n	80038b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	019b      	lsls	r3, r3, #6
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	621a      	str	r2, [r3, #32]
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr
 80038d8:	40012c00 	.word	0x40012c00

080038dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f023 0201 	bic.w	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f023 030a 	bic.w	r3, r3, #10
 8003918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	621a      	str	r2, [r3, #32]
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	f023 0210 	bic.w	r2, r3, #16
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003962:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	031b      	lsls	r3, r3, #12
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003974:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	621a      	str	r2, [r3, #32]
}
 800398c:	bf00      	nop
 800398e:	371c      	adds	r7, #28
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr

08003996 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f043 0307 	orr.w	r3, r3, #7
 80039b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	609a      	str	r2, [r3, #8]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b087      	sub	sp, #28
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	021a      	lsls	r2, r3, #8
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	609a      	str	r2, [r3, #8]
}
 80039fe:	bf00      	nop
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e032      	b.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a58:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e03f      	b.n	8003b22 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd f82c 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2224      	movs	r2, #36	; 0x24
 8003ac0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ad2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f829 	bl	8003b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ae8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695a      	ldr	r2, [r3, #20]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003af8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b66:	f023 030c 	bic.w	r3, r3, #12
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	68f9      	ldr	r1, [r7, #12]
 8003b70:	430b      	orrs	r3, r1
 8003b72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a52      	ldr	r2, [pc, #328]	; (8003cd8 <UART_SetConfig+0x1ac>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d14e      	bne.n	8003c32 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b94:	f7ff f964 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
 8003b98:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009a      	lsls	r2, r3, #2
 8003ba4:	441a      	add	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb0:	4a4a      	ldr	r2, [pc, #296]	; (8003cdc <UART_SetConfig+0x1b0>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	0119      	lsls	r1, r3, #4
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009a      	lsls	r2, r3, #2
 8003bc4:	441a      	add	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd0:	4b42      	ldr	r3, [pc, #264]	; (8003cdc <UART_SetConfig+0x1b0>)
 8003bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	2064      	movs	r0, #100	; 0x64
 8003bda:	fb00 f303 	mul.w	r3, r0, r3
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	3332      	adds	r3, #50	; 0x32
 8003be4:	4a3d      	ldr	r2, [pc, #244]	; (8003cdc <UART_SetConfig+0x1b0>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf0:	4419      	add	r1, r3
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009a      	lsls	r2, r3, #2
 8003bfc:	441a      	add	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c08:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <UART_SetConfig+0x1b0>)
 8003c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	2064      	movs	r0, #100	; 0x64
 8003c12:	fb00 f303 	mul.w	r3, r0, r3
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	3332      	adds	r3, #50	; 0x32
 8003c1c:	4a2f      	ldr	r2, [pc, #188]	; (8003cdc <UART_SetConfig+0x1b0>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	f003 020f 	and.w	r2, r3, #15
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	440a      	add	r2, r1
 8003c2e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003c30:	e04d      	b.n	8003cce <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c32:	f7ff f901 	bl	8002e38 <HAL_RCC_GetPCLK1Freq>
 8003c36:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	009a      	lsls	r2, r3, #2
 8003c42:	441a      	add	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4e:	4a23      	ldr	r2, [pc, #140]	; (8003cdc <UART_SetConfig+0x1b0>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	095b      	lsrs	r3, r3, #5
 8003c56:	0119      	lsls	r1, r3, #4
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	009a      	lsls	r2, r3, #2
 8003c62:	441a      	add	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c6e:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <UART_SetConfig+0x1b0>)
 8003c70:	fba3 0302 	umull	r0, r3, r3, r2
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	2064      	movs	r0, #100	; 0x64
 8003c78:	fb00 f303 	mul.w	r3, r0, r3
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	3332      	adds	r3, #50	; 0x32
 8003c82:	4a16      	ldr	r2, [pc, #88]	; (8003cdc <UART_SetConfig+0x1b0>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c8e:	4419      	add	r1, r3
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	009a      	lsls	r2, r3, #2
 8003c9a:	441a      	add	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <UART_SetConfig+0x1b0>)
 8003ca8:	fba3 0302 	umull	r0, r3, r3, r2
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	2064      	movs	r0, #100	; 0x64
 8003cb0:	fb00 f303 	mul.w	r3, r0, r3
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	3332      	adds	r3, #50	; 0x32
 8003cba:	4a08      	ldr	r2, [pc, #32]	; (8003cdc <UART_SetConfig+0x1b0>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	f003 020f 	and.w	r2, r3, #15
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	440a      	add	r2, r1
 8003ccc:	609a      	str	r2, [r3, #8]
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40013800 	.word	0x40013800
 8003cdc:	51eb851f 	.word	0x51eb851f

08003ce0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	f107 0014 	add.w	r0, r7, #20
 8003cee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	b004      	add	sp, #16
 8003cfe:	4770      	bx	lr

08003d00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d08:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d0c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	89fb      	ldrh	r3, [r7, #14]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr

08003d2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d36:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d3a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	b21a      	sxth	r2, r3
 8003d46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	b21b      	sxth	r3, r3
 8003d4e:	4013      	ands	r3, r2
 8003d50:	b21b      	sxth	r3, r3
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr

08003d66 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d7e:	b084      	sub	sp, #16
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	f107 0014 	add.w	r0, r7, #20
 8003d8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff ffa5 	bl	8003d00 <USB_EnableGlobalInt>

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dc2:	b004      	add	sp, #16
 8003dc4:	4770      	bx	lr
	...

08003dc8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003dc8:	b490      	push	{r4, r7}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dec:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	78db      	ldrb	r3, [r3, #3]
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d819      	bhi.n	8003e2a <USB_ActivateEndpoint+0x62>
 8003df6:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <USB_ActivateEndpoint+0x34>)
 8003df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfc:	08003e0d 	.word	0x08003e0d
 8003e00:	08003e21 	.word	0x08003e21
 8003e04:	08003e31 	.word	0x08003e31
 8003e08:	08003e17 	.word	0x08003e17
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003e0c:	89bb      	ldrh	r3, [r7, #12]
 8003e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e12:	81bb      	strh	r3, [r7, #12]
      break;
 8003e14:	e00d      	b.n	8003e32 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003e16:	89bb      	ldrh	r3, [r7, #12]
 8003e18:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003e1c:	81bb      	strh	r3, [r7, #12]
      break;
 8003e1e:	e008      	b.n	8003e32 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003e20:	89bb      	ldrh	r3, [r7, #12]
 8003e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e26:	81bb      	strh	r3, [r7, #12]
      break;
 8003e28:	e003      	b.n	8003e32 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e2e:	e000      	b.n	8003e32 <USB_ActivateEndpoint+0x6a>
      break;
 8003e30:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	441a      	add	r2, r3
 8003e3c:	89bb      	ldrh	r3, [r7, #12]
 8003e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	4313      	orrs	r3, r2
 8003e72:	b29c      	uxth	r4, r3
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	441a      	add	r2, r3
 8003e7e:	4b8a      	ldr	r3, [pc, #552]	; (80040a8 <USB_ActivateEndpoint+0x2e0>)
 8003e80:	4323      	orrs	r3, r4
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	7b1b      	ldrb	r3, [r3, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 8112 	bne.w	80040b4 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	785b      	ldrb	r3, [r3, #1]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d067      	beq.n	8003f68 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e98:	687c      	ldr	r4, [r7, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	441c      	add	r4, r3
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	4423      	add	r3, r4
 8003eac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eb0:	461c      	mov	r4, r3
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	88db      	ldrh	r3, [r3, #6]
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	b29c      	uxth	r4, r3
 8003ece:	4623      	mov	r3, r4
 8003ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d014      	beq.n	8003f02 <USB_ActivateEndpoint+0x13a>
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	b29c      	uxth	r4, r3
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	441a      	add	r2, r3
 8003efa:	4b6c      	ldr	r3, [pc, #432]	; (80040ac <USB_ActivateEndpoint+0x2e4>)
 8003efc:	4323      	orrs	r3, r4
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	78db      	ldrb	r3, [r3, #3]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d018      	beq.n	8003f3c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f20:	b29c      	uxth	r4, r3
 8003f22:	f084 0320 	eor.w	r3, r4, #32
 8003f26:	b29c      	uxth	r4, r3
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	441a      	add	r2, r3
 8003f32:	4b5d      	ldr	r3, [pc, #372]	; (80040a8 <USB_ActivateEndpoint+0x2e0>)
 8003f34:	4323      	orrs	r3, r4
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	8013      	strh	r3, [r2, #0]
 8003f3a:	e22b      	b.n	8004394 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f52:	b29c      	uxth	r4, r3
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	441a      	add	r2, r3
 8003f5e:	4b52      	ldr	r3, [pc, #328]	; (80040a8 <USB_ActivateEndpoint+0x2e0>)
 8003f60:	4323      	orrs	r3, r4
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	8013      	strh	r3, [r2, #0]
 8003f66:	e215      	b.n	8004394 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f68:	687c      	ldr	r4, [r7, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	441c      	add	r4, r3
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	4423      	add	r3, r4
 8003f7c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f80:	461c      	mov	r4, r3
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	88db      	ldrh	r3, [r3, #6]
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f90:	687c      	ldr	r4, [r7, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	441c      	add	r4, r3
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	4423      	add	r3, r4
 8003fa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fa8:	461c      	mov	r4, r3
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10e      	bne.n	8003fd0 <USB_ActivateEndpoint+0x208>
 8003fb2:	8823      	ldrh	r3, [r4, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	8023      	strh	r3, [r4, #0]
 8003fbe:	8823      	ldrh	r3, [r4, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	8023      	strh	r3, [r4, #0]
 8003fce:	e02d      	b.n	800402c <USB_ActivateEndpoint+0x264>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	2b3e      	cmp	r3, #62	; 0x3e
 8003fd6:	d812      	bhi.n	8003ffe <USB_ActivateEndpoint+0x236>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	085b      	lsrs	r3, r3, #1
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <USB_ActivateEndpoint+0x22a>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	029b      	lsls	r3, r3, #10
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	8023      	strh	r3, [r4, #0]
 8003ffc:	e016      	b.n	800402c <USB_ActivateEndpoint+0x264>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <USB_ActivateEndpoint+0x250>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3b01      	subs	r3, #1
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	b29b      	uxth	r3, r3
 800401c:	029b      	lsls	r3, r3, #10
 800401e:	b29b      	uxth	r3, r3
 8004020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004028:	b29b      	uxth	r3, r3
 800402a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	b29c      	uxth	r4, r3
 800403a:	4623      	mov	r3, r4
 800403c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d014      	beq.n	800406e <USB_ActivateEndpoint+0x2a6>
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	b29b      	uxth	r3, r3
 8004052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405a:	b29c      	uxth	r4, r3
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	441a      	add	r2, r3
 8004066:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <USB_ActivateEndpoint+0x2e8>)
 8004068:	4323      	orrs	r3, r4
 800406a:	b29b      	uxth	r3, r3
 800406c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004084:	b29c      	uxth	r4, r3
 8004086:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800408a:	b29c      	uxth	r4, r3
 800408c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004090:	b29c      	uxth	r4, r3
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	441a      	add	r2, r3
 800409c:	4b02      	ldr	r3, [pc, #8]	; (80040a8 <USB_ActivateEndpoint+0x2e0>)
 800409e:	4323      	orrs	r3, r4
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	8013      	strh	r3, [r2, #0]
 80040a4:	e176      	b.n	8004394 <USB_ActivateEndpoint+0x5cc>
 80040a6:	bf00      	nop
 80040a8:	ffff8080 	.word	0xffff8080
 80040ac:	ffff80c0 	.word	0xffff80c0
 80040b0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ca:	b29c      	uxth	r4, r3
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	441a      	add	r2, r3
 80040d6:	4b96      	ldr	r3, [pc, #600]	; (8004330 <USB_ActivateEndpoint+0x568>)
 80040d8:	4323      	orrs	r3, r4
 80040da:	b29b      	uxth	r3, r3
 80040dc:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80040de:	687c      	ldr	r4, [r7, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	441c      	add	r4, r3
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	4423      	add	r3, r4
 80040f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040f6:	461c      	mov	r4, r3
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	891b      	ldrh	r3, [r3, #8]
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	b29b      	uxth	r3, r3
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	b29b      	uxth	r3, r3
 8004104:	8023      	strh	r3, [r4, #0]
 8004106:	687c      	ldr	r4, [r7, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410e:	b29b      	uxth	r3, r3
 8004110:	441c      	add	r4, r3
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	4423      	add	r3, r4
 800411a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800411e:	461c      	mov	r4, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	895b      	ldrh	r3, [r3, #10]
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	b29b      	uxth	r3, r3
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	b29b      	uxth	r3, r3
 800412c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	785b      	ldrb	r3, [r3, #1]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f040 8088 	bne.w	8004248 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	b29c      	uxth	r4, r3
 8004146:	4623      	mov	r3, r4
 8004148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d014      	beq.n	800417a <USB_ActivateEndpoint+0x3b2>
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004166:	b29c      	uxth	r4, r3
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	441a      	add	r2, r3
 8004172:	4b70      	ldr	r3, [pc, #448]	; (8004334 <USB_ActivateEndpoint+0x56c>)
 8004174:	4323      	orrs	r3, r4
 8004176:	b29b      	uxth	r3, r3
 8004178:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29c      	uxth	r4, r3
 8004188:	4623      	mov	r3, r4
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d014      	beq.n	80041bc <USB_ActivateEndpoint+0x3f4>
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a8:	b29c      	uxth	r4, r3
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	441a      	add	r2, r3
 80041b4:	4b60      	ldr	r3, [pc, #384]	; (8004338 <USB_ActivateEndpoint+0x570>)
 80041b6:	4323      	orrs	r3, r4
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d2:	b29c      	uxth	r4, r3
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	4b56      	ldr	r3, [pc, #344]	; (8004338 <USB_ActivateEndpoint+0x570>)
 80041e0:	4323      	orrs	r3, r4
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fc:	b29c      	uxth	r4, r3
 80041fe:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004202:	b29c      	uxth	r4, r3
 8004204:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004208:	b29c      	uxth	r4, r3
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	441a      	add	r2, r3
 8004214:	4b49      	ldr	r3, [pc, #292]	; (800433c <USB_ActivateEndpoint+0x574>)
 8004216:	4323      	orrs	r3, r4
 8004218:	b29b      	uxth	r3, r3
 800421a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	b29b      	uxth	r3, r3
 800422a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004232:	b29c      	uxth	r4, r3
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	441a      	add	r2, r3
 800423e:	4b3f      	ldr	r3, [pc, #252]	; (800433c <USB_ActivateEndpoint+0x574>)
 8004240:	4323      	orrs	r3, r4
 8004242:	b29b      	uxth	r3, r3
 8004244:	8013      	strh	r3, [r2, #0]
 8004246:	e0a5      	b.n	8004394 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29c      	uxth	r4, r3
 8004256:	4623      	mov	r3, r4
 8004258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d014      	beq.n	800428a <USB_ActivateEndpoint+0x4c2>
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	b29b      	uxth	r3, r3
 800426e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	b29c      	uxth	r4, r3
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	441a      	add	r2, r3
 8004282:	4b2c      	ldr	r3, [pc, #176]	; (8004334 <USB_ActivateEndpoint+0x56c>)
 8004284:	4323      	orrs	r3, r4
 8004286:	b29b      	uxth	r3, r3
 8004288:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29c      	uxth	r4, r3
 8004298:	4623      	mov	r3, r4
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d014      	beq.n	80042cc <USB_ActivateEndpoint+0x504>
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b8:	b29c      	uxth	r4, r3
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	441a      	add	r2, r3
 80042c4:	4b1c      	ldr	r3, [pc, #112]	; (8004338 <USB_ActivateEndpoint+0x570>)
 80042c6:	4323      	orrs	r3, r4
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e2:	b29c      	uxth	r4, r3
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	441a      	add	r2, r3
 80042ee:	4b11      	ldr	r3, [pc, #68]	; (8004334 <USB_ActivateEndpoint+0x56c>)
 80042f0:	4323      	orrs	r3, r4
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	78db      	ldrb	r3, [r3, #3]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d020      	beq.n	8004340 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004314:	b29c      	uxth	r4, r3
 8004316:	f084 0320 	eor.w	r3, r4, #32
 800431a:	b29c      	uxth	r4, r3
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	441a      	add	r2, r3
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <USB_ActivateEndpoint+0x574>)
 8004328:	4323      	orrs	r3, r4
 800432a:	b29b      	uxth	r3, r3
 800432c:	8013      	strh	r3, [r2, #0]
 800432e:	e01c      	b.n	800436a <USB_ActivateEndpoint+0x5a2>
 8004330:	ffff8180 	.word	0xffff8180
 8004334:	ffffc080 	.word	0xffffc080
 8004338:	ffff80c0 	.word	0xffff80c0
 800433c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004356:	b29c      	uxth	r4, r3
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	441a      	add	r2, r3
 8004362:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <USB_ActivateEndpoint+0x5d8>)
 8004364:	4323      	orrs	r3, r4
 8004366:	b29b      	uxth	r3, r3
 8004368:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	b29b      	uxth	r3, r3
 8004378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004380:	b29c      	uxth	r4, r3
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	441a      	add	r2, r3
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <USB_ActivateEndpoint+0x5d8>)
 800438e:	4323      	orrs	r3, r4
 8004390:	b29b      	uxth	r3, r3
 8004392:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004394:	7bfb      	ldrb	r3, [r7, #15]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bc90      	pop	{r4, r7}
 800439e:	4770      	bx	lr
 80043a0:	ffff8080 	.word	0xffff8080

080043a4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043a4:	b490      	push	{r4, r7}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	7b1b      	ldrb	r3, [r3, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d171      	bne.n	800449a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	785b      	ldrb	r3, [r3, #1]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d036      	beq.n	800442c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29c      	uxth	r4, r3
 80043cc:	4623      	mov	r3, r4
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d014      	beq.n	8004400 <USB_DeactivateEndpoint+0x5c>
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ec:	b29c      	uxth	r4, r3
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	441a      	add	r2, r3
 80043f8:	4b6b      	ldr	r3, [pc, #428]	; (80045a8 <USB_DeactivateEndpoint+0x204>)
 80043fa:	4323      	orrs	r3, r4
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	b29b      	uxth	r3, r3
 800440e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004416:	b29c      	uxth	r4, r3
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	441a      	add	r2, r3
 8004422:	4b62      	ldr	r3, [pc, #392]	; (80045ac <USB_DeactivateEndpoint+0x208>)
 8004424:	4323      	orrs	r3, r4
 8004426:	b29b      	uxth	r3, r3
 8004428:	8013      	strh	r3, [r2, #0]
 800442a:	e144      	b.n	80046b6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29c      	uxth	r4, r3
 800443a:	4623      	mov	r3, r4
 800443c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d014      	beq.n	800446e <USB_DeactivateEndpoint+0xca>
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	b29b      	uxth	r3, r3
 8004452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445a:	b29c      	uxth	r4, r3
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	441a      	add	r2, r3
 8004466:	4b52      	ldr	r3, [pc, #328]	; (80045b0 <USB_DeactivateEndpoint+0x20c>)
 8004468:	4323      	orrs	r3, r4
 800446a:	b29b      	uxth	r3, r3
 800446c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004484:	b29c      	uxth	r4, r3
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	441a      	add	r2, r3
 8004490:	4b46      	ldr	r3, [pc, #280]	; (80045ac <USB_DeactivateEndpoint+0x208>)
 8004492:	4323      	orrs	r3, r4
 8004494:	b29b      	uxth	r3, r3
 8004496:	8013      	strh	r3, [r2, #0]
 8004498:	e10d      	b.n	80046b6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	785b      	ldrb	r3, [r3, #1]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f040 8088 	bne.w	80045b4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	b29c      	uxth	r4, r3
 80044b2:	4623      	mov	r3, r4
 80044b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d014      	beq.n	80044e6 <USB_DeactivateEndpoint+0x142>
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d2:	b29c      	uxth	r4, r3
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	441a      	add	r2, r3
 80044de:	4b34      	ldr	r3, [pc, #208]	; (80045b0 <USB_DeactivateEndpoint+0x20c>)
 80044e0:	4323      	orrs	r3, r4
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29c      	uxth	r4, r3
 80044f4:	4623      	mov	r3, r4
 80044f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d014      	beq.n	8004528 <USB_DeactivateEndpoint+0x184>
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29b      	uxth	r3, r3
 800450c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004514:	b29c      	uxth	r4, r3
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	441a      	add	r2, r3
 8004520:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <USB_DeactivateEndpoint+0x204>)
 8004522:	4323      	orrs	r3, r4
 8004524:	b29b      	uxth	r3, r3
 8004526:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b29b      	uxth	r3, r3
 8004536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453e:	b29c      	uxth	r4, r3
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	441a      	add	r2, r3
 800454a:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <USB_DeactivateEndpoint+0x204>)
 800454c:	4323      	orrs	r3, r4
 800454e:	b29b      	uxth	r3, r3
 8004550:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	b29b      	uxth	r3, r3
 8004560:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004568:	b29c      	uxth	r4, r3
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	441a      	add	r2, r3
 8004574:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <USB_DeactivateEndpoint+0x208>)
 8004576:	4323      	orrs	r3, r4
 8004578:	b29b      	uxth	r3, r3
 800457a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800458e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004592:	b29c      	uxth	r4, r3
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	441a      	add	r2, r3
 800459e:	4b03      	ldr	r3, [pc, #12]	; (80045ac <USB_DeactivateEndpoint+0x208>)
 80045a0:	4323      	orrs	r3, r4
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	8013      	strh	r3, [r2, #0]
 80045a6:	e086      	b.n	80046b6 <USB_DeactivateEndpoint+0x312>
 80045a8:	ffff80c0 	.word	0xffff80c0
 80045ac:	ffff8080 	.word	0xffff8080
 80045b0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29c      	uxth	r4, r3
 80045c2:	4623      	mov	r3, r4
 80045c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d014      	beq.n	80045f6 <USB_DeactivateEndpoint+0x252>
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	b29c      	uxth	r4, r3
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	441a      	add	r2, r3
 80045ee:	4b35      	ldr	r3, [pc, #212]	; (80046c4 <USB_DeactivateEndpoint+0x320>)
 80045f0:	4323      	orrs	r3, r4
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	b29c      	uxth	r4, r3
 8004604:	4623      	mov	r3, r4
 8004606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d014      	beq.n	8004638 <USB_DeactivateEndpoint+0x294>
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004624:	b29c      	uxth	r4, r3
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	441a      	add	r2, r3
 8004630:	4b25      	ldr	r3, [pc, #148]	; (80046c8 <USB_DeactivateEndpoint+0x324>)
 8004632:	4323      	orrs	r3, r4
 8004634:	b29b      	uxth	r3, r3
 8004636:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	b29b      	uxth	r3, r3
 8004646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	b29c      	uxth	r4, r3
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	441a      	add	r2, r3
 800465a:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <USB_DeactivateEndpoint+0x320>)
 800465c:	4323      	orrs	r3, r4
 800465e:	b29b      	uxth	r3, r3
 8004660:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004678:	b29c      	uxth	r4, r3
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	441a      	add	r2, r3
 8004684:	4b11      	ldr	r3, [pc, #68]	; (80046cc <USB_DeactivateEndpoint+0x328>)
 8004686:	4323      	orrs	r3, r4
 8004688:	b29b      	uxth	r3, r3
 800468a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800469e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a2:	b29c      	uxth	r4, r3
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	441a      	add	r2, r3
 80046ae:	4b07      	ldr	r3, [pc, #28]	; (80046cc <USB_DeactivateEndpoint+0x328>)
 80046b0:	4323      	orrs	r3, r4
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc90      	pop	{r4, r7}
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	ffffc080 	.word	0xffffc080
 80046c8:	ffff80c0 	.word	0xffff80c0
 80046cc:	ffff8080 	.word	0xffff8080

080046d0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046d0:	b590      	push	{r4, r7, lr}
 80046d2:	b08d      	sub	sp, #52	; 0x34
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	785b      	ldrb	r3, [r3, #1]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	f040 8160 	bne.w	80049a4 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	699a      	ldr	r2, [r3, #24]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d909      	bls.n	8004704 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	1ad2      	subs	r2, r2, r3
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	619a      	str	r2, [r3, #24]
 8004702:	e005      	b.n	8004710 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2200      	movs	r2, #0
 800470e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	7b1b      	ldrb	r3, [r3, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d119      	bne.n	800474c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	6959      	ldr	r1, [r3, #20]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	88da      	ldrh	r2, [r3, #6]
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	b29b      	uxth	r3, r3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fba2 	bl	8004e6e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800472a:	687c      	ldr	r4, [r7, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004732:	b29b      	uxth	r3, r3
 8004734:	441c      	add	r4, r3
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	4423      	add	r3, r4
 800473e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004742:	461c      	mov	r4, r3
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	b29b      	uxth	r3, r3
 8004748:	8023      	strh	r3, [r4, #0]
 800474a:	e10f      	b.n	800496c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d065      	beq.n	800482e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004762:	687c      	ldr	r4, [r7, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d148      	bne.n	80047fe <USB_EPStartXfer+0x12e>
 800476c:	687c      	ldr	r4, [r7, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004774:	b29b      	uxth	r3, r3
 8004776:	441c      	add	r4, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	4423      	add	r3, r4
 8004780:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004784:	461c      	mov	r4, r3
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10e      	bne.n	80047aa <USB_EPStartXfer+0xda>
 800478c:	8823      	ldrh	r3, [r4, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004794:	b29b      	uxth	r3, r3
 8004796:	8023      	strh	r3, [r4, #0]
 8004798:	8823      	ldrh	r3, [r4, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	8023      	strh	r3, [r4, #0]
 80047a8:	e03d      	b.n	8004826 <USB_EPStartXfer+0x156>
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	2b3e      	cmp	r3, #62	; 0x3e
 80047ae:	d810      	bhi.n	80047d2 <USB_EPStartXfer+0x102>
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	085b      	lsrs	r3, r3, #1
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <USB_EPStartXfer+0xf6>
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	3301      	adds	r3, #1
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	029b      	lsls	r3, r3, #10
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	8023      	strh	r3, [r4, #0]
 80047d0:	e029      	b.n	8004826 <USB_EPStartXfer+0x156>
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d102      	bne.n	80047e8 <USB_EPStartXfer+0x118>
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	3b01      	subs	r3, #1
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	029b      	lsls	r3, r3, #10
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	8023      	strh	r3, [r4, #0]
 80047fc:	e013      	b.n	8004826 <USB_EPStartXfer+0x156>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d10f      	bne.n	8004826 <USB_EPStartXfer+0x156>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480c:	b29b      	uxth	r3, r3
 800480e:	441c      	add	r4, r3
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	4423      	add	r3, r4
 8004818:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	895b      	ldrh	r3, [r3, #10]
 800482a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800482c:	e063      	b.n	80048f6 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	785b      	ldrb	r3, [r3, #1]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d148      	bne.n	80048c8 <USB_EPStartXfer+0x1f8>
 8004836:	687c      	ldr	r4, [r7, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483e:	b29b      	uxth	r3, r3
 8004840:	441c      	add	r4, r3
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	4423      	add	r3, r4
 800484a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800484e:	461c      	mov	r4, r3
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10e      	bne.n	8004874 <USB_EPStartXfer+0x1a4>
 8004856:	8823      	ldrh	r3, [r4, #0]
 8004858:	b29b      	uxth	r3, r3
 800485a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800485e:	b29b      	uxth	r3, r3
 8004860:	8023      	strh	r3, [r4, #0]
 8004862:	8823      	ldrh	r3, [r4, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800486a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486e:	b29b      	uxth	r3, r3
 8004870:	8023      	strh	r3, [r4, #0]
 8004872:	e03d      	b.n	80048f0 <USB_EPStartXfer+0x220>
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	2b3e      	cmp	r3, #62	; 0x3e
 8004878:	d810      	bhi.n	800489c <USB_EPStartXfer+0x1cc>
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	085b      	lsrs	r3, r3, #1
 800487e:	623b      	str	r3, [r7, #32]
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <USB_EPStartXfer+0x1c0>
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	3301      	adds	r3, #1
 800488e:	623b      	str	r3, [r7, #32]
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	b29b      	uxth	r3, r3
 8004894:	029b      	lsls	r3, r3, #10
 8004896:	b29b      	uxth	r3, r3
 8004898:	8023      	strh	r3, [r4, #0]
 800489a:	e029      	b.n	80048f0 <USB_EPStartXfer+0x220>
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	623b      	str	r3, [r7, #32]
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d102      	bne.n	80048b2 <USB_EPStartXfer+0x1e2>
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	623b      	str	r3, [r7, #32]
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	029b      	lsls	r3, r3, #10
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	8023      	strh	r3, [r4, #0]
 80048c6:	e013      	b.n	80048f0 <USB_EPStartXfer+0x220>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10f      	bne.n	80048f0 <USB_EPStartXfer+0x220>
 80048d0:	687c      	ldr	r4, [r7, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d8:	b29b      	uxth	r3, r3
 80048da:	441c      	add	r4, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	4423      	add	r3, r4
 80048e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048e8:	461c      	mov	r4, r3
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	891b      	ldrh	r3, [r3, #8]
 80048f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6959      	ldr	r1, [r3, #20]
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fab4 	bl	8004e6e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	785b      	ldrb	r3, [r3, #1]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d115      	bne.n	800493a <USB_EPStartXfer+0x26a>
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	b29b      	uxth	r3, r3
 800491c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004924:	b29c      	uxth	r4, r3
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	441a      	add	r2, r3
 8004930:	4b9a      	ldr	r3, [pc, #616]	; (8004b9c <USB_EPStartXfer+0x4cc>)
 8004932:	4323      	orrs	r3, r4
 8004934:	b29b      	uxth	r3, r3
 8004936:	8013      	strh	r3, [r2, #0]
 8004938:	e018      	b.n	800496c <USB_EPStartXfer+0x29c>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	785b      	ldrb	r3, [r3, #1]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d114      	bne.n	800496c <USB_EPStartXfer+0x29c>
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	b29b      	uxth	r3, r3
 8004950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004958:	b29c      	uxth	r4, r3
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	441a      	add	r2, r3
 8004964:	4b8e      	ldr	r3, [pc, #568]	; (8004ba0 <USB_EPStartXfer+0x4d0>)
 8004966:	4323      	orrs	r3, r4
 8004968:	b29b      	uxth	r3, r3
 800496a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29b      	uxth	r3, r3
 800497a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004982:	b29c      	uxth	r4, r3
 8004984:	f084 0310 	eor.w	r3, r4, #16
 8004988:	b29c      	uxth	r4, r3
 800498a:	f084 0320 	eor.w	r3, r4, #32
 800498e:	b29c      	uxth	r4, r3
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	441a      	add	r2, r3
 800499a:	4b82      	ldr	r3, [pc, #520]	; (8004ba4 <USB_EPStartXfer+0x4d4>)
 800499c:	4323      	orrs	r3, r4
 800499e:	b29b      	uxth	r3, r3
 80049a0:	8013      	strh	r3, [r2, #0]
 80049a2:	e146      	b.n	8004c32 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	699a      	ldr	r2, [r3, #24]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d909      	bls.n	80049c4 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	1ad2      	subs	r2, r2, r3
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	619a      	str	r2, [r3, #24]
 80049c2:	e005      	b.n	80049d0 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2200      	movs	r2, #0
 80049ce:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	7b1b      	ldrb	r3, [r3, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d148      	bne.n	8004a6a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80049d8:	687c      	ldr	r4, [r7, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	441c      	add	r4, r3
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	4423      	add	r3, r4
 80049ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049f0:	461c      	mov	r4, r3
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10e      	bne.n	8004a16 <USB_EPStartXfer+0x346>
 80049f8:	8823      	ldrh	r3, [r4, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	8023      	strh	r3, [r4, #0]
 8004a04:	8823      	ldrh	r3, [r4, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	8023      	strh	r3, [r4, #0]
 8004a14:	e0f2      	b.n	8004bfc <USB_EPStartXfer+0x52c>
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	2b3e      	cmp	r3, #62	; 0x3e
 8004a1a:	d810      	bhi.n	8004a3e <USB_EPStartXfer+0x36e>
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	085b      	lsrs	r3, r3, #1
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <USB_EPStartXfer+0x362>
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	61fb      	str	r3, [r7, #28]
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	029b      	lsls	r3, r3, #10
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	8023      	strh	r3, [r4, #0]
 8004a3c:	e0de      	b.n	8004bfc <USB_EPStartXfer+0x52c>
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	095b      	lsrs	r3, r3, #5
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d102      	bne.n	8004a54 <USB_EPStartXfer+0x384>
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	029b      	lsls	r3, r3, #10
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	8023      	strh	r3, [r4, #0]
 8004a68:	e0c8      	b.n	8004bfc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	785b      	ldrb	r3, [r3, #1]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d148      	bne.n	8004b04 <USB_EPStartXfer+0x434>
 8004a72:	687c      	ldr	r4, [r7, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	441c      	add	r4, r3
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	4423      	add	r3, r4
 8004a86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a8a:	461c      	mov	r4, r3
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10e      	bne.n	8004ab0 <USB_EPStartXfer+0x3e0>
 8004a92:	8823      	ldrh	r3, [r4, #0]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	8023      	strh	r3, [r4, #0]
 8004a9e:	8823      	ldrh	r3, [r4, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	8023      	strh	r3, [r4, #0]
 8004aae:	e03d      	b.n	8004b2c <USB_EPStartXfer+0x45c>
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ab4:	d810      	bhi.n	8004ad8 <USB_EPStartXfer+0x408>
 8004ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab8:	085b      	lsrs	r3, r3, #1
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <USB_EPStartXfer+0x3fc>
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	61bb      	str	r3, [r7, #24]
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	029b      	lsls	r3, r3, #10
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	8023      	strh	r3, [r4, #0]
 8004ad6:	e029      	b.n	8004b2c <USB_EPStartXfer+0x45c>
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	61bb      	str	r3, [r7, #24]
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	f003 031f 	and.w	r3, r3, #31
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d102      	bne.n	8004aee <USB_EPStartXfer+0x41e>
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	029b      	lsls	r3, r3, #10
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	8023      	strh	r3, [r4, #0]
 8004b02:	e013      	b.n	8004b2c <USB_EPStartXfer+0x45c>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	785b      	ldrb	r3, [r3, #1]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d10f      	bne.n	8004b2c <USB_EPStartXfer+0x45c>
 8004b0c:	687c      	ldr	r4, [r7, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	441c      	add	r4, r3
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	4423      	add	r3, r4
 8004b20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b24:	461c      	mov	r4, r3
 8004b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	8023      	strh	r3, [r4, #0]
 8004b2c:	687c      	ldr	r4, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	785b      	ldrb	r3, [r3, #1]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d14e      	bne.n	8004bd4 <USB_EPStartXfer+0x504>
 8004b36:	687c      	ldr	r4, [r7, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	441c      	add	r4, r3
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	4423      	add	r3, r4
 8004b4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b4e:	461c      	mov	r4, r3
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10e      	bne.n	8004b74 <USB_EPStartXfer+0x4a4>
 8004b56:	8823      	ldrh	r3, [r4, #0]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	8023      	strh	r3, [r4, #0]
 8004b62:	8823      	ldrh	r3, [r4, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	8023      	strh	r3, [r4, #0]
 8004b72:	e043      	b.n	8004bfc <USB_EPStartXfer+0x52c>
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	2b3e      	cmp	r3, #62	; 0x3e
 8004b78:	d816      	bhi.n	8004ba8 <USB_EPStartXfer+0x4d8>
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	085b      	lsrs	r3, r3, #1
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <USB_EPStartXfer+0x4c0>
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	029b      	lsls	r3, r3, #10
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8023      	strh	r3, [r4, #0]
 8004b9a:	e02f      	b.n	8004bfc <USB_EPStartXfer+0x52c>
 8004b9c:	ffff80c0 	.word	0xffff80c0
 8004ba0:	ffffc080 	.word	0xffffc080
 8004ba4:	ffff8080 	.word	0xffff8080
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <USB_EPStartXfer+0x4ee>
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	029b      	lsls	r3, r3, #10
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	8023      	strh	r3, [r4, #0]
 8004bd2:	e013      	b.n	8004bfc <USB_EPStartXfer+0x52c>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	785b      	ldrb	r3, [r3, #1]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d10f      	bne.n	8004bfc <USB_EPStartXfer+0x52c>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	441c      	add	r4, r3
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	4423      	add	r3, r4
 8004bee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	b29c      	uxth	r4, r3
 8004c14:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004c18:	b29c      	uxth	r4, r3
 8004c1a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004c1e:	b29c      	uxth	r4, r3
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	441a      	add	r2, r3
 8004c2a:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <USB_EPStartXfer+0x56c>)
 8004c2c:	4323      	orrs	r3, r4
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3734      	adds	r7, #52	; 0x34
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd90      	pop	{r4, r7, pc}
 8004c3c:	ffff8080 	.word	0xffff8080

08004c40 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c40:	b490      	push	{r4, r7}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	785b      	ldrb	r3, [r3, #1]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d018      	beq.n	8004c84 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c68:	b29c      	uxth	r4, r3
 8004c6a:	f084 0310 	eor.w	r3, r4, #16
 8004c6e:	b29c      	uxth	r4, r3
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	441a      	add	r2, r3
 8004c7a:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <USB_EPSetStall+0x80>)
 8004c7c:	4323      	orrs	r3, r4
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	8013      	strh	r3, [r2, #0]
 8004c82:	e017      	b.n	8004cb4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9a:	b29c      	uxth	r4, r3
 8004c9c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004ca0:	b29c      	uxth	r4, r3
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	441a      	add	r2, r3
 8004cac:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <USB_EPSetStall+0x80>)
 8004cae:	4323      	orrs	r3, r4
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc90      	pop	{r4, r7}
 8004cbe:	4770      	bx	lr
 8004cc0:	ffff8080 	.word	0xffff8080

08004cc4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cc4:	b490      	push	{r4, r7}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	7b1b      	ldrb	r3, [r3, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d17d      	bne.n	8004dd2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	785b      	ldrb	r3, [r3, #1]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d03d      	beq.n	8004d5a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	b29c      	uxth	r4, r3
 8004cec:	4623      	mov	r3, r4
 8004cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d014      	beq.n	8004d20 <USB_EPClearStall+0x5c>
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0c:	b29c      	uxth	r4, r3
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	441a      	add	r2, r3
 8004d18:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <USB_EPClearStall+0x11c>)
 8004d1a:	4323      	orrs	r3, r4
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	78db      	ldrb	r3, [r3, #3]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d054      	beq.n	8004dd2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3e:	b29c      	uxth	r4, r3
 8004d40:	f084 0320 	eor.w	r3, r4, #32
 8004d44:	b29c      	uxth	r4, r3
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	441a      	add	r2, r3
 8004d50:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <USB_EPClearStall+0x120>)
 8004d52:	4323      	orrs	r3, r4
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	8013      	strh	r3, [r2, #0]
 8004d58:	e03b      	b.n	8004dd2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29c      	uxth	r4, r3
 8004d68:	4623      	mov	r3, r4
 8004d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d014      	beq.n	8004d9c <USB_EPClearStall+0xd8>
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d88:	b29c      	uxth	r4, r3
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	4b14      	ldr	r3, [pc, #80]	; (8004de8 <USB_EPClearStall+0x124>)
 8004d96:	4323      	orrs	r3, r4
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db2:	b29c      	uxth	r4, r3
 8004db4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004db8:	b29c      	uxth	r4, r3
 8004dba:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004dbe:	b29c      	uxth	r4, r3
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	441a      	add	r2, r3
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <USB_EPClearStall+0x120>)
 8004dcc:	4323      	orrs	r3, r4
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc90      	pop	{r4, r7}
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	ffff80c0 	.word	0xffff80c0
 8004de4:	ffff8080 	.word	0xffff8080
 8004de8:	ffffc080 	.word	0xffffc080

08004dec <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2280      	movs	r2, #128	; 0x80
 8004e02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr

08004e12 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr

08004e26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr

08004e3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr

08004e58 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr

08004e6e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b08d      	sub	sp, #52	; 0x34
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	4611      	mov	r1, r2
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	80fb      	strh	r3, [r7, #6]
 8004e80:	4613      	mov	r3, r2
 8004e82:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004e84:	88bb      	ldrh	r3, [r7, #4]
 8004e86:	3301      	adds	r3, #1
 8004e88:	085b      	lsrs	r3, r3, #1
 8004e8a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	005a      	lsls	r2, r3, #1
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ea0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ea6:	e01e      	b.n	8004ee6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	021b      	lsls	r3, r3, #8
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	3302      	adds	r3, #2
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	3301      	adds	r3, #1
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1dd      	bne.n	8004ea8 <USB_WritePMA+0x3a>
  }
}
 8004eec:	bf00      	nop
 8004eee:	3734      	adds	r7, #52	; 0x34
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr

08004ef6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b08b      	sub	sp, #44	; 0x2c
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	4611      	mov	r1, r2
 8004f02:	461a      	mov	r2, r3
 8004f04:	460b      	mov	r3, r1
 8004f06:	80fb      	strh	r3, [r7, #6]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004f0c:	88bb      	ldrh	r3, [r7, #4]
 8004f0e:	085b      	lsrs	r3, r3, #1
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	005a      	lsls	r2, r3, #1
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f28:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2e:	e01b      	b.n	8004f68 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	3302      	adds	r3, #2
 8004f3c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	3302      	adds	r3, #2
 8004f60:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	3b01      	subs	r3, #1
 8004f66:	627b      	str	r3, [r7, #36]	; 0x24
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e0      	bne.n	8004f30 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004f6e:	88bb      	ldrh	r3, [r7, #4]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d007      	beq.n	8004f8a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	701a      	strb	r2, [r3, #0]
  }
}
 8004f8a:	bf00      	nop
 8004f8c:	372c      	adds	r7, #44	; 0x2c
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr

08004f94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	7c1b      	ldrb	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d115      	bne.n	8004fd8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	2181      	movs	r1, #129	; 0x81
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f001 fe16 	bl	8006be6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f001 fe0c 	bl	8006be6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004fd6:	e012      	b.n	8004ffe <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004fd8:	2340      	movs	r3, #64	; 0x40
 8004fda:	2202      	movs	r2, #2
 8004fdc:	2181      	movs	r1, #129	; 0x81
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 fe01 	bl	8006be6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004fea:	2340      	movs	r3, #64	; 0x40
 8004fec:	2202      	movs	r2, #2
 8004fee:	2101      	movs	r1, #1
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f001 fdf8 	bl	8006be6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ffe:	2308      	movs	r3, #8
 8005000:	2203      	movs	r2, #3
 8005002:	2182      	movs	r1, #130	; 0x82
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f001 fdee 	bl	8006be6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005010:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005014:	f001 ff08 	bl	8006e28 <USBD_static_malloc>
 8005018:	4602      	mov	r2, r0
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800502a:	2301      	movs	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
 800502e:	e026      	b.n	800507e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005036:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2200      	movs	r2, #0
 8005046:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2200      	movs	r2, #0
 800504e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	7c1b      	ldrb	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005064:	2101      	movs	r1, #1
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f001 fea7 	bl	8006dba <USBD_LL_PrepareReceive>
 800506c:	e007      	b.n	800507e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005074:	2340      	movs	r3, #64	; 0x40
 8005076:	2101      	movs	r1, #1
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f001 fe9e 	bl	8006dba <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800507e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005098:	2181      	movs	r1, #129	; 0x81
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f001 fdc9 	bl	8006c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80050a6:	2101      	movs	r1, #1
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f001 fdc2 	bl	8006c32 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80050b6:	2182      	movs	r1, #130	; 0x82
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f001 fdba 	bl	8006c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00e      	beq.n	80050ec <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 feae 	bl	8006e40 <USBD_static_free>
    pdev->pClassData = NULL;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b086      	sub	sp, #24
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005106:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005110:	2300      	movs	r3, #0
 8005112:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800511c:	2b00      	cmp	r3, #0
 800511e:	d039      	beq.n	8005194 <USBD_CDC_Setup+0x9e>
 8005120:	2b20      	cmp	r3, #32
 8005122:	d17c      	bne.n	800521e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	88db      	ldrh	r3, [r3, #6]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d029      	beq.n	8005180 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	b25b      	sxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	da11      	bge.n	800515a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005142:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	88d2      	ldrh	r2, [r2, #6]
 8005148:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800514a:	6939      	ldr	r1, [r7, #16]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	88db      	ldrh	r3, [r3, #6]
 8005150:	461a      	mov	r2, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 f9c6 	bl	80064e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005158:	e068      	b.n	800522c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	785a      	ldrb	r2, [r3, #1]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	88db      	ldrh	r3, [r3, #6]
 8005168:	b2da      	uxtb	r2, r3
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005170:	6939      	ldr	r1, [r7, #16]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	88db      	ldrh	r3, [r3, #6]
 8005176:	461a      	mov	r2, r3
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f001 f9e1 	bl	8006540 <USBD_CtlPrepareRx>
      break;
 800517e:	e055      	b.n	800522c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	7850      	ldrb	r0, [r2, #1]
 800518c:	2200      	movs	r2, #0
 800518e:	6839      	ldr	r1, [r7, #0]
 8005190:	4798      	blx	r3
      break;
 8005192:	e04b      	b.n	800522c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	785b      	ldrb	r3, [r3, #1]
 8005198:	2b0a      	cmp	r3, #10
 800519a:	d017      	beq.n	80051cc <USBD_CDC_Setup+0xd6>
 800519c:	2b0b      	cmp	r3, #11
 800519e:	d029      	beq.n	80051f4 <USBD_CDC_Setup+0xfe>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d133      	bne.n	800520c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d107      	bne.n	80051be <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80051ae:	f107 030c 	add.w	r3, r7, #12
 80051b2:	2202      	movs	r2, #2
 80051b4:	4619      	mov	r1, r3
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f001 f994 	bl	80064e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051bc:	e02e      	b.n	800521c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80051be:	6839      	ldr	r1, [r7, #0]
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f001 f925 	bl	8006410 <USBD_CtlError>
            ret = USBD_FAIL;
 80051c6:	2302      	movs	r3, #2
 80051c8:	75fb      	strb	r3, [r7, #23]
          break;
 80051ca:	e027      	b.n	800521c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d107      	bne.n	80051e6 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80051d6:	f107 030f 	add.w	r3, r7, #15
 80051da:	2201      	movs	r2, #1
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f001 f980 	bl	80064e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051e4:	e01a      	b.n	800521c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80051e6:	6839      	ldr	r1, [r7, #0]
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f001 f911 	bl	8006410 <USBD_CtlError>
            ret = USBD_FAIL;
 80051ee:	2302      	movs	r3, #2
 80051f0:	75fb      	strb	r3, [r7, #23]
          break;
 80051f2:	e013      	b.n	800521c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d00d      	beq.n	800521a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f001 f905 	bl	8006410 <USBD_CtlError>
            ret = USBD_FAIL;
 8005206:	2302      	movs	r3, #2
 8005208:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800520a:	e006      	b.n	800521a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800520c:	6839      	ldr	r1, [r7, #0]
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f001 f8fe 	bl	8006410 <USBD_CtlError>
          ret = USBD_FAIL;
 8005214:	2302      	movs	r3, #2
 8005216:	75fb      	strb	r3, [r7, #23]
          break;
 8005218:	e000      	b.n	800521c <USBD_CDC_Setup+0x126>
          break;
 800521a:	bf00      	nop
      }
      break;
 800521c:	e006      	b.n	800522c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800521e:	6839      	ldr	r1, [r7, #0]
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f001 f8f5 	bl	8006410 <USBD_CtlError>
      ret = USBD_FAIL;
 8005226:	2302      	movs	r3, #2
 8005228:	75fb      	strb	r3, [r7, #23]
      break;
 800522a:	bf00      	nop
  }

  return ret;
 800522c:	7dfb      	ldrb	r3, [r7, #23]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	460b      	mov	r3, r1
 8005240:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005248:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005250:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d037      	beq.n	80052cc <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800525c:	78fa      	ldrb	r2, [r7, #3]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	331c      	adds	r3, #28
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d026      	beq.n	80052c0 <USBD_CDC_DataIn+0x8a>
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	331c      	adds	r3, #28
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	78fa      	ldrb	r2, [r7, #3]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	0152      	lsls	r2, r2, #5
 800528a:	440a      	add	r2, r1
 800528c:	3238      	adds	r2, #56	; 0x38
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	fbb3 f1f2 	udiv	r1, r3, r2
 8005294:	fb02 f201 	mul.w	r2, r2, r1
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d110      	bne.n	80052c0 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	331c      	adds	r3, #28
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80052b2:	78f9      	ldrb	r1, [r7, #3]
 80052b4:	2300      	movs	r3, #0
 80052b6:	2200      	movs	r2, #0
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f001 fd5b 	bl	8006d74 <USBD_LL_Transmit>
 80052be:	e003      	b.n	80052c8 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	e000      	b.n	80052ce <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80052cc:	2302      	movs	r3, #2
  }
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80052ea:	78fb      	ldrb	r3, [r7, #3]
 80052ec:	4619      	mov	r1, r3
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f001 fd86 	bl	8006e00 <USBD_LL_GetRxDataSize>
 80052f4:	4602      	mov	r2, r0
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00d      	beq.n	8005322 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800531a:	4611      	mov	r1, r2
 800531c:	4798      	blx	r3

    return USBD_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	e000      	b.n	8005324 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005322:	2302      	movs	r3, #2
  }
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800533a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005342:	2b00      	cmp	r3, #0
 8005344:	d015      	beq.n	8005372 <USBD_CDC_EP0_RxReady+0x46>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800534c:	2bff      	cmp	r3, #255	; 0xff
 800534e:	d010      	beq.n	8005372 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800535e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005366:	b292      	uxth	r2, r2
 8005368:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	22ff      	movs	r2, #255	; 0xff
 800536e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2243      	movs	r2, #67	; 0x43
 8005388:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800538a:	4b03      	ldr	r3, [pc, #12]	; (8005398 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20000094 	.word	0x20000094

0800539c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2243      	movs	r2, #67	; 0x43
 80053a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80053aa:	4b03      	ldr	r3, [pc, #12]	; (80053b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	20000050 	.word	0x20000050

080053bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2243      	movs	r2, #67	; 0x43
 80053c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80053ca:	4b03      	ldr	r3, [pc, #12]	; (80053d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	200000d8 	.word	0x200000d8

080053dc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	220a      	movs	r2, #10
 80053e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80053ea:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	2000000c 	.word	0x2000000c

080053fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005406:	2302      	movs	r3, #2
 8005408:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800541c:	7bfb      	ldrb	r3, [r7, #15]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr

08005428 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	4613      	mov	r3, r2
 8005434:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800543c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005446:	88fa      	ldrh	r2, [r7, #6]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr

0800545a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800545a:	b480      	push	{r7}
 800545c:	b085      	sub	sp, #20
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800546a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800548e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d017      	beq.n	80054ca <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	7c1b      	ldrb	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d109      	bne.n	80054b6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054ac:	2101      	movs	r1, #1
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f001 fc83 	bl	8006dba <USBD_LL_PrepareReceive>
 80054b4:	e007      	b.n	80054c6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054bc:	2340      	movs	r3, #64	; 0x40
 80054be:	2101      	movs	r1, #1
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f001 fc7a 	bl	8006dba <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e000      	b.n	80054cc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80054ca:	2302      	movs	r3, #2
  }
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	4613      	mov	r3, r2
 80054e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80054e8:	2302      	movs	r3, #2
 80054ea:	e01a      	b.n	8005522 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	79fa      	ldrb	r2, [r7, #7]
 8005518:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f001 faee 	bl	8006afc <USBD_LL_Init>

  return USBD_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d006      	beq.n	800554c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
 800554a:	e001      	b.n	8005550 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800554c:	2302      	movs	r3, #2
 800554e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005550:	7bfb      	ldrb	r3, [r7, #15]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr

0800555c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f001 fb23 	bl	8006bb0 <USBD_LL_Start>

  return USBD_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005594:	2302      	movs	r3, #2
 8005596:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00c      	beq.n	80055bc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	4611      	mov	r1, r2
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	4798      	blx	r3
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	460b      	mov	r3, r1
 80055d0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	78fa      	ldrb	r2, [r7, #3]
 80055dc:	4611      	mov	r1, r2
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	4798      	blx	r3

  return USBD_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 feca 	bl	8006398 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005612:	461a      	mov	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	2b01      	cmp	r3, #1
 8005626:	d00c      	beq.n	8005642 <USBD_LL_SetupStage+0x56>
 8005628:	2b01      	cmp	r3, #1
 800562a:	d302      	bcc.n	8005632 <USBD_LL_SetupStage+0x46>
 800562c:	2b02      	cmp	r3, #2
 800562e:	d010      	beq.n	8005652 <USBD_LL_SetupStage+0x66>
 8005630:	e017      	b.n	8005662 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005638:	4619      	mov	r1, r3
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9ca 	bl	80059d4 <USBD_StdDevReq>
      break;
 8005640:	e01a      	b.n	8005678 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fa2c 	bl	8005aa8 <USBD_StdItfReq>
      break;
 8005650:	e012      	b.n	8005678 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005658:	4619      	mov	r1, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fa6a 	bl	8005b34 <USBD_StdEPReq>
      break;
 8005660:	e00a      	b.n	8005678 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005668:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800566c:	b2db      	uxtb	r3, r3
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f001 fafd 	bl	8006c70 <USBD_LL_StallEP>
      break;
 8005676:	bf00      	nop
  }

  return USBD_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	460b      	mov	r3, r1
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005690:	7afb      	ldrb	r3, [r7, #11]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d14b      	bne.n	800572e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800569c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d134      	bne.n	8005712 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d919      	bls.n	80056e8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	1ad2      	subs	r2, r2, r3
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d203      	bcs.n	80056d6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	e002      	b.n	80056dc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80056da:	b29b      	uxth	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 ff4b 	bl	800657c <USBD_CtlContinueRx>
 80056e6:	e038      	b.n	800575a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	d105      	bne.n	800570a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 ff48 	bl	80065a0 <USBD_CtlSendStatus>
 8005710:	e023      	b.n	800575a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005718:	2b05      	cmp	r3, #5
 800571a:	d11e      	bne.n	800575a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005724:	2100      	movs	r1, #0
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f001 faa2 	bl	8006c70 <USBD_LL_StallEP>
 800572c:	e015      	b.n	800575a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00d      	beq.n	8005756 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005740:	2b03      	cmp	r3, #3
 8005742:	d108      	bne.n	8005756 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	7afa      	ldrb	r2, [r7, #11]
 800574e:	4611      	mov	r1, r2
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	4798      	blx	r3
 8005754:	e001      	b.n	800575a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005756:	2302      	movs	r3, #2
 8005758:	e000      	b.n	800575c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	460b      	mov	r3, r1
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005772:	7afb      	ldrb	r3, [r7, #11]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d17f      	bne.n	8005878 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3314      	adds	r3, #20
 800577c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005784:	2b02      	cmp	r3, #2
 8005786:	d15c      	bne.n	8005842 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	429a      	cmp	r2, r3
 8005792:	d915      	bls.n	80057c0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	1ad2      	subs	r2, r2, r3
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	461a      	mov	r2, r3
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 feb5 	bl	800651c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057b2:	2300      	movs	r3, #0
 80057b4:	2200      	movs	r2, #0
 80057b6:	2100      	movs	r1, #0
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f001 fafe 	bl	8006dba <USBD_LL_PrepareReceive>
 80057be:	e04e      	b.n	800585e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	6912      	ldr	r2, [r2, #16]
 80057c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80057cc:	fb02 f201 	mul.w	r2, r2, r1
 80057d0:	1a9b      	subs	r3, r3, r2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d11c      	bne.n	8005810 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80057de:	429a      	cmp	r2, r3
 80057e0:	d316      	bcc.n	8005810 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d20f      	bcs.n	8005810 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80057f0:	2200      	movs	r2, #0
 80057f2:	2100      	movs	r1, #0
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 fe91 	bl	800651c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005802:	2300      	movs	r3, #0
 8005804:	2200      	movs	r2, #0
 8005806:	2100      	movs	r1, #0
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f001 fad6 	bl	8006dba <USBD_LL_PrepareReceive>
 800580e:	e026      	b.n	800585e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005822:	2b03      	cmp	r3, #3
 8005824:	d105      	bne.n	8005832 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005832:	2180      	movs	r1, #128	; 0x80
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f001 fa1b 	bl	8006c70 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fec3 	bl	80065c6 <USBD_CtlReceiveStatus>
 8005840:	e00d      	b.n	800585e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005848:	2b04      	cmp	r3, #4
 800584a:	d004      	beq.n	8005856 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005852:	2b00      	cmp	r3, #0
 8005854:	d103      	bne.n	800585e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005856:	2180      	movs	r1, #128	; 0x80
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f001 fa09 	bl	8006c70 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005864:	2b01      	cmp	r3, #1
 8005866:	d11d      	bne.n	80058a4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f7ff fe83 	bl	8005574 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005876:	e015      	b.n	80058a4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00d      	beq.n	80058a0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800588a:	2b03      	cmp	r3, #3
 800588c:	d108      	bne.n	80058a0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	7afa      	ldrb	r2, [r7, #11]
 8005898:	4611      	mov	r1, r2
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	4798      	blx	r3
 800589e:	e001      	b.n	80058a4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80058a0:	2302      	movs	r3, #2
 80058a2:	e000      	b.n	80058a6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058b6:	2340      	movs	r3, #64	; 0x40
 80058b8:	2200      	movs	r2, #0
 80058ba:	2100      	movs	r1, #0
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f001 f992 	bl	8006be6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2240      	movs	r2, #64	; 0x40
 80058ce:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058d2:	2340      	movs	r3, #64	; 0x40
 80058d4:	2200      	movs	r2, #0
 80058d6:	2180      	movs	r1, #128	; 0x80
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 f984 	bl	8006be6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2240      	movs	r2, #64	; 0x40
 80058e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6852      	ldr	r2, [r2, #4]
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	4611      	mov	r1, r2
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
  }

  return USBD_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	78fa      	ldrb	r2, [r7, #3]
 8005940:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr

0800594e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2204      	movs	r2, #4
 8005966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr

08005976 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005984:	2b04      	cmp	r3, #4
 8005986:	d105      	bne.n	8005994 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d10b      	bne.n	80059ca <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d005      	beq.n	80059ca <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d004      	beq.n	80059f8 <USBD_StdDevReq+0x24>
 80059ee:	2b40      	cmp	r3, #64	; 0x40
 80059f0:	d002      	beq.n	80059f8 <USBD_StdDevReq+0x24>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d008      	beq.n	8005a08 <USBD_StdDevReq+0x34>
 80059f6:	e04c      	b.n	8005a92 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
      break;
 8005a06:	e049      	b.n	8005a9c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	2b09      	cmp	r3, #9
 8005a0e:	d83a      	bhi.n	8005a86 <USBD_StdDevReq+0xb2>
 8005a10:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <USBD_StdDevReq+0x44>)
 8005a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a16:	bf00      	nop
 8005a18:	08005a69 	.word	0x08005a69
 8005a1c:	08005a7d 	.word	0x08005a7d
 8005a20:	08005a87 	.word	0x08005a87
 8005a24:	08005a73 	.word	0x08005a73
 8005a28:	08005a87 	.word	0x08005a87
 8005a2c:	08005a4b 	.word	0x08005a4b
 8005a30:	08005a41 	.word	0x08005a41
 8005a34:	08005a87 	.word	0x08005a87
 8005a38:	08005a5f 	.word	0x08005a5f
 8005a3c:	08005a55 	.word	0x08005a55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f9d4 	bl	8005df0 <USBD_GetDescriptor>
          break;
 8005a48:	e022      	b.n	8005a90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fb37 	bl	80060c0 <USBD_SetAddress>
          break;
 8005a52:	e01d      	b.n	8005a90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fb74 	bl	8006144 <USBD_SetConfig>
          break;
 8005a5c:	e018      	b.n	8005a90 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fbfd 	bl	8006260 <USBD_GetConfig>
          break;
 8005a66:	e013      	b.n	8005a90 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a68:	6839      	ldr	r1, [r7, #0]
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fc2c 	bl	80062c8 <USBD_GetStatus>
          break;
 8005a70:	e00e      	b.n	8005a90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fc5a 	bl	800632e <USBD_SetFeature>
          break;
 8005a7a:	e009      	b.n	8005a90 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fc69 	bl	8006356 <USBD_ClrFeature>
          break;
 8005a84:	e004      	b.n	8005a90 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005a86:	6839      	ldr	r1, [r7, #0]
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fcc1 	bl	8006410 <USBD_CtlError>
          break;
 8005a8e:	bf00      	nop
      }
      break;
 8005a90:	e004      	b.n	8005a9c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fcbb 	bl	8006410 <USBD_CtlError>
      break;
 8005a9a:	bf00      	nop
  }

  return ret;
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop

08005aa8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	d003      	beq.n	8005aca <USBD_StdItfReq+0x22>
 8005ac2:	2b40      	cmp	r3, #64	; 0x40
 8005ac4:	d001      	beq.n	8005aca <USBD_StdItfReq+0x22>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d12a      	bne.n	8005b20 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d81d      	bhi.n	8005b12 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	889b      	ldrh	r3, [r3, #4]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d813      	bhi.n	8005b08 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	6839      	ldr	r1, [r7, #0]
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	4798      	blx	r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	88db      	ldrh	r3, [r3, #6]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d110      	bne.n	8005b1c <USBD_StdItfReq+0x74>
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10d      	bne.n	8005b1c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fd4d 	bl	80065a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005b06:	e009      	b.n	8005b1c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005b08:	6839      	ldr	r1, [r7, #0]
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fc80 	bl	8006410 <USBD_CtlError>
          break;
 8005b10:	e004      	b.n	8005b1c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005b12:	6839      	ldr	r1, [r7, #0]
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fc7b 	bl	8006410 <USBD_CtlError>
          break;
 8005b1a:	e000      	b.n	8005b1e <USBD_StdItfReq+0x76>
          break;
 8005b1c:	bf00      	nop
      }
      break;
 8005b1e:	e004      	b.n	8005b2a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fc74 	bl	8006410 <USBD_CtlError>
      break;
 8005b28:	bf00      	nop
  }

  return USBD_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	889b      	ldrh	r3, [r3, #4]
 8005b46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d004      	beq.n	8005b5e <USBD_StdEPReq+0x2a>
 8005b54:	2b40      	cmp	r3, #64	; 0x40
 8005b56:	d002      	beq.n	8005b5e <USBD_StdEPReq+0x2a>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <USBD_StdEPReq+0x3a>
 8005b5c:	e13d      	b.n	8005dda <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	4798      	blx	r3
      break;
 8005b6c:	e13a      	b.n	8005de4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	d10a      	bne.n	8005b90 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	4798      	blx	r3
 8005b88:	4603      	mov	r3, r0
 8005b8a:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	e12a      	b.n	8005de6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	785b      	ldrb	r3, [r3, #1]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d03e      	beq.n	8005c16 <USBD_StdEPReq+0xe2>
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d002      	beq.n	8005ba2 <USBD_StdEPReq+0x6e>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d070      	beq.n	8005c82 <USBD_StdEPReq+0x14e>
 8005ba0:	e115      	b.n	8005dce <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d002      	beq.n	8005bb2 <USBD_StdEPReq+0x7e>
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	d015      	beq.n	8005bdc <USBD_StdEPReq+0xa8>
 8005bb0:	e02b      	b.n	8005c0a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bb2:	7bbb      	ldrb	r3, [r7, #14]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00c      	beq.n	8005bd2 <USBD_StdEPReq+0x9e>
 8005bb8:	7bbb      	ldrb	r3, [r7, #14]
 8005bba:	2b80      	cmp	r3, #128	; 0x80
 8005bbc:	d009      	beq.n	8005bd2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005bbe:	7bbb      	ldrb	r3, [r7, #14]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f001 f854 	bl	8006c70 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005bc8:	2180      	movs	r1, #128	; 0x80
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f001 f850 	bl	8006c70 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005bd0:	e020      	b.n	8005c14 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005bd2:	6839      	ldr	r1, [r7, #0]
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fc1b 	bl	8006410 <USBD_CtlError>
              break;
 8005bda:	e01b      	b.n	8005c14 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	885b      	ldrh	r3, [r3, #2]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10e      	bne.n	8005c02 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005be4:	7bbb      	ldrb	r3, [r7, #14]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00b      	beq.n	8005c02 <USBD_StdEPReq+0xce>
 8005bea:	7bbb      	ldrb	r3, [r7, #14]
 8005bec:	2b80      	cmp	r3, #128	; 0x80
 8005bee:	d008      	beq.n	8005c02 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	88db      	ldrh	r3, [r3, #6]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d104      	bne.n	8005c02 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005bf8:	7bbb      	ldrb	r3, [r7, #14]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 f837 	bl	8006c70 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fccc 	bl	80065a0 <USBD_CtlSendStatus>

              break;
 8005c08:	e004      	b.n	8005c14 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fbff 	bl	8006410 <USBD_CtlError>
              break;
 8005c12:	bf00      	nop
          }
          break;
 8005c14:	e0e0      	b.n	8005dd8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d002      	beq.n	8005c26 <USBD_StdEPReq+0xf2>
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d015      	beq.n	8005c50 <USBD_StdEPReq+0x11c>
 8005c24:	e026      	b.n	8005c74 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c26:	7bbb      	ldrb	r3, [r7, #14]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00c      	beq.n	8005c46 <USBD_StdEPReq+0x112>
 8005c2c:	7bbb      	ldrb	r3, [r7, #14]
 8005c2e:	2b80      	cmp	r3, #128	; 0x80
 8005c30:	d009      	beq.n	8005c46 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005c32:	7bbb      	ldrb	r3, [r7, #14]
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f001 f81a 	bl	8006c70 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005c3c:	2180      	movs	r1, #128	; 0x80
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f001 f816 	bl	8006c70 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c44:	e01c      	b.n	8005c80 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fbe1 	bl	8006410 <USBD_CtlError>
              break;
 8005c4e:	e017      	b.n	8005c80 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	885b      	ldrh	r3, [r3, #2]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d112      	bne.n	8005c7e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c58:	7bbb      	ldrb	r3, [r7, #14]
 8005c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d004      	beq.n	8005c6c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c62:	7bbb      	ldrb	r3, [r7, #14]
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f001 f821 	bl	8006cae <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fc97 	bl	80065a0 <USBD_CtlSendStatus>
              }
              break;
 8005c72:	e004      	b.n	8005c7e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fbca 	bl	8006410 <USBD_CtlError>
              break;
 8005c7c:	e000      	b.n	8005c80 <USBD_StdEPReq+0x14c>
              break;
 8005c7e:	bf00      	nop
          }
          break;
 8005c80:	e0aa      	b.n	8005dd8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d002      	beq.n	8005c92 <USBD_StdEPReq+0x15e>
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d032      	beq.n	8005cf6 <USBD_StdEPReq+0x1c2>
 8005c90:	e097      	b.n	8005dc2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c92:	7bbb      	ldrb	r3, [r7, #14]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <USBD_StdEPReq+0x174>
 8005c98:	7bbb      	ldrb	r3, [r7, #14]
 8005c9a:	2b80      	cmp	r3, #128	; 0x80
 8005c9c:	d004      	beq.n	8005ca8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fbb5 	bl	8006410 <USBD_CtlError>
                break;
 8005ca6:	e091      	b.n	8005dcc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	da0b      	bge.n	8005cc8 <USBD_StdEPReq+0x194>
 8005cb0:	7bbb      	ldrb	r3, [r7, #14]
 8005cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	3310      	adds	r3, #16
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	e00b      	b.n	8005ce0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005cc8:	7bbb      	ldrb	r3, [r7, #14]
 8005cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	4413      	add	r3, r2
 8005cde:	3304      	adds	r3, #4
 8005ce0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2202      	movs	r2, #2
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fbf8 	bl	80064e4 <USBD_CtlSendData>
              break;
 8005cf4:	e06a      	b.n	8005dcc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005cf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	da11      	bge.n	8005d22 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cfe:	7bbb      	ldrb	r3, [r7, #14]
 8005d00:	f003 020f 	and.w	r2, r3, #15
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	4613      	mov	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3318      	adds	r3, #24
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d117      	bne.n	8005d48 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fb78 	bl	8006410 <USBD_CtlError>
                  break;
 8005d20:	e054      	b.n	8005dcc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d22:	7bbb      	ldrb	r3, [r7, #14]
 8005d24:	f003 020f 	and.w	r2, r3, #15
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d104      	bne.n	8005d48 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fb65 	bl	8006410 <USBD_CtlError>
                  break;
 8005d46:	e041      	b.n	8005dcc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	da0b      	bge.n	8005d68 <USBD_StdEPReq+0x234>
 8005d50:	7bbb      	ldrb	r3, [r7, #14]
 8005d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	3310      	adds	r3, #16
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	4413      	add	r3, r2
 8005d64:	3304      	adds	r3, #4
 8005d66:	e00b      	b.n	8005d80 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d68:	7bbb      	ldrb	r3, [r7, #14]
 8005d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	3304      	adds	r3, #4
 8005d80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d82:	7bbb      	ldrb	r3, [r7, #14]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <USBD_StdEPReq+0x25a>
 8005d88:	7bbb      	ldrb	r3, [r7, #14]
 8005d8a:	2b80      	cmp	r3, #128	; 0x80
 8005d8c:	d103      	bne.n	8005d96 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e00e      	b.n	8005db4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005d96:	7bbb      	ldrb	r3, [r7, #14]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 ffa6 	bl	8006cec <USBD_LL_IsStallEP>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2201      	movs	r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	e002      	b.n	8005db4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2202      	movs	r2, #2
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fb92 	bl	80064e4 <USBD_CtlSendData>
              break;
 8005dc0:	e004      	b.n	8005dcc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fb23 	bl	8006410 <USBD_CtlError>
              break;
 8005dca:	bf00      	nop
          }
          break;
 8005dcc:	e004      	b.n	8005dd8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005dce:	6839      	ldr	r1, [r7, #0]
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fb1d 	bl	8006410 <USBD_CtlError>
          break;
 8005dd6:	bf00      	nop
      }
      break;
 8005dd8:	e004      	b.n	8005de4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fb17 	bl	8006410 <USBD_CtlError>
      break;
 8005de2:	bf00      	nop
  }

  return ret;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	885b      	ldrh	r3, [r3, #2]
 8005e0a:	0a1b      	lsrs	r3, r3, #8
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	2b06      	cmp	r3, #6
 8005e12:	f200 8128 	bhi.w	8006066 <USBD_GetDescriptor+0x276>
 8005e16:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <USBD_GetDescriptor+0x2c>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e39 	.word	0x08005e39
 8005e20:	08005e51 	.word	0x08005e51
 8005e24:	08005e91 	.word	0x08005e91
 8005e28:	08006067 	.word	0x08006067
 8005e2c:	08006067 	.word	0x08006067
 8005e30:	08006007 	.word	0x08006007
 8005e34:	08006033 	.word	0x08006033
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	7c12      	ldrb	r2, [r2, #16]
 8005e44:	f107 0108 	add.w	r1, r7, #8
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4798      	blx	r3
 8005e4c:	60f8      	str	r0, [r7, #12]
      break;
 8005e4e:	e112      	b.n	8006076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	7c1b      	ldrb	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10d      	bne.n	8005e74 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e60:	f107 0208 	add.w	r2, r7, #8
 8005e64:	4610      	mov	r0, r2
 8005e66:	4798      	blx	r3
 8005e68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	2202      	movs	r2, #2
 8005e70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005e72:	e100      	b.n	8006076 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	f107 0208 	add.w	r2, r7, #8
 8005e80:	4610      	mov	r0, r2
 8005e82:	4798      	blx	r3
 8005e84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	701a      	strb	r2, [r3, #0]
      break;
 8005e8e:	e0f2      	b.n	8006076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	885b      	ldrh	r3, [r3, #2]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b05      	cmp	r3, #5
 8005e98:	f200 80ac 	bhi.w	8005ff4 <USBD_GetDescriptor+0x204>
 8005e9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <USBD_GetDescriptor+0xb4>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08005ebd 	.word	0x08005ebd
 8005ea8:	08005ef1 	.word	0x08005ef1
 8005eac:	08005f25 	.word	0x08005f25
 8005eb0:	08005f59 	.word	0x08005f59
 8005eb4:	08005f8d 	.word	0x08005f8d
 8005eb8:	08005fc1 	.word	0x08005fc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00b      	beq.n	8005ee0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	7c12      	ldrb	r2, [r2, #16]
 8005ed4:	f107 0108 	add.w	r1, r7, #8
 8005ed8:	4610      	mov	r0, r2
 8005eda:	4798      	blx	r3
 8005edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ede:	e091      	b.n	8006004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa94 	bl	8006410 <USBD_CtlError>
            err++;
 8005ee8:	7afb      	ldrb	r3, [r7, #11]
 8005eea:	3301      	adds	r3, #1
 8005eec:	72fb      	strb	r3, [r7, #11]
          break;
 8005eee:	e089      	b.n	8006004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00b      	beq.n	8005f14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	7c12      	ldrb	r2, [r2, #16]
 8005f08:	f107 0108 	add.w	r1, r7, #8
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	4798      	blx	r3
 8005f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f12:	e077      	b.n	8006004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fa7a 	bl	8006410 <USBD_CtlError>
            err++;
 8005f1c:	7afb      	ldrb	r3, [r7, #11]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	72fb      	strb	r3, [r7, #11]
          break;
 8005f22:	e06f      	b.n	8006004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00b      	beq.n	8005f48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	7c12      	ldrb	r2, [r2, #16]
 8005f3c:	f107 0108 	add.w	r1, r7, #8
 8005f40:	4610      	mov	r0, r2
 8005f42:	4798      	blx	r3
 8005f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f46:	e05d      	b.n	8006004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fa60 	bl	8006410 <USBD_CtlError>
            err++;
 8005f50:	7afb      	ldrb	r3, [r7, #11]
 8005f52:	3301      	adds	r3, #1
 8005f54:	72fb      	strb	r3, [r7, #11]
          break;
 8005f56:	e055      	b.n	8006004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00b      	beq.n	8005f7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	7c12      	ldrb	r2, [r2, #16]
 8005f70:	f107 0108 	add.w	r1, r7, #8
 8005f74:	4610      	mov	r0, r2
 8005f76:	4798      	blx	r3
 8005f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f7a:	e043      	b.n	8006004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f7c:	6839      	ldr	r1, [r7, #0]
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa46 	bl	8006410 <USBD_CtlError>
            err++;
 8005f84:	7afb      	ldrb	r3, [r7, #11]
 8005f86:	3301      	adds	r3, #1
 8005f88:	72fb      	strb	r3, [r7, #11]
          break;
 8005f8a:	e03b      	b.n	8006004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00b      	beq.n	8005fb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	7c12      	ldrb	r2, [r2, #16]
 8005fa4:	f107 0108 	add.w	r1, r7, #8
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4798      	blx	r3
 8005fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fae:	e029      	b.n	8006004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fa2c 	bl	8006410 <USBD_CtlError>
            err++;
 8005fb8:	7afb      	ldrb	r3, [r7, #11]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8005fbe:	e021      	b.n	8006004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00b      	beq.n	8005fe4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	7c12      	ldrb	r2, [r2, #16]
 8005fd8:	f107 0108 	add.w	r1, r7, #8
 8005fdc:	4610      	mov	r0, r2
 8005fde:	4798      	blx	r3
 8005fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fe2:	e00f      	b.n	8006004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fa12 	bl	8006410 <USBD_CtlError>
            err++;
 8005fec:	7afb      	ldrb	r3, [r7, #11]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ff2:	e007      	b.n	8006004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa0a 	bl	8006410 <USBD_CtlError>
          err++;
 8005ffc:	7afb      	ldrb	r3, [r7, #11]
 8005ffe:	3301      	adds	r3, #1
 8006000:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006002:	e038      	b.n	8006076 <USBD_GetDescriptor+0x286>
 8006004:	e037      	b.n	8006076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	7c1b      	ldrb	r3, [r3, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d109      	bne.n	8006022 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006016:	f107 0208 	add.w	r2, r7, #8
 800601a:	4610      	mov	r0, r2
 800601c:	4798      	blx	r3
 800601e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006020:	e029      	b.n	8006076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f9f3 	bl	8006410 <USBD_CtlError>
        err++;
 800602a:	7afb      	ldrb	r3, [r7, #11]
 800602c:	3301      	adds	r3, #1
 800602e:	72fb      	strb	r3, [r7, #11]
      break;
 8006030:	e021      	b.n	8006076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	7c1b      	ldrb	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10d      	bne.n	8006056 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	f107 0208 	add.w	r2, r7, #8
 8006046:	4610      	mov	r0, r2
 8006048:	4798      	blx	r3
 800604a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3301      	adds	r3, #1
 8006050:	2207      	movs	r2, #7
 8006052:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006054:	e00f      	b.n	8006076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f9d9 	bl	8006410 <USBD_CtlError>
        err++;
 800605e:	7afb      	ldrb	r3, [r7, #11]
 8006060:	3301      	adds	r3, #1
 8006062:	72fb      	strb	r3, [r7, #11]
      break;
 8006064:	e007      	b.n	8006076 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f9d1 	bl	8006410 <USBD_CtlError>
      err++;
 800606e:	7afb      	ldrb	r3, [r7, #11]
 8006070:	3301      	adds	r3, #1
 8006072:	72fb      	strb	r3, [r7, #11]
      break;
 8006074:	bf00      	nop
  }

  if (err != 0U)
 8006076:	7afb      	ldrb	r3, [r7, #11]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d11c      	bne.n	80060b6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800607c:	893b      	ldrh	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d011      	beq.n	80060a6 <USBD_GetDescriptor+0x2b6>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	88db      	ldrh	r3, [r3, #6]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00d      	beq.n	80060a6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	88da      	ldrh	r2, [r3, #6]
 800608e:	893b      	ldrh	r3, [r7, #8]
 8006090:	4293      	cmp	r3, r2
 8006092:	bf28      	it	cs
 8006094:	4613      	movcs	r3, r2
 8006096:	b29b      	uxth	r3, r3
 8006098:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800609a:	893b      	ldrh	r3, [r7, #8]
 800609c:	461a      	mov	r2, r3
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fa1f 	bl	80064e4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	88db      	ldrh	r3, [r3, #6]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d104      	bne.n	80060b8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa76 	bl	80065a0 <USBD_CtlSendStatus>
 80060b4:	e000      	b.n	80060b8 <USBD_GetDescriptor+0x2c8>
    return;
 80060b6:	bf00      	nop
    }
  }
}
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop

080060c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	889b      	ldrh	r3, [r3, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d130      	bne.n	8006134 <USBD_SetAddress+0x74>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	88db      	ldrh	r3, [r3, #6]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d12c      	bne.n	8006134 <USBD_SetAddress+0x74>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	885b      	ldrh	r3, [r3, #2]
 80060de:	2b7f      	cmp	r3, #127	; 0x7f
 80060e0:	d828      	bhi.n	8006134 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	885b      	ldrh	r3, [r3, #2]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d104      	bne.n	8006102 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f988 	bl	8006410 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006100:	e01c      	b.n	800613c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	7bfa      	ldrb	r2, [r7, #15]
 8006106:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fe11 	bl	8006d36 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fa43 	bl	80065a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d004      	beq.n	800612a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006128:	e008      	b.n	800613c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006132:	e003      	b.n	800613c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f96a 	bl	8006410 <USBD_CtlError>
  }
}
 800613c:	bf00      	nop
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	885b      	ldrh	r3, [r3, #2]
 8006152:	b2da      	uxtb	r2, r3
 8006154:	4b41      	ldr	r3, [pc, #260]	; (800625c <USBD_SetConfig+0x118>)
 8006156:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006158:	4b40      	ldr	r3, [pc, #256]	; (800625c <USBD_SetConfig+0x118>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d904      	bls.n	800616a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f954 	bl	8006410 <USBD_CtlError>
 8006168:	e075      	b.n	8006256 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006170:	2b02      	cmp	r3, #2
 8006172:	d002      	beq.n	800617a <USBD_SetConfig+0x36>
 8006174:	2b03      	cmp	r3, #3
 8006176:	d023      	beq.n	80061c0 <USBD_SetConfig+0x7c>
 8006178:	e062      	b.n	8006240 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800617a:	4b38      	ldr	r3, [pc, #224]	; (800625c <USBD_SetConfig+0x118>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01a      	beq.n	80061b8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006182:	4b36      	ldr	r3, [pc, #216]	; (800625c <USBD_SetConfig+0x118>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2203      	movs	r2, #3
 8006190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006194:	4b31      	ldr	r3, [pc, #196]	; (800625c <USBD_SetConfig+0x118>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff f9f4 	bl	8005588 <USBD_SetClassConfig>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d104      	bne.n	80061b0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f931 	bl	8006410 <USBD_CtlError>
            return;
 80061ae:	e052      	b.n	8006256 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f9f5 	bl	80065a0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80061b6:	e04e      	b.n	8006256 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f9f1 	bl	80065a0 <USBD_CtlSendStatus>
        break;
 80061be:	e04a      	b.n	8006256 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80061c0:	4b26      	ldr	r3, [pc, #152]	; (800625c <USBD_SetConfig+0x118>)
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d112      	bne.n	80061ee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80061d0:	4b22      	ldr	r3, [pc, #136]	; (800625c <USBD_SetConfig+0x118>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80061da:	4b20      	ldr	r3, [pc, #128]	; (800625c <USBD_SetConfig+0x118>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	4619      	mov	r1, r3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff f9f0 	bl	80055c6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f9da 	bl	80065a0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80061ec:	e033      	b.n	8006256 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80061ee:	4b1b      	ldr	r3, [pc, #108]	; (800625c <USBD_SetConfig+0x118>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d01d      	beq.n	8006238 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff f9de 	bl	80055c6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800620a:	4b14      	ldr	r3, [pc, #80]	; (800625c <USBD_SetConfig+0x118>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006214:	4b11      	ldr	r3, [pc, #68]	; (800625c <USBD_SetConfig+0x118>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff f9b4 	bl	8005588 <USBD_SetClassConfig>
 8006220:	4603      	mov	r3, r0
 8006222:	2b02      	cmp	r3, #2
 8006224:	d104      	bne.n	8006230 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f8f1 	bl	8006410 <USBD_CtlError>
            return;
 800622e:	e012      	b.n	8006256 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f9b5 	bl	80065a0 <USBD_CtlSendStatus>
        break;
 8006236:	e00e      	b.n	8006256 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f9b1 	bl	80065a0 <USBD_CtlSendStatus>
        break;
 800623e:	e00a      	b.n	8006256 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f8e4 	bl	8006410 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006248:	4b04      	ldr	r3, [pc, #16]	; (800625c <USBD_SetConfig+0x118>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7ff f9b9 	bl	80055c6 <USBD_ClrClassConfig>
        break;
 8006254:	bf00      	nop
    }
  }
}
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	20000198 	.word	0x20000198

08006260 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	88db      	ldrh	r3, [r3, #6]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d004      	beq.n	800627c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f8cb 	bl	8006410 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800627a:	e021      	b.n	80062c0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006282:	2b01      	cmp	r3, #1
 8006284:	db17      	blt.n	80062b6 <USBD_GetConfig+0x56>
 8006286:	2b02      	cmp	r3, #2
 8006288:	dd02      	ble.n	8006290 <USBD_GetConfig+0x30>
 800628a:	2b03      	cmp	r3, #3
 800628c:	d00b      	beq.n	80062a6 <USBD_GetConfig+0x46>
 800628e:	e012      	b.n	80062b6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3308      	adds	r3, #8
 800629a:	2201      	movs	r2, #1
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f920 	bl	80064e4 <USBD_CtlSendData>
        break;
 80062a4:	e00c      	b.n	80062c0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3304      	adds	r3, #4
 80062aa:	2201      	movs	r2, #1
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f918 	bl	80064e4 <USBD_CtlSendData>
        break;
 80062b4:	e004      	b.n	80062c0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f8a9 	bl	8006410 <USBD_CtlError>
        break;
 80062be:	bf00      	nop
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d8:	3b01      	subs	r3, #1
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d81e      	bhi.n	800631c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	88db      	ldrh	r3, [r3, #6]
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d004      	beq.n	80062f0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f891 	bl	8006410 <USBD_CtlError>
        break;
 80062ee:	e01a      	b.n	8006326 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f043 0202 	orr.w	r2, r3, #2
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	330c      	adds	r3, #12
 8006310:	2202      	movs	r2, #2
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f8e5 	bl	80064e4 <USBD_CtlSendData>
      break;
 800631a:	e004      	b.n	8006326 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f876 	bl	8006410 <USBD_CtlError>
      break;
 8006324:	bf00      	nop
  }
}
 8006326:	bf00      	nop
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b082      	sub	sp, #8
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	885b      	ldrh	r3, [r3, #2]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d106      	bne.n	800634e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f929 	bl	80065a0 <USBD_CtlSendStatus>
  }
}
 800634e:	bf00      	nop
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006366:	3b01      	subs	r3, #1
 8006368:	2b02      	cmp	r3, #2
 800636a:	d80b      	bhi.n	8006384 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	885b      	ldrh	r3, [r3, #2]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d10c      	bne.n	800638e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f90f 	bl	80065a0 <USBD_CtlSendStatus>
      }
      break;
 8006382:	e004      	b.n	800638e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f842 	bl	8006410 <USBD_CtlError>
      break;
 800638c:	e000      	b.n	8006390 <USBD_ClrFeature+0x3a>
      break;
 800638e:	bf00      	nop
  }
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781a      	ldrb	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	785a      	ldrb	r2, [r3, #1]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	3302      	adds	r3, #2
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	3303      	adds	r3, #3
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	4413      	add	r3, r2
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	3304      	adds	r3, #4
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	3305      	adds	r3, #5
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	4413      	add	r3, r2
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	3306      	adds	r3, #6
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	3307      	adds	r3, #7
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	4413      	add	r3, r2
 8006400:	b29a      	uxth	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	80da      	strh	r2, [r3, #6]

}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr

08006410 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800641a:	2180      	movs	r1, #128	; 0x80
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fc27 	bl	8006c70 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006422:	2100      	movs	r1, #0
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fc23 	bl	8006c70 <USBD_LL_StallEP>
}
 800642a:	bf00      	nop
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b086      	sub	sp, #24
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d032      	beq.n	80064ae <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f834 	bl	80064b6 <USBD_GetLen>
 800644e:	4603      	mov	r3, r0
 8006450:	3301      	adds	r3, #1
 8006452:	b29b      	uxth	r3, r3
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	b29a      	uxth	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800645c:	7dfb      	ldrb	r3, [r7, #23]
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	75fa      	strb	r2, [r7, #23]
 8006462:	461a      	mov	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4413      	add	r3, r2
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	7812      	ldrb	r2, [r2, #0]
 800646c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800646e:	7dfb      	ldrb	r3, [r7, #23]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	75fa      	strb	r2, [r7, #23]
 8006474:	461a      	mov	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	4413      	add	r3, r2
 800647a:	2203      	movs	r2, #3
 800647c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800647e:	e012      	b.n	80064a6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	60fa      	str	r2, [r7, #12]
 8006486:	7dfa      	ldrb	r2, [r7, #23]
 8006488:	1c51      	adds	r1, r2, #1
 800648a:	75f9      	strb	r1, [r7, #23]
 800648c:	4611      	mov	r1, r2
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	440a      	add	r2, r1
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006496:	7dfb      	ldrb	r3, [r7, #23]
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	75fa      	strb	r2, [r7, #23]
 800649c:	461a      	mov	r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4413      	add	r3, r2
 80064a2:	2200      	movs	r2, #0
 80064a4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e8      	bne.n	8006480 <USBD_GetString+0x4e>
    }
  }
}
 80064ae:	bf00      	nop
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80064c2:	e005      	b.n	80064d0 <USBD_GetLen+0x1a>
  {
    len++;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	3301      	adds	r3, #1
 80064c8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3301      	adds	r3, #1
 80064ce:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f5      	bne.n	80064c4 <USBD_GetLen+0xe>
  }

  return len;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr

080064e4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2202      	movs	r2, #2
 80064f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80064fa:	88fa      	ldrh	r2, [r7, #6]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006500:	88fa      	ldrh	r2, [r7, #6]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006506:	88fb      	ldrh	r3, [r7, #6]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	2100      	movs	r1, #0
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 fc31 	bl	8006d74 <USBD_LL_Transmit>

  return USBD_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	4613      	mov	r3, r2
 8006528:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800652a:	88fb      	ldrh	r3, [r7, #6]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	2100      	movs	r1, #0
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 fc1f 	bl	8006d74 <USBD_LL_Transmit>

  return USBD_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	4613      	mov	r3, r2
 800654c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2203      	movs	r2, #3
 8006552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006556:	88fa      	ldrh	r2, [r7, #6]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800655e:	88fa      	ldrh	r2, [r7, #6]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	2100      	movs	r1, #0
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 fc24 	bl	8006dba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	4613      	mov	r3, r2
 8006588:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	2100      	movs	r1, #0
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 fc12 	bl	8006dba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2204      	movs	r2, #4
 80065ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80065b0:	2300      	movs	r3, #0
 80065b2:	2200      	movs	r2, #0
 80065b4:	2100      	movs	r1, #0
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fbdc 	bl	8006d74 <USBD_LL_Transmit>

  return USBD_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b082      	sub	sp, #8
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2205      	movs	r2, #5
 80065d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065d6:	2300      	movs	r3, #0
 80065d8:	2200      	movs	r2, #0
 80065da:	2100      	movs	r1, #0
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fbec 	bl	8006dba <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80065f0:	2200      	movs	r2, #0
 80065f2:	4912      	ldr	r1, [pc, #72]	; (800663c <MX_USB_DEVICE_Init+0x50>)
 80065f4:	4812      	ldr	r0, [pc, #72]	; (8006640 <MX_USB_DEVICE_Init+0x54>)
 80065f6:	f7fe ff6d 	bl	80054d4 <USBD_Init>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006600:	f7f9 ffa4 	bl	800054c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006604:	490f      	ldr	r1, [pc, #60]	; (8006644 <MX_USB_DEVICE_Init+0x58>)
 8006606:	480e      	ldr	r0, [pc, #56]	; (8006640 <MX_USB_DEVICE_Init+0x54>)
 8006608:	f7fe ff8f 	bl	800552a <USBD_RegisterClass>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006612:	f7f9 ff9b 	bl	800054c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006616:	490c      	ldr	r1, [pc, #48]	; (8006648 <MX_USB_DEVICE_Init+0x5c>)
 8006618:	4809      	ldr	r0, [pc, #36]	; (8006640 <MX_USB_DEVICE_Init+0x54>)
 800661a:	f7fe feef 	bl	80053fc <USBD_CDC_RegisterInterface>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006624:	f7f9 ff92 	bl	800054c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006628:	4805      	ldr	r0, [pc, #20]	; (8006640 <MX_USB_DEVICE_Init+0x54>)
 800662a:	f7fe ff97 	bl	800555c <USBD_Start>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006634:	f7f9 ff8a 	bl	800054c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006638:	bf00      	nop
 800663a:	bd80      	pop	{r7, pc}
 800663c:	2000012c 	.word	0x2000012c
 8006640:	2000053c 	.word	0x2000053c
 8006644:	20000018 	.word	0x20000018
 8006648:	2000011c 	.word	0x2000011c

0800664c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006650:	2200      	movs	r2, #0
 8006652:	4905      	ldr	r1, [pc, #20]	; (8006668 <CDC_Init_FS+0x1c>)
 8006654:	4805      	ldr	r0, [pc, #20]	; (800666c <CDC_Init_FS+0x20>)
 8006656:	f7fe fee7 	bl	8005428 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800665a:	4905      	ldr	r1, [pc, #20]	; (8006670 <CDC_Init_FS+0x24>)
 800665c:	4803      	ldr	r0, [pc, #12]	; (800666c <CDC_Init_FS+0x20>)
 800665e:	f7fe fefc 	bl	800545a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006662:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006664:	4618      	mov	r0, r3
 8006666:	bd80      	pop	{r7, pc}
 8006668:	20000be8 	.word	0x20000be8
 800666c:	2000053c 	.word	0x2000053c
 8006670:	20000800 	.word	0x20000800

08006674 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006674:	b480      	push	{r7}
 8006676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006678:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800667a:	4618      	mov	r0, r3
 800667c:	46bd      	mov	sp, r7
 800667e:	bc80      	pop	{r7}
 8006680:	4770      	bx	lr
	...

08006684 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	6039      	str	r1, [r7, #0]
 800668e:	71fb      	strb	r3, [r7, #7]
 8006690:	4613      	mov	r3, r2
 8006692:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	2b23      	cmp	r3, #35	; 0x23
 8006698:	d84a      	bhi.n	8006730 <CDC_Control_FS+0xac>
 800669a:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <CDC_Control_FS+0x1c>)
 800669c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a0:	08006731 	.word	0x08006731
 80066a4:	08006731 	.word	0x08006731
 80066a8:	08006731 	.word	0x08006731
 80066ac:	08006731 	.word	0x08006731
 80066b0:	08006731 	.word	0x08006731
 80066b4:	08006731 	.word	0x08006731
 80066b8:	08006731 	.word	0x08006731
 80066bc:	08006731 	.word	0x08006731
 80066c0:	08006731 	.word	0x08006731
 80066c4:	08006731 	.word	0x08006731
 80066c8:	08006731 	.word	0x08006731
 80066cc:	08006731 	.word	0x08006731
 80066d0:	08006731 	.word	0x08006731
 80066d4:	08006731 	.word	0x08006731
 80066d8:	08006731 	.word	0x08006731
 80066dc:	08006731 	.word	0x08006731
 80066e0:	08006731 	.word	0x08006731
 80066e4:	08006731 	.word	0x08006731
 80066e8:	08006731 	.word	0x08006731
 80066ec:	08006731 	.word	0x08006731
 80066f0:	08006731 	.word	0x08006731
 80066f4:	08006731 	.word	0x08006731
 80066f8:	08006731 	.word	0x08006731
 80066fc:	08006731 	.word	0x08006731
 8006700:	08006731 	.word	0x08006731
 8006704:	08006731 	.word	0x08006731
 8006708:	08006731 	.word	0x08006731
 800670c:	08006731 	.word	0x08006731
 8006710:	08006731 	.word	0x08006731
 8006714:	08006731 	.word	0x08006731
 8006718:	08006731 	.word	0x08006731
 800671c:	08006731 	.word	0x08006731
 8006720:	08006731 	.word	0x08006731
 8006724:	08006731 	.word	0x08006731
 8006728:	08006731 	.word	0x08006731
 800672c:	08006731 	.word	0x08006731
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006730:	bf00      	nop
  }

  return (USBD_OK);
 8006732:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006734:	4618      	mov	r0, r3
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop

08006740 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	4805      	ldr	r0, [pc, #20]	; (8006764 <CDC_Receive_FS+0x24>)
 800674e:	f7fe fe84 	bl	800545a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006752:	4804      	ldr	r0, [pc, #16]	; (8006764 <CDC_Receive_FS+0x24>)
 8006754:	f7fe fe94 	bl	8005480 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006758:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	2000053c 	.word	0x2000053c

08006768 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	4603      	mov	r3, r0
 8006770:	6039      	str	r1, [r7, #0]
 8006772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2212      	movs	r2, #18
 8006778:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800677a:	4b03      	ldr	r3, [pc, #12]	; (8006788 <USBD_FS_DeviceDescriptor+0x20>)
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	bc80      	pop	{r7}
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	20000148 	.word	0x20000148

0800678c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	4603      	mov	r3, r0
 8006794:	6039      	str	r1, [r7, #0]
 8006796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2204      	movs	r2, #4
 800679c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800679e:	4b03      	ldr	r3, [pc, #12]	; (80067ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	2000015c 	.word	0x2000015c

080067b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	4603      	mov	r3, r0
 80067b8:	6039      	str	r1, [r7, #0]
 80067ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80067bc:	79fb      	ldrb	r3, [r7, #7]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d105      	bne.n	80067ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	4907      	ldr	r1, [pc, #28]	; (80067e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80067c6:	4808      	ldr	r0, [pc, #32]	; (80067e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80067c8:	f7ff fe33 	bl	8006432 <USBD_GetString>
 80067cc:	e004      	b.n	80067d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	4904      	ldr	r1, [pc, #16]	; (80067e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80067d2:	4805      	ldr	r0, [pc, #20]	; (80067e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80067d4:	f7ff fe2d 	bl	8006432 <USBD_GetString>
  }
  return USBD_StrDesc;
 80067d8:	4b02      	ldr	r3, [pc, #8]	; (80067e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000fd0 	.word	0x20000fd0
 80067e8:	08006f44 	.word	0x08006f44

080067ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	4603      	mov	r3, r0
 80067f4:	6039      	str	r1, [r7, #0]
 80067f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	4904      	ldr	r1, [pc, #16]	; (800680c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80067fc:	4804      	ldr	r0, [pc, #16]	; (8006810 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80067fe:	f7ff fe18 	bl	8006432 <USBD_GetString>
  return USBD_StrDesc;
 8006802:	4b02      	ldr	r3, [pc, #8]	; (800680c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006804:	4618      	mov	r0, r3
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20000fd0 	.word	0x20000fd0
 8006810:	08006f5c 	.word	0x08006f5c

08006814 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	6039      	str	r1, [r7, #0]
 800681e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	221a      	movs	r2, #26
 8006824:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006826:	f000 f843 	bl	80068b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800682a:	4b02      	ldr	r3, [pc, #8]	; (8006834 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800682c:	4618      	mov	r0, r3
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20000160 	.word	0x20000160

08006838 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	4603      	mov	r3, r0
 8006840:	6039      	str	r1, [r7, #0]
 8006842:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d105      	bne.n	8006856 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	4907      	ldr	r1, [pc, #28]	; (800686c <USBD_FS_ConfigStrDescriptor+0x34>)
 800684e:	4808      	ldr	r0, [pc, #32]	; (8006870 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006850:	f7ff fdef 	bl	8006432 <USBD_GetString>
 8006854:	e004      	b.n	8006860 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	4904      	ldr	r1, [pc, #16]	; (800686c <USBD_FS_ConfigStrDescriptor+0x34>)
 800685a:	4805      	ldr	r0, [pc, #20]	; (8006870 <USBD_FS_ConfigStrDescriptor+0x38>)
 800685c:	f7ff fde9 	bl	8006432 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006860:	4b02      	ldr	r3, [pc, #8]	; (800686c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20000fd0 	.word	0x20000fd0
 8006870:	08006f70 	.word	0x08006f70

08006874 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	4603      	mov	r3, r0
 800687c:	6039      	str	r1, [r7, #0]
 800687e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006880:	79fb      	ldrb	r3, [r7, #7]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d105      	bne.n	8006892 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	4907      	ldr	r1, [pc, #28]	; (80068a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800688a:	4808      	ldr	r0, [pc, #32]	; (80068ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800688c:	f7ff fdd1 	bl	8006432 <USBD_GetString>
 8006890:	e004      	b.n	800689c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	4904      	ldr	r1, [pc, #16]	; (80068a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006896:	4805      	ldr	r0, [pc, #20]	; (80068ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006898:	f7ff fdcb 	bl	8006432 <USBD_GetString>
  }
  return USBD_StrDesc;
 800689c:	4b02      	ldr	r3, [pc, #8]	; (80068a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20000fd0 	.word	0x20000fd0
 80068ac:	08006f7c 	.word	0x08006f7c

080068b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80068b6:	4b0f      	ldr	r3, [pc, #60]	; (80068f4 <Get_SerialNum+0x44>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80068bc:	4b0e      	ldr	r3, [pc, #56]	; (80068f8 <Get_SerialNum+0x48>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80068c2:	4b0e      	ldr	r3, [pc, #56]	; (80068fc <Get_SerialNum+0x4c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4413      	add	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80068d6:	2208      	movs	r2, #8
 80068d8:	4909      	ldr	r1, [pc, #36]	; (8006900 <Get_SerialNum+0x50>)
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 f814 	bl	8006908 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80068e0:	2204      	movs	r2, #4
 80068e2:	4908      	ldr	r1, [pc, #32]	; (8006904 <Get_SerialNum+0x54>)
 80068e4:	68b8      	ldr	r0, [r7, #8]
 80068e6:	f000 f80f 	bl	8006908 <IntToUnicode>
  }
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	1ffff7e8 	.word	0x1ffff7e8
 80068f8:	1ffff7ec 	.word	0x1ffff7ec
 80068fc:	1ffff7f0 	.word	0x1ffff7f0
 8006900:	20000162 	.word	0x20000162
 8006904:	20000172 	.word	0x20000172

08006908 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	4613      	mov	r3, r2
 8006914:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800691a:	2300      	movs	r3, #0
 800691c:	75fb      	strb	r3, [r7, #23]
 800691e:	e027      	b.n	8006970 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	0f1b      	lsrs	r3, r3, #28
 8006924:	2b09      	cmp	r3, #9
 8006926:	d80b      	bhi.n	8006940 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	0f1b      	lsrs	r3, r3, #28
 800692c:	b2da      	uxtb	r2, r3
 800692e:	7dfb      	ldrb	r3, [r7, #23]
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	4619      	mov	r1, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	440b      	add	r3, r1
 8006938:	3230      	adds	r2, #48	; 0x30
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	e00a      	b.n	8006956 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	0f1b      	lsrs	r3, r3, #28
 8006944:	b2da      	uxtb	r2, r3
 8006946:	7dfb      	ldrb	r3, [r7, #23]
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	4619      	mov	r1, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	440b      	add	r3, r1
 8006950:	3237      	adds	r2, #55	; 0x37
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	3301      	adds	r3, #1
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	4413      	add	r3, r2
 8006966:	2200      	movs	r2, #0
 8006968:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	3301      	adds	r3, #1
 800696e:	75fb      	strb	r3, [r7, #23]
 8006970:	7dfa      	ldrb	r2, [r7, #23]
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	429a      	cmp	r2, r3
 8006976:	d3d3      	bcc.n	8006920 <IntToUnicode+0x18>
  }
}
 8006978:	bf00      	nop
 800697a:	371c      	adds	r7, #28
 800697c:	46bd      	mov	sp, r7
 800697e:	bc80      	pop	{r7}
 8006980:	4770      	bx	lr
	...

08006984 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a0d      	ldr	r2, [pc, #52]	; (80069c8 <HAL_PCD_MspInit+0x44>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d113      	bne.n	80069be <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006996:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <HAL_PCD_MspInit+0x48>)
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	4a0c      	ldr	r2, [pc, #48]	; (80069cc <HAL_PCD_MspInit+0x48>)
 800699c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069a0:	61d3      	str	r3, [r2, #28]
 80069a2:	4b0a      	ldr	r3, [pc, #40]	; (80069cc <HAL_PCD_MspInit+0x48>)
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80069ae:	2200      	movs	r2, #0
 80069b0:	2100      	movs	r1, #0
 80069b2:	2014      	movs	r0, #20
 80069b4:	f7fa fc63 	bl	800127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80069b8:	2014      	movs	r0, #20
 80069ba:	f7fa fc7c 	bl	80012b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80069be:	bf00      	nop
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	40005c00 	.word	0x40005c00
 80069cc:	40021000 	.word	0x40021000

080069d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80069e4:	4619      	mov	r1, r3
 80069e6:	4610      	mov	r0, r2
 80069e8:	f7fe fe00 	bl	80055ec <USBD_LL_SetupStage>
}
 80069ec:	bf00      	nop
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006a06:	78fb      	ldrb	r3, [r7, #3]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	015b      	lsls	r3, r3, #5
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	4619      	mov	r1, r3
 8006a18:	f7fe fe33 	bl	8005682 <USBD_LL_DataOutStage>
}
 8006a1c:	bf00      	nop
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	015b      	lsls	r3, r3, #5
 8006a3c:	4413      	add	r3, r2
 8006a3e:	333c      	adds	r3, #60	; 0x3c
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	4619      	mov	r1, r3
 8006a46:	f7fe fe8d 	bl	8005764 <USBD_LL_DataInStage>
}
 8006a4a:	bf00      	nop
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fe ff9d 	bl	80059a0 <USBD_LL_SOF>
}
 8006a66:	bf00      	nop
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a76:	2301      	movs	r3, #1
 8006a78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d001      	beq.n	8006a86 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006a82:	f7f9 fd63 	bl	800054c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006a8c:	7bfa      	ldrb	r2, [r7, #15]
 8006a8e:	4611      	mov	r1, r2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fe ff4d 	bl	8005930 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fe ff06 	bl	80058ae <USBD_LL_Reset>
}
 8006aa2:	bf00      	nop
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe ff47 	bl	800594e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ac8:	4b04      	ldr	r3, [pc, #16]	; (8006adc <HAL_PCD_SuspendCallback+0x30>)
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	4a03      	ldr	r2, [pc, #12]	; (8006adc <HAL_PCD_SuspendCallback+0x30>)
 8006ace:	f043 0306 	orr.w	r3, r3, #6
 8006ad2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	e000ed00 	.word	0xe000ed00

08006ae0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe ff41 	bl	8005976 <USBD_LL_Resume>
}
 8006af4:	bf00      	nop
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006b04:	4a28      	ldr	r2, [pc, #160]	; (8006ba8 <USBD_LL_Init+0xac>)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a26      	ldr	r2, [pc, #152]	; (8006ba8 <USBD_LL_Init+0xac>)
 8006b10:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006b14:	4b24      	ldr	r3, [pc, #144]	; (8006ba8 <USBD_LL_Init+0xac>)
 8006b16:	4a25      	ldr	r2, [pc, #148]	; (8006bac <USBD_LL_Init+0xb0>)
 8006b18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006b1a:	4b23      	ldr	r3, [pc, #140]	; (8006ba8 <USBD_LL_Init+0xac>)
 8006b1c:	2208      	movs	r2, #8
 8006b1e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006b20:	4b21      	ldr	r3, [pc, #132]	; (8006ba8 <USBD_LL_Init+0xac>)
 8006b22:	2202      	movs	r2, #2
 8006b24:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006b26:	4b20      	ldr	r3, [pc, #128]	; (8006ba8 <USBD_LL_Init+0xac>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006b2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ba8 <USBD_LL_Init+0xac>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006b32:	4b1d      	ldr	r3, [pc, #116]	; (8006ba8 <USBD_LL_Init+0xac>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006b38:	481b      	ldr	r0, [pc, #108]	; (8006ba8 <USBD_LL_Init+0xac>)
 8006b3a:	f7fa fec5 	bl	80018c8 <HAL_PCD_Init>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006b44:	f7f9 fd02 	bl	800054c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b4e:	2318      	movs	r3, #24
 8006b50:	2200      	movs	r2, #0
 8006b52:	2100      	movs	r1, #0
 8006b54:	f7fb fd5e 	bl	8002614 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b5e:	2358      	movs	r3, #88	; 0x58
 8006b60:	2200      	movs	r2, #0
 8006b62:	2180      	movs	r1, #128	; 0x80
 8006b64:	f7fb fd56 	bl	8002614 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b6e:	23c0      	movs	r3, #192	; 0xc0
 8006b70:	2200      	movs	r2, #0
 8006b72:	2181      	movs	r1, #129	; 0x81
 8006b74:	f7fb fd4e 	bl	8002614 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b7e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006b82:	2200      	movs	r2, #0
 8006b84:	2101      	movs	r1, #1
 8006b86:	f7fb fd45 	bl	8002614 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b94:	2200      	movs	r2, #0
 8006b96:	2182      	movs	r1, #130	; 0x82
 8006b98:	f7fb fd3c 	bl	8002614 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	200011d0 	.word	0x200011d0
 8006bac:	40005c00 	.word	0x40005c00

08006bb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fa ff5f 	bl	8001a8a <HAL_PCD_Start>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 f948 	bl	8006e68 <USBD_Get_USB_Status>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	4608      	mov	r0, r1
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	70fb      	strb	r3, [r7, #3]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70bb      	strb	r3, [r7, #2]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006c0e:	78bb      	ldrb	r3, [r7, #2]
 8006c10:	883a      	ldrh	r2, [r7, #0]
 8006c12:	78f9      	ldrb	r1, [r7, #3]
 8006c14:	f7fb f892 	bl	8001d3c <HAL_PCD_EP_Open>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 f922 	bl	8006e68 <USBD_Get_USB_Status>
 8006c24:	4603      	mov	r3, r0
 8006c26:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c4c:	78fa      	ldrb	r2, [r7, #3]
 8006c4e:	4611      	mov	r1, r2
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fb f8d3 	bl	8001dfc <HAL_PCD_EP_Close>
 8006c56:	4603      	mov	r3, r0
 8006c58:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 f903 	bl	8006e68 <USBD_Get_USB_Status>
 8006c62:	4603      	mov	r3, r0
 8006c64:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006c66:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c8a:	78fa      	ldrb	r2, [r7, #3]
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fb f97d 	bl	8001f8e <HAL_PCD_EP_SetStall>
 8006c94:	4603      	mov	r3, r0
 8006c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 f8e4 	bl	8006e68 <USBD_Get_USB_Status>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cc8:	78fa      	ldrb	r2, [r7, #3]
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fb f9b8 	bl	8002042 <HAL_PCD_EP_ClrStall>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 f8c5 	bl	8006e68 <USBD_Get_USB_Status>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cfe:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	da08      	bge.n	8006d1a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	015b      	lsls	r3, r3, #5
 8006d12:	4413      	add	r3, r2
 8006d14:	332a      	adds	r3, #42	; 0x2a
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	e008      	b.n	8006d2c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006d1a:	78fb      	ldrb	r3, [r7, #3]
 8006d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	015b      	lsls	r3, r3, #5
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006d2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr

08006d36 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b084      	sub	sp, #16
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d50:	78fa      	ldrb	r2, [r7, #3]
 8006d52:	4611      	mov	r1, r2
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fa ffcc 	bl	8001cf2 <HAL_PCD_SetAddress>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 f881 	bl	8006e68 <USBD_Get_USB_Status>
 8006d66:	4603      	mov	r3, r0
 8006d68:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	607a      	str	r2, [r7, #4]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	460b      	mov	r3, r1
 8006d82:	72fb      	strb	r3, [r7, #11]
 8006d84:	4613      	mov	r3, r2
 8006d86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d96:	893b      	ldrh	r3, [r7, #8]
 8006d98:	7af9      	ldrb	r1, [r7, #11]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	f7fb f8be 	bl	8001f1c <HAL_PCD_EP_Transmit>
 8006da0:	4603      	mov	r3, r0
 8006da2:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 f85e 	bl	8006e68 <USBD_Get_USB_Status>
 8006dac:	4603      	mov	r3, r0
 8006dae:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006db0:	7dbb      	ldrb	r3, [r7, #22]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b086      	sub	sp, #24
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	72fb      	strb	r3, [r7, #11]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ddc:	893b      	ldrh	r3, [r7, #8]
 8006dde:	7af9      	ldrb	r1, [r7, #11]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	f7fb f84d 	bl	8001e80 <HAL_PCD_EP_Receive>
 8006de6:	4603      	mov	r3, r0
 8006de8:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 f83b 	bl	8006e68 <USBD_Get_USB_Status>
 8006df2:	4603      	mov	r3, r0
 8006df4:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006df6:	7dbb      	ldrb	r3, [r7, #22]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e12:	78fa      	ldrb	r2, [r7, #3]
 8006e14:	4611      	mov	r1, r2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fb f86c 	bl	8001ef4 <HAL_PCD_EP_GetRxCount>
 8006e1c:	4603      	mov	r3, r0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006e30:	4b02      	ldr	r3, [pc, #8]	; (8006e3c <USBD_static_malloc+0x14>)
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr
 8006e3c:	2000019c 	.word	0x2000019c

08006e40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]

}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bc80      	pop	{r7}
 8006e50:	4770      	bx	lr

08006e52 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006e5e:	bf00      	nop
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bc80      	pop	{r7}
 8006e66:	4770      	bx	lr

08006e68 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d817      	bhi.n	8006eac <USBD_Get_USB_Status+0x44>
 8006e7c:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <USBD_Get_USB_Status+0x1c>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006e95 	.word	0x08006e95
 8006e88:	08006e9b 	.word	0x08006e9b
 8006e8c:	08006ea1 	.word	0x08006ea1
 8006e90:	08006ea7 	.word	0x08006ea7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	73fb      	strb	r3, [r7, #15]
    break;
 8006e98:	e00b      	b.n	8006eb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e9e:	e008      	b.n	8006eb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea4:	e005      	b.n	8006eb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8006eaa:	e002      	b.n	8006eb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006eac:	2302      	movs	r3, #2
 8006eae:	73fb      	strb	r3, [r7, #15]
    break;
 8006eb0:	bf00      	nop
  }
  return usb_status;
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bc80      	pop	{r7}
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop

08006ec0 <__libc_init_array>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	2500      	movs	r5, #0
 8006ec4:	4e0c      	ldr	r6, [pc, #48]	; (8006ef8 <__libc_init_array+0x38>)
 8006ec6:	4c0d      	ldr	r4, [pc, #52]	; (8006efc <__libc_init_array+0x3c>)
 8006ec8:	1ba4      	subs	r4, r4, r6
 8006eca:	10a4      	asrs	r4, r4, #2
 8006ecc:	42a5      	cmp	r5, r4
 8006ece:	d109      	bne.n	8006ee4 <__libc_init_array+0x24>
 8006ed0:	f000 f822 	bl	8006f18 <_init>
 8006ed4:	2500      	movs	r5, #0
 8006ed6:	4e0a      	ldr	r6, [pc, #40]	; (8006f00 <__libc_init_array+0x40>)
 8006ed8:	4c0a      	ldr	r4, [pc, #40]	; (8006f04 <__libc_init_array+0x44>)
 8006eda:	1ba4      	subs	r4, r4, r6
 8006edc:	10a4      	asrs	r4, r4, #2
 8006ede:	42a5      	cmp	r5, r4
 8006ee0:	d105      	bne.n	8006eee <__libc_init_array+0x2e>
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
 8006ee4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ee8:	4798      	blx	r3
 8006eea:	3501      	adds	r5, #1
 8006eec:	e7ee      	b.n	8006ecc <__libc_init_array+0xc>
 8006eee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ef2:	4798      	blx	r3
 8006ef4:	3501      	adds	r5, #1
 8006ef6:	e7f2      	b.n	8006ede <__libc_init_array+0x1e>
 8006ef8:	08006fa4 	.word	0x08006fa4
 8006efc:	08006fa4 	.word	0x08006fa4
 8006f00:	08006fa4 	.word	0x08006fa4
 8006f04:	08006fa8 	.word	0x08006fa8

08006f08 <memset>:
 8006f08:	4603      	mov	r3, r0
 8006f0a:	4402      	add	r2, r0
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d100      	bne.n	8006f12 <memset+0xa>
 8006f10:	4770      	bx	lr
 8006f12:	f803 1b01 	strb.w	r1, [r3], #1
 8006f16:	e7f9      	b.n	8006f0c <memset+0x4>

08006f18 <_init>:
 8006f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1a:	bf00      	nop
 8006f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1e:	bc08      	pop	{r3}
 8006f20:	469e      	mov	lr, r3
 8006f22:	4770      	bx	lr

08006f24 <_fini>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	bf00      	nop
 8006f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2a:	bc08      	pop	{r3}
 8006f2c:	469e      	mov	lr, r3
 8006f2e:	4770      	bx	lr
